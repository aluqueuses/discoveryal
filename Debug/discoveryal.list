
discoveryal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a48  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002078  08009c28  08009c28  00019c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bca0  0800bca0  0001bca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bca8  0800bca8  0001bca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bcac  0800bcac  0001bcac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001a4  20000000  0800bcb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000bd0  200001a4  0800be54  000201a4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000d74  0800be54  00020d74  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0005cbf4  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000081e1  00000000  00000000  0007cdc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000221f9  00000000  00000000  00084fa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002a80  00000000  00000000  000a71a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000034f0  00000000  00000000  000a9c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000135b8  00000000  00000000  000ad118  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00011c24  00000000  00000000  000c06d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000d22f4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000091ac  00000000  00000000  000d2370  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         0000009c  00000000  00000000  000db51c  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      0000014d  00000000  00000000  000db5b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001a4 	.word	0x200001a4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009c10 	.word	0x08009c10

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001a8 	.word	0x200001a8
 800021c:	08009c10 	.word	0x08009c10

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f092 0f00 	teq	r2, #0
 80005aa:	bf14      	ite	ne
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e720      	b.n	8000404 <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aedc 	beq.w	80003b2 <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6c1      	b.n	80003b2 <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2iz>:
 8000a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a5c:	d215      	bcs.n	8000a8a <__aeabi_d2iz+0x36>
 8000a5e:	d511      	bpl.n	8000a84 <__aeabi_d2iz+0x30>
 8000a60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a68:	d912      	bls.n	8000a90 <__aeabi_d2iz+0x3c>
 8000a6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a7e:	bf18      	it	ne
 8000a80:	4240      	negne	r0, r0
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d105      	bne.n	8000a9c <__aeabi_d2iz+0x48>
 8000a90:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a94:	bf08      	it	eq
 8000a96:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_uldivmod>:
 8000aa4:	b953      	cbnz	r3, 8000abc <__aeabi_uldivmod+0x18>
 8000aa6:	b94a      	cbnz	r2, 8000abc <__aeabi_uldivmod+0x18>
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	bf08      	it	eq
 8000aac:	2800      	cmpeq	r0, #0
 8000aae:	bf1c      	itt	ne
 8000ab0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ab4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ab8:	f000 b97a 	b.w	8000db0 <__aeabi_idiv0>
 8000abc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ac4:	f000 f806 	bl	8000ad4 <__udivmoddi4>
 8000ac8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000acc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad0:	b004      	add	sp, #16
 8000ad2:	4770      	bx	lr

08000ad4 <__udivmoddi4>:
 8000ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad8:	468c      	mov	ip, r1
 8000ada:	460d      	mov	r5, r1
 8000adc:	4604      	mov	r4, r0
 8000ade:	9e08      	ldr	r6, [sp, #32]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d151      	bne.n	8000b88 <__udivmoddi4+0xb4>
 8000ae4:	428a      	cmp	r2, r1
 8000ae6:	4617      	mov	r7, r2
 8000ae8:	d96d      	bls.n	8000bc6 <__udivmoddi4+0xf2>
 8000aea:	fab2 fe82 	clz	lr, r2
 8000aee:	f1be 0f00 	cmp.w	lr, #0
 8000af2:	d00b      	beq.n	8000b0c <__udivmoddi4+0x38>
 8000af4:	f1ce 0c20 	rsb	ip, lr, #32
 8000af8:	fa01 f50e 	lsl.w	r5, r1, lr
 8000afc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000b00:	fa02 f70e 	lsl.w	r7, r2, lr
 8000b04:	ea4c 0c05 	orr.w	ip, ip, r5
 8000b08:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b0c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000b10:	0c25      	lsrs	r5, r4, #16
 8000b12:	fbbc f8fa 	udiv	r8, ip, sl
 8000b16:	fa1f f987 	uxth.w	r9, r7
 8000b1a:	fb0a cc18 	mls	ip, sl, r8, ip
 8000b1e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000b22:	fb08 f309 	mul.w	r3, r8, r9
 8000b26:	42ab      	cmp	r3, r5
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x6c>
 8000b2a:	19ed      	adds	r5, r5, r7
 8000b2c:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000b30:	f080 8123 	bcs.w	8000d7a <__udivmoddi4+0x2a6>
 8000b34:	42ab      	cmp	r3, r5
 8000b36:	f240 8120 	bls.w	8000d7a <__udivmoddi4+0x2a6>
 8000b3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000b3e:	443d      	add	r5, r7
 8000b40:	1aed      	subs	r5, r5, r3
 8000b42:	b2a4      	uxth	r4, r4
 8000b44:	fbb5 f0fa 	udiv	r0, r5, sl
 8000b48:	fb0a 5510 	mls	r5, sl, r0, r5
 8000b4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b50:	fb00 f909 	mul.w	r9, r0, r9
 8000b54:	45a1      	cmp	r9, r4
 8000b56:	d909      	bls.n	8000b6c <__udivmoddi4+0x98>
 8000b58:	19e4      	adds	r4, r4, r7
 8000b5a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b5e:	f080 810a 	bcs.w	8000d76 <__udivmoddi4+0x2a2>
 8000b62:	45a1      	cmp	r9, r4
 8000b64:	f240 8107 	bls.w	8000d76 <__udivmoddi4+0x2a2>
 8000b68:	3802      	subs	r0, #2
 8000b6a:	443c      	add	r4, r7
 8000b6c:	eba4 0409 	sub.w	r4, r4, r9
 8000b70:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b74:	2100      	movs	r1, #0
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	d061      	beq.n	8000c3e <__udivmoddi4+0x16a>
 8000b7a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000b7e:	2300      	movs	r3, #0
 8000b80:	6034      	str	r4, [r6, #0]
 8000b82:	6073      	str	r3, [r6, #4]
 8000b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b88:	428b      	cmp	r3, r1
 8000b8a:	d907      	bls.n	8000b9c <__udivmoddi4+0xc8>
 8000b8c:	2e00      	cmp	r6, #0
 8000b8e:	d054      	beq.n	8000c3a <__udivmoddi4+0x166>
 8000b90:	2100      	movs	r1, #0
 8000b92:	e886 0021 	stmia.w	r6, {r0, r5}
 8000b96:	4608      	mov	r0, r1
 8000b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9c:	fab3 f183 	clz	r1, r3
 8000ba0:	2900      	cmp	r1, #0
 8000ba2:	f040 808e 	bne.w	8000cc2 <__udivmoddi4+0x1ee>
 8000ba6:	42ab      	cmp	r3, r5
 8000ba8:	d302      	bcc.n	8000bb0 <__udivmoddi4+0xdc>
 8000baa:	4282      	cmp	r2, r0
 8000bac:	f200 80fa 	bhi.w	8000da4 <__udivmoddi4+0x2d0>
 8000bb0:	1a84      	subs	r4, r0, r2
 8000bb2:	eb65 0503 	sbc.w	r5, r5, r3
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	46ac      	mov	ip, r5
 8000bba:	2e00      	cmp	r6, #0
 8000bbc:	d03f      	beq.n	8000c3e <__udivmoddi4+0x16a>
 8000bbe:	e886 1010 	stmia.w	r6, {r4, ip}
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	b912      	cbnz	r2, 8000bce <__udivmoddi4+0xfa>
 8000bc8:	2701      	movs	r7, #1
 8000bca:	fbb7 f7f2 	udiv	r7, r7, r2
 8000bce:	fab7 fe87 	clz	lr, r7
 8000bd2:	f1be 0f00 	cmp.w	lr, #0
 8000bd6:	d134      	bne.n	8000c42 <__udivmoddi4+0x16e>
 8000bd8:	1beb      	subs	r3, r5, r7
 8000bda:	0c3a      	lsrs	r2, r7, #16
 8000bdc:	fa1f fc87 	uxth.w	ip, r7
 8000be0:	2101      	movs	r1, #1
 8000be2:	fbb3 f8f2 	udiv	r8, r3, r2
 8000be6:	0c25      	lsrs	r5, r4, #16
 8000be8:	fb02 3318 	mls	r3, r2, r8, r3
 8000bec:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000bf0:	fb0c f308 	mul.w	r3, ip, r8
 8000bf4:	42ab      	cmp	r3, r5
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0x134>
 8000bf8:	19ed      	adds	r5, r5, r7
 8000bfa:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x132>
 8000c00:	42ab      	cmp	r3, r5
 8000c02:	f200 80d1 	bhi.w	8000da8 <__udivmoddi4+0x2d4>
 8000c06:	4680      	mov	r8, r0
 8000c08:	1aed      	subs	r5, r5, r3
 8000c0a:	b2a3      	uxth	r3, r4
 8000c0c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000c10:	fb02 5510 	mls	r5, r2, r0, r5
 8000c14:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c18:	fb0c fc00 	mul.w	ip, ip, r0
 8000c1c:	45a4      	cmp	ip, r4
 8000c1e:	d907      	bls.n	8000c30 <__udivmoddi4+0x15c>
 8000c20:	19e4      	adds	r4, r4, r7
 8000c22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c26:	d202      	bcs.n	8000c2e <__udivmoddi4+0x15a>
 8000c28:	45a4      	cmp	ip, r4
 8000c2a:	f200 80b8 	bhi.w	8000d9e <__udivmoddi4+0x2ca>
 8000c2e:	4618      	mov	r0, r3
 8000c30:	eba4 040c 	sub.w	r4, r4, ip
 8000c34:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c38:	e79d      	b.n	8000b76 <__udivmoddi4+0xa2>
 8000c3a:	4631      	mov	r1, r6
 8000c3c:	4630      	mov	r0, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	f1ce 0420 	rsb	r4, lr, #32
 8000c46:	fa05 f30e 	lsl.w	r3, r5, lr
 8000c4a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c4e:	fa20 f804 	lsr.w	r8, r0, r4
 8000c52:	0c3a      	lsrs	r2, r7, #16
 8000c54:	fa25 f404 	lsr.w	r4, r5, r4
 8000c58:	ea48 0803 	orr.w	r8, r8, r3
 8000c5c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000c60:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000c64:	fb02 4411 	mls	r4, r2, r1, r4
 8000c68:	fa1f fc87 	uxth.w	ip, r7
 8000c6c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000c70:	fb01 f30c 	mul.w	r3, r1, ip
 8000c74:	42ab      	cmp	r3, r5
 8000c76:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c7a:	d909      	bls.n	8000c90 <__udivmoddi4+0x1bc>
 8000c7c:	19ed      	adds	r5, r5, r7
 8000c7e:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000c82:	f080 808a 	bcs.w	8000d9a <__udivmoddi4+0x2c6>
 8000c86:	42ab      	cmp	r3, r5
 8000c88:	f240 8087 	bls.w	8000d9a <__udivmoddi4+0x2c6>
 8000c8c:	3902      	subs	r1, #2
 8000c8e:	443d      	add	r5, r7
 8000c90:	1aeb      	subs	r3, r5, r3
 8000c92:	fa1f f588 	uxth.w	r5, r8
 8000c96:	fbb3 f0f2 	udiv	r0, r3, r2
 8000c9a:	fb02 3310 	mls	r3, r2, r0, r3
 8000c9e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ca2:	fb00 f30c 	mul.w	r3, r0, ip
 8000ca6:	42ab      	cmp	r3, r5
 8000ca8:	d907      	bls.n	8000cba <__udivmoddi4+0x1e6>
 8000caa:	19ed      	adds	r5, r5, r7
 8000cac:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000cb0:	d26f      	bcs.n	8000d92 <__udivmoddi4+0x2be>
 8000cb2:	42ab      	cmp	r3, r5
 8000cb4:	d96d      	bls.n	8000d92 <__udivmoddi4+0x2be>
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	443d      	add	r5, r7
 8000cba:	1aeb      	subs	r3, r5, r3
 8000cbc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cc0:	e78f      	b.n	8000be2 <__udivmoddi4+0x10e>
 8000cc2:	f1c1 0720 	rsb	r7, r1, #32
 8000cc6:	fa22 f807 	lsr.w	r8, r2, r7
 8000cca:	408b      	lsls	r3, r1
 8000ccc:	fa05 f401 	lsl.w	r4, r5, r1
 8000cd0:	ea48 0303 	orr.w	r3, r8, r3
 8000cd4:	fa20 fe07 	lsr.w	lr, r0, r7
 8000cd8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000cdc:	40fd      	lsrs	r5, r7
 8000cde:	ea4e 0e04 	orr.w	lr, lr, r4
 8000ce2:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ce6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000cea:	fb0c 5519 	mls	r5, ip, r9, r5
 8000cee:	fa1f f883 	uxth.w	r8, r3
 8000cf2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000cf6:	fb09 f408 	mul.w	r4, r9, r8
 8000cfa:	42ac      	cmp	r4, r5
 8000cfc:	fa02 f201 	lsl.w	r2, r2, r1
 8000d00:	fa00 fa01 	lsl.w	sl, r0, r1
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x244>
 8000d06:	18ed      	adds	r5, r5, r3
 8000d08:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d0c:	d243      	bcs.n	8000d96 <__udivmoddi4+0x2c2>
 8000d0e:	42ac      	cmp	r4, r5
 8000d10:	d941      	bls.n	8000d96 <__udivmoddi4+0x2c2>
 8000d12:	f1a9 0902 	sub.w	r9, r9, #2
 8000d16:	441d      	add	r5, r3
 8000d18:	1b2d      	subs	r5, r5, r4
 8000d1a:	fa1f fe8e 	uxth.w	lr, lr
 8000d1e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000d22:	fb0c 5510 	mls	r5, ip, r0, r5
 8000d26:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000d2a:	fb00 f808 	mul.w	r8, r0, r8
 8000d2e:	45a0      	cmp	r8, r4
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x26e>
 8000d32:	18e4      	adds	r4, r4, r3
 8000d34:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000d38:	d229      	bcs.n	8000d8e <__udivmoddi4+0x2ba>
 8000d3a:	45a0      	cmp	r8, r4
 8000d3c:	d927      	bls.n	8000d8e <__udivmoddi4+0x2ba>
 8000d3e:	3802      	subs	r0, #2
 8000d40:	441c      	add	r4, r3
 8000d42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d46:	eba4 0408 	sub.w	r4, r4, r8
 8000d4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d4e:	454c      	cmp	r4, r9
 8000d50:	46c6      	mov	lr, r8
 8000d52:	464d      	mov	r5, r9
 8000d54:	d315      	bcc.n	8000d82 <__udivmoddi4+0x2ae>
 8000d56:	d012      	beq.n	8000d7e <__udivmoddi4+0x2aa>
 8000d58:	b156      	cbz	r6, 8000d70 <__udivmoddi4+0x29c>
 8000d5a:	ebba 030e 	subs.w	r3, sl, lr
 8000d5e:	eb64 0405 	sbc.w	r4, r4, r5
 8000d62:	fa04 f707 	lsl.w	r7, r4, r7
 8000d66:	40cb      	lsrs	r3, r1
 8000d68:	431f      	orrs	r7, r3
 8000d6a:	40cc      	lsrs	r4, r1
 8000d6c:	6037      	str	r7, [r6, #0]
 8000d6e:	6074      	str	r4, [r6, #4]
 8000d70:	2100      	movs	r1, #0
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	4618      	mov	r0, r3
 8000d78:	e6f8      	b.n	8000b6c <__udivmoddi4+0x98>
 8000d7a:	4690      	mov	r8, r2
 8000d7c:	e6e0      	b.n	8000b40 <__udivmoddi4+0x6c>
 8000d7e:	45c2      	cmp	sl, r8
 8000d80:	d2ea      	bcs.n	8000d58 <__udivmoddi4+0x284>
 8000d82:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d86:	eb69 0503 	sbc.w	r5, r9, r3
 8000d8a:	3801      	subs	r0, #1
 8000d8c:	e7e4      	b.n	8000d58 <__udivmoddi4+0x284>
 8000d8e:	4628      	mov	r0, r5
 8000d90:	e7d7      	b.n	8000d42 <__udivmoddi4+0x26e>
 8000d92:	4640      	mov	r0, r8
 8000d94:	e791      	b.n	8000cba <__udivmoddi4+0x1e6>
 8000d96:	4681      	mov	r9, r0
 8000d98:	e7be      	b.n	8000d18 <__udivmoddi4+0x244>
 8000d9a:	4601      	mov	r1, r0
 8000d9c:	e778      	b.n	8000c90 <__udivmoddi4+0x1bc>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	443c      	add	r4, r7
 8000da2:	e745      	b.n	8000c30 <__udivmoddi4+0x15c>
 8000da4:	4608      	mov	r0, r1
 8000da6:	e708      	b.n	8000bba <__udivmoddi4+0xe6>
 8000da8:	f1a8 0802 	sub.w	r8, r8, #2
 8000dac:	443d      	add	r5, r7
 8000dae:	e72b      	b.n	8000c08 <__udivmoddi4+0x134>

08000db0 <__aeabi_idiv0>:
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <LSM303AGR_ACC_GetCapabilities>:
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8000db4:	2301      	movs	r3, #1
 8000db6:	700b      	strb	r3, [r1, #0]
  Capabilities->Gyro         = 0;
  Capabilities->Magneto      = 0;
  Capabilities->LowPower     = 0;
  Capabilities->GyroMaxFS    = 0;
  Capabilities->AccMaxFS     = 16;
 8000db8:	2310      	movs	r3, #16
  Capabilities->Gyro         = 0;
 8000dba:	2000      	movs	r0, #0
  Capabilities->AccMaxFS     = 16;
 8000dbc:	608b      	str	r3, [r1, #8]
  Capabilities->MagMaxFS     = 0;
  Capabilities->GyroMaxOdr   = 0.0f;
  Capabilities->AccMaxOdr    = 400.0f;
 8000dbe:	4a05      	ldr	r2, [pc, #20]	; (8000dd4 <LSM303AGR_ACC_GetCapabilities+0x20>)
  Capabilities->Gyro         = 0;
 8000dc0:	7048      	strb	r0, [r1, #1]
  Capabilities->GyroMaxOdr   = 0.0f;
 8000dc2:	2300      	movs	r3, #0
  Capabilities->Magneto      = 0;
 8000dc4:	7088      	strb	r0, [r1, #2]
  Capabilities->LowPower     = 0;
 8000dc6:	70c8      	strb	r0, [r1, #3]
  Capabilities->GyroMaxFS    = 0;
 8000dc8:	6048      	str	r0, [r1, #4]
  Capabilities->MagMaxFS     = 0;
 8000dca:	60c8      	str	r0, [r1, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8000dcc:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 8000dce:	614a      	str	r2, [r1, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8000dd0:	618b      	str	r3, [r1, #24]
  return LSM303AGR_OK;
}
 8000dd2:	4770      	bx	lr
 8000dd4:	43c80000 	.word	0x43c80000

08000dd8 <LSM303AGR_MAG_GetCapabilities>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
  Capabilities->Gyro         = 0;
  Capabilities->Magneto      = 1;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	708b      	strb	r3, [r1, #2]
  Capabilities->LowPower     = 0;
  Capabilities->GyroMaxFS    = 0;
  Capabilities->AccMaxFS     = 0;
  Capabilities->MagMaxFS     = 50;
 8000ddc:	2332      	movs	r3, #50	; 0x32
 8000dde:	60cb      	str	r3, [r1, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8000de0:	2300      	movs	r3, #0
  Capabilities->Acc          = 0;
 8000de2:	2000      	movs	r0, #0
  Capabilities->GyroMaxOdr   = 0.0f;
 8000de4:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8000de6:	614b      	str	r3, [r1, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8000de8:	4b03      	ldr	r3, [pc, #12]	; (8000df8 <LSM303AGR_MAG_GetCapabilities+0x20>)
  Capabilities->Acc          = 0;
 8000dea:	7008      	strb	r0, [r1, #0]
  Capabilities->Gyro         = 0;
 8000dec:	7048      	strb	r0, [r1, #1]
  Capabilities->LowPower     = 0;
 8000dee:	70c8      	strb	r0, [r1, #3]
  Capabilities->GyroMaxFS    = 0;
 8000df0:	6048      	str	r0, [r1, #4]
  Capabilities->AccMaxFS     = 0;
 8000df2:	6088      	str	r0, [r1, #8]
  Capabilities->MagMaxOdr    = 100.0f;
 8000df4:	618b      	str	r3, [r1, #24]
  return LSM303AGR_OK;
}
 8000df6:	4770      	bx	lr
 8000df8:	42c80000 	.word	0x42c80000

08000dfc <LSM303AGR_MAG_GetSensitivity>:
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 8000dfc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8000e00:	600b      	str	r3, [r1, #0]

  return LSM303AGR_OK;
}
 8000e02:	2000      	movs	r0, #0
 8000e04:	4770      	bx	lr

08000e06 <LSM303AGR_MAG_GetFullScale>:
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
  *FullScale = 50;
 8000e06:	2332      	movs	r3, #50	; 0x32
 8000e08:	600b      	str	r3, [r1, #0]

  return LSM303AGR_OK;
}
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	4770      	bx	lr

08000e0e <LSM303AGR_MAG_SetFullScale>:
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
  return LSM303AGR_OK;
}
 8000e0e:	2000      	movs	r0, #0
 8000e10:	4770      	bx	lr

08000e12 <LSM303AGR_ACC_Init>:
{
 8000e12:	b538      	push	{r3, r4, r5, lr}
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8000e14:	f100 041c 	add.w	r4, r0, #28
 8000e18:	2101      	movs	r1, #1
{
 8000e1a:	4605      	mov	r5, r0
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8000e1c:	4620      	mov	r0, r4
 8000e1e:	f000 fc61 	bl	80016e4 <lsm303agr_xl_block_data_update_set>
 8000e22:	4601      	mov	r1, r0
 8000e24:	b110      	cbz	r0, 8000e2c <LSM303AGR_ACC_Init+0x1a>
    return LSM303AGR_ERROR;
 8000e26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e2a:	bd38      	pop	{r3, r4, r5, pc}
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 8000e2c:	4620      	mov	r0, r4
 8000e2e:	f000 fce9 	bl	8001804 <lsm303agr_xl_fifo_mode_set>
 8000e32:	4601      	mov	r1, r0
 8000e34:	2800      	cmp	r0, #0
 8000e36:	d1f6      	bne.n	8000e26 <LSM303AGR_ACC_Init+0x14>
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 8000e38:	2305      	movs	r3, #5
 8000e3a:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8000e3e:	4620      	mov	r0, r4
 8000e40:	f000 fc08 	bl	8001654 <lsm303agr_xl_data_rate_set>
 8000e44:	4601      	mov	r1, r0
 8000e46:	2800      	cmp	r0, #0
 8000e48:	d1ed      	bne.n	8000e26 <LSM303AGR_ACC_Init+0x14>
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 8000e4a:	4620      	mov	r0, r4
 8000e4c:	f000 fc26 	bl	800169c <lsm303agr_xl_full_scale_set>
 8000e50:	2800      	cmp	r0, #0
 8000e52:	d1e8      	bne.n	8000e26 <LSM303AGR_ACC_Init+0x14>
  pObj->is_initialized = 1;
 8000e54:	2301      	movs	r3, #1
 8000e56:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
}
 8000e5a:	bd38      	pop	{r3, r4, r5, pc}

08000e5c <LSM303AGR_ACC_SetFullScale>:
           : (FullScale <= 4) ? LSM303AGR_4g
 8000e5c:	2902      	cmp	r1, #2
{
 8000e5e:	b508      	push	{r3, lr}
           : (FullScale <= 4) ? LSM303AGR_4g
 8000e60:	dd0d      	ble.n	8000e7e <LSM303AGR_ACC_SetFullScale+0x22>
 8000e62:	2904      	cmp	r1, #4
 8000e64:	dd0d      	ble.n	8000e82 <LSM303AGR_ACC_SetFullScale+0x26>
 8000e66:	2909      	cmp	r1, #9
 8000e68:	bfb4      	ite	lt
 8000e6a:	2102      	movlt	r1, #2
 8000e6c:	2103      	movge	r1, #3
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 8000e6e:	301c      	adds	r0, #28
 8000e70:	f000 fc14 	bl	800169c <lsm303agr_xl_full_scale_set>
 8000e74:	3000      	adds	r0, #0
 8000e76:	bf18      	it	ne
 8000e78:	2001      	movne	r0, #1
}
 8000e7a:	4240      	negs	r0, r0
 8000e7c:	bd08      	pop	{r3, pc}
           : (FullScale <= 4) ? LSM303AGR_4g
 8000e7e:	2100      	movs	r1, #0
 8000e80:	e7f5      	b.n	8000e6e <LSM303AGR_ACC_SetFullScale+0x12>
 8000e82:	2101      	movs	r1, #1
 8000e84:	e7f3      	b.n	8000e6e <LSM303AGR_ACC_SetFullScale+0x12>

08000e86 <LSM303AGR_ACC_ReadID>:
{
 8000e86:	b508      	push	{r3, lr}
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8000e88:	301c      	adds	r0, #28
 8000e8a:	f000 fc9b 	bl	80017c4 <lsm303agr_xl_device_id_get>
 8000e8e:	3000      	adds	r0, #0
 8000e90:	bf18      	it	ne
 8000e92:	2001      	movne	r0, #1
}
 8000e94:	4240      	negs	r0, r0
 8000e96:	bd08      	pop	{r3, pc}

08000e98 <LSM303AGR_ACC_GetOutputDataRate>:
{
 8000e98:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8000e9a:	f100 051c 	add.w	r5, r0, #28
{
 8000e9e:	460c      	mov	r4, r1
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8000ea0:	4628      	mov	r0, r5
 8000ea2:	f10d 0106 	add.w	r1, sp, #6
 8000ea6:	f000 fbb5 	bl	8001614 <lsm303agr_xl_operating_mode_get>
 8000eaa:	b110      	cbz	r0, 8000eb2 <LSM303AGR_ACC_GetOutputDataRate+0x1a>
        ret = LSM303AGR_ERROR;
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000eb0:	e017      	b.n	8000ee2 <LSM303AGR_ACC_GetOutputDataRate+0x4a>
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8000eb2:	f10d 0107 	add.w	r1, sp, #7
 8000eb6:	4628      	mov	r0, r5
 8000eb8:	f000 fbe2 	bl	8001680 <lsm303agr_xl_data_rate_get>
 8000ebc:	2800      	cmp	r0, #0
 8000ebe:	d1f5      	bne.n	8000eac <LSM303AGR_ACC_GetOutputDataRate+0x14>
  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 8000ec0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000eca:	d10e      	bne.n	8000eea <LSM303AGR_ACC_GetOutputDataRate+0x52>
    switch (odr_low_level)
 8000ecc:	2b09      	cmp	r3, #9
 8000ece:	d8ed      	bhi.n	8000eac <LSM303AGR_ACC_GetOutputDataRate+0x14>
 8000ed0:	e8df f003 	tbb	[pc, r3]
 8000ed4:	2b292624 	.word	0x2b292624
 8000ed8:	33312f2d 	.word	0x33312f2d
 8000edc:	0905      	.short	0x0905
        *Odr = 1620.0f;
 8000ede:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <LSM303AGR_ACC_GetOutputDataRate+0xac>)
        *Odr = 1344.0f;
 8000ee0:	6023      	str	r3, [r4, #0]
}
 8000ee2:	b003      	add	sp, #12
 8000ee4:	bd30      	pop	{r4, r5, pc}
        *Odr = 5376.0f;
 8000ee6:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <LSM303AGR_ACC_GetOutputDataRate+0xb0>)
 8000ee8:	e7fa      	b.n	8000ee0 <LSM303AGR_ACC_GetOutputDataRate+0x48>
    switch (odr_low_level)
 8000eea:	2b09      	cmp	r3, #9
 8000eec:	d8de      	bhi.n	8000eac <LSM303AGR_ACC_GetOutputDataRate+0x14>
 8000eee:	a201      	add	r2, pc, #4	; (adr r2, 8000ef4 <LSM303AGR_ACC_GetOutputDataRate+0x5c>)
 8000ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef4:	08000f1d 	.word	0x08000f1d
 8000ef8:	08000f21 	.word	0x08000f21
 8000efc:	08000f27 	.word	0x08000f27
 8000f00:	08000f2b 	.word	0x08000f2b
 8000f04:	08000f2f 	.word	0x08000f2f
 8000f08:	08000f33 	.word	0x08000f33
 8000f0c:	08000f37 	.word	0x08000f37
 8000f10:	08000f3b 	.word	0x08000f3b
 8000f14:	08000ead 	.word	0x08000ead
 8000f18:	08000f3f 	.word	0x08000f3f
        *Odr = 0.0f;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	e7df      	b.n	8000ee0 <LSM303AGR_ACC_GetOutputDataRate+0x48>
        *Odr = 1.0f;
 8000f20:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000f24:	e7dc      	b.n	8000ee0 <LSM303AGR_ACC_GetOutputDataRate+0x48>
        *Odr = 10.0f;
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <LSM303AGR_ACC_GetOutputDataRate+0xb4>)
 8000f28:	e7da      	b.n	8000ee0 <LSM303AGR_ACC_GetOutputDataRate+0x48>
        *Odr = 25.0f;
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <LSM303AGR_ACC_GetOutputDataRate+0xb8>)
 8000f2c:	e7d8      	b.n	8000ee0 <LSM303AGR_ACC_GetOutputDataRate+0x48>
        *Odr = 50.0f;
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <LSM303AGR_ACC_GetOutputDataRate+0xbc>)
 8000f30:	e7d6      	b.n	8000ee0 <LSM303AGR_ACC_GetOutputDataRate+0x48>
        *Odr = 100.0f;
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <LSM303AGR_ACC_GetOutputDataRate+0xc0>)
 8000f34:	e7d4      	b.n	8000ee0 <LSM303AGR_ACC_GetOutputDataRate+0x48>
        *Odr = 200.0f;
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <LSM303AGR_ACC_GetOutputDataRate+0xc4>)
 8000f38:	e7d2      	b.n	8000ee0 <LSM303AGR_ACC_GetOutputDataRate+0x48>
        *Odr = 400.0f;
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <LSM303AGR_ACC_GetOutputDataRate+0xc8>)
 8000f3c:	e7d0      	b.n	8000ee0 <LSM303AGR_ACC_GetOutputDataRate+0x48>
        *Odr = 1344.0f;
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <LSM303AGR_ACC_GetOutputDataRate+0xcc>)
 8000f40:	e7ce      	b.n	8000ee0 <LSM303AGR_ACC_GetOutputDataRate+0x48>
 8000f42:	bf00      	nop
 8000f44:	44ca8000 	.word	0x44ca8000
 8000f48:	45a80000 	.word	0x45a80000
 8000f4c:	41200000 	.word	0x41200000
 8000f50:	41c80000 	.word	0x41c80000
 8000f54:	42480000 	.word	0x42480000
 8000f58:	42c80000 	.word	0x42c80000
 8000f5c:	43480000 	.word	0x43480000
 8000f60:	43c80000 	.word	0x43c80000
 8000f64:	44a80000 	.word	0x44a80000

08000f68 <LSM303AGR_ACC_GetFullScale>:
{
 8000f68:	b513      	push	{r0, r1, r4, lr}
 8000f6a:	460c      	mov	r4, r1
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 8000f6c:	301c      	adds	r0, #28
 8000f6e:	f10d 0107 	add.w	r1, sp, #7
 8000f72:	f000 fba9 	bl	80016c8 <lsm303agr_xl_full_scale_get>
 8000f76:	b988      	cbnz	r0, 8000f9c <LSM303AGR_ACC_GetFullScale+0x34>
  switch (fs_low_level)
 8000f78:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000f7c:	2b03      	cmp	r3, #3
 8000f7e:	d80d      	bhi.n	8000f9c <LSM303AGR_ACC_GetFullScale+0x34>
 8000f80:	e8df f003 	tbb	[pc, r3]
 8000f84:	0a080602 	.word	0x0a080602
      *FullScale =  2;
 8000f88:	2302      	movs	r3, #2
      *FullScale = 16;
 8000f8a:	6023      	str	r3, [r4, #0]
}
 8000f8c:	b002      	add	sp, #8
 8000f8e:	bd10      	pop	{r4, pc}
      *FullScale =  4;
 8000f90:	2304      	movs	r3, #4
 8000f92:	e7fa      	b.n	8000f8a <LSM303AGR_ACC_GetFullScale+0x22>
      *FullScale =  8;
 8000f94:	2308      	movs	r3, #8
 8000f96:	e7f8      	b.n	8000f8a <LSM303AGR_ACC_GetFullScale+0x22>
      *FullScale = 16;
 8000f98:	2310      	movs	r3, #16
 8000f9a:	e7f6      	b.n	8000f8a <LSM303AGR_ACC_GetFullScale+0x22>
      ret = LSM303AGR_ERROR;
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fa0:	e7f4      	b.n	8000f8c <LSM303AGR_ACC_GetFullScale+0x24>
	...

08000fa4 <LSM303AGR_ACC_GetAxesRaw>:
{
 8000fa4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8000fa6:	f100 061c 	add.w	r6, r0, #28
{
 8000faa:	460c      	mov	r4, r1
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8000fac:	4630      	mov	r0, r6
 8000fae:	f10d 0107 	add.w	r1, sp, #7
 8000fb2:	f000 fb2f 	bl	8001614 <lsm303agr_xl_operating_mode_get>
 8000fb6:	b118      	cbz	r0, 8000fc0 <LSM303AGR_ACC_GetAxesRaw+0x1c>
    return LSM303AGR_ERROR;
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8000fbc:	b004      	add	sp, #16
 8000fbe:	bd70      	pop	{r4, r5, r6, pc}
  switch (op_mode)
 8000fc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d8f7      	bhi.n	8000fb8 <LSM303AGR_ACC_GetAxesRaw+0x14>
 8000fc8:	4a0c      	ldr	r2, [pc, #48]	; (8000ffc <LSM303AGR_ACC_GetAxesRaw+0x58>)
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 8000fca:	a902      	add	r1, sp, #8
 8000fcc:	4630      	mov	r0, r6
 8000fce:	f932 5013 	ldrsh.w	r5, [r2, r3, lsl #1]
 8000fd2:	f000 fb9d 	bl	8001710 <lsm303agr_acceleration_raw_get>
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	d1ee      	bne.n	8000fb8 <LSM303AGR_ACC_GetAxesRaw+0x14>
  Value->x = (data_raw.i16bit[0] / divisor);
 8000fda:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8000fde:	fb93 f3f5 	sdiv	r3, r3, r5
 8000fe2:	8023      	strh	r3, [r4, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 8000fe4:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8000fe8:	fb93 f3f5 	sdiv	r3, r3, r5
 8000fec:	8063      	strh	r3, [r4, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 8000fee:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8000ff2:	fb93 f3f5 	sdiv	r3, r3, r5
 8000ff6:	80a3      	strh	r3, [r4, #4]
  return ret;
 8000ff8:	e7e0      	b.n	8000fbc <LSM303AGR_ACC_GetAxesRaw+0x18>
 8000ffa:	bf00      	nop
 8000ffc:	08009c28 	.word	0x08009c28

08001000 <LSM303AGR_MAG_SetOutputDataRate>:
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8001000:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8001004:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 800100c:	b508      	push	{r3, lr}
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 800100e:	d917      	bls.n	8001040 <LSM303AGR_MAG_SetOutputDataRate+0x40>
 8001010:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8001014:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101c:	d912      	bls.n	8001044 <LSM303AGR_MAG_SetOutputDataRate+0x44>
 800101e:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8001048 <LSM303AGR_MAG_SetOutputDataRate+0x48>
 8001022:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102a:	bf94      	ite	ls
 800102c:	2102      	movls	r1, #2
 800102e:	2103      	movhi	r1, #3
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8001030:	301c      	adds	r0, #28
 8001032:	f000 fb88 	bl	8001746 <lsm303agr_mag_data_rate_set>
 8001036:	3000      	adds	r0, #0
 8001038:	bf18      	it	ne
 800103a:	2001      	movne	r0, #1
}
 800103c:	4240      	negs	r0, r0
 800103e:	bd08      	pop	{r3, pc}
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8001040:	2100      	movs	r1, #0
 8001042:	e7f5      	b.n	8001030 <LSM303AGR_MAG_SetOutputDataRate+0x30>
 8001044:	2101      	movs	r1, #1
 8001046:	e7f3      	b.n	8001030 <LSM303AGR_MAG_SetOutputDataRate+0x30>
 8001048:	42480000 	.word	0x42480000

0800104c <LSM303AGR_MAG_Init>:
{
 800104c:	b538      	push	{r3, r4, r5, lr}
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 800104e:	f100 041c 	add.w	r4, r0, #28
{
 8001052:	4605      	mov	r5, r0
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8001054:	2101      	movs	r1, #1
 8001056:	4620      	mov	r0, r4
 8001058:	f000 fb99 	bl	800178e <lsm303agr_mag_block_data_update_set>
 800105c:	b110      	cbz	r0, 8001064 <LSM303AGR_MAG_Init+0x18>
    return LSM303AGR_ERROR;
 800105e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001062:	bd38      	pop	{r3, r4, r5, pc}
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8001064:	2102      	movs	r1, #2
 8001066:	4620      	mov	r0, r4
 8001068:	f000 fb57 	bl	800171a <lsm303agr_mag_operating_mode_set>
 800106c:	2800      	cmp	r0, #0
 800106e:	d1f6      	bne.n	800105e <LSM303AGR_MAG_Init+0x12>
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 8001070:	2103      	movs	r1, #3
 8001072:	4620      	mov	r0, r4
 8001074:	f000 fb67 	bl	8001746 <lsm303agr_mag_data_rate_set>
 8001078:	4601      	mov	r1, r0
 800107a:	2800      	cmp	r0, #0
 800107c:	d1ef      	bne.n	800105e <LSM303AGR_MAG_Init+0x12>
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 800107e:	4620      	mov	r0, r4
 8001080:	f000 fbaa 	bl	80017d8 <lsm303agr_mag_self_test_set>
 8001084:	2800      	cmp	r0, #0
 8001086:	d1ea      	bne.n	800105e <LSM303AGR_MAG_Init+0x12>
  pObj->is_initialized = 1;
 8001088:	2301      	movs	r3, #1
 800108a:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
}
 800108e:	bd38      	pop	{r3, r4, r5, pc}

08001090 <LSM303AGR_MAG_ReadID>:
{
 8001090:	b508      	push	{r3, lr}
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8001092:	301c      	adds	r0, #28
 8001094:	f000 fb9b 	bl	80017ce <lsm303agr_mag_device_id_get>
 8001098:	3000      	adds	r0, #0
 800109a:	bf18      	it	ne
 800109c:	2001      	movne	r0, #1
}
 800109e:	4240      	negs	r0, r0
 80010a0:	bd08      	pop	{r3, pc}
	...

080010a4 <LSM303AGR_MAG_GetOutputDataRate>:
{
 80010a4:	b513      	push	{r0, r1, r4, lr}
 80010a6:	460c      	mov	r4, r1
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 80010a8:	301c      	adds	r0, #28
 80010aa:	f10d 0107 	add.w	r1, sp, #7
 80010ae:	f000 fb60 	bl	8001772 <lsm303agr_mag_data_rate_get>
 80010b2:	b988      	cbnz	r0, 80010d8 <LSM303AGR_MAG_GetOutputDataRate+0x34>
  switch (odr_low_level)
 80010b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80010b8:	2b03      	cmp	r3, #3
 80010ba:	d80d      	bhi.n	80010d8 <LSM303AGR_MAG_GetOutputDataRate+0x34>
 80010bc:	e8df f003 	tbb	[pc, r3]
 80010c0:	0a080602 	.word	0x0a080602
      *Odr = 10.0f;
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <LSM303AGR_MAG_GetOutputDataRate+0x3c>)
      *Odr = 100.0f;
 80010c6:	6023      	str	r3, [r4, #0]
}
 80010c8:	b002      	add	sp, #8
 80010ca:	bd10      	pop	{r4, pc}
      *Odr = 20.0f;
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <LSM303AGR_MAG_GetOutputDataRate+0x40>)
 80010ce:	e7fa      	b.n	80010c6 <LSM303AGR_MAG_GetOutputDataRate+0x22>
      *Odr = 50.0f;
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <LSM303AGR_MAG_GetOutputDataRate+0x44>)
 80010d2:	e7f8      	b.n	80010c6 <LSM303AGR_MAG_GetOutputDataRate+0x22>
      *Odr = 100.0f;
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <LSM303AGR_MAG_GetOutputDataRate+0x48>)
 80010d6:	e7f6      	b.n	80010c6 <LSM303AGR_MAG_GetOutputDataRate+0x22>
      ret = LSM303AGR_ERROR;
 80010d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010dc:	e7f4      	b.n	80010c8 <LSM303AGR_MAG_GetOutputDataRate+0x24>
 80010de:	bf00      	nop
 80010e0:	41200000 	.word	0x41200000
 80010e4:	41a00000 	.word	0x41a00000
 80010e8:	42480000 	.word	0x42480000
 80010ec:	42c80000 	.word	0x42c80000

080010f0 <LSM303AGR_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 80010f0:	b513      	push	{r0, r1, r4, lr}
 80010f2:	460c      	mov	r4, r1
  axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 80010f4:	301c      	adds	r0, #28
 80010f6:	4669      	mov	r1, sp
 80010f8:	f000 fb5f 	bl	80017ba <lsm303agr_magnetic_raw_get>
 80010fc:	b950      	cbnz	r0, 8001114 <LSM303AGR_MAG_GetAxesRaw+0x24>
  {
    return LSM303AGR_ERROR;
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80010fe:	f8bd 3000 	ldrh.w	r3, [sp]
 8001102:	8023      	strh	r3, [r4, #0]
  Value->y = data_raw.i16bit[1];
 8001104:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8001108:	8063      	strh	r3, [r4, #2]
  Value->z = data_raw.i16bit[2];
 800110a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800110e:	80a3      	strh	r3, [r4, #4]

  return LSM303AGR_OK;
}
 8001110:	b002      	add	sp, #8
 8001112:	bd10      	pop	{r4, pc}
    return LSM303AGR_ERROR;
 8001114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001118:	e7fa      	b.n	8001110 <LSM303AGR_MAG_GetAxesRaw+0x20>

0800111a <LSM303AGR_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 800111a:	b513      	push	{r0, r1, r4, lr}
 800111c:	460c      	mov	r4, r1
  axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
 800111e:	301c      	adds	r0, #28
 8001120:	4669      	mov	r1, sp
 8001122:	f000 fb4a 	bl	80017ba <lsm303agr_magnetic_raw_get>
 8001126:	bb38      	cbnz	r0, 8001178 <LSM303AGR_MAG_GetAxes+0x5e>

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8001128:	f9bd 3000 	ldrsh.w	r3, [sp]
 800112c:	ee07 3a10 	vmov	s14, r3
 8001130:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001134:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8001138:	ee27 7a26 	vmul.f32	s14, s14, s13
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800113c:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8001140:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8001144:	ed84 7a00 	vstr	s14, [r4]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8001148:	ee07 3a10 	vmov	s14, r3
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800114c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8001150:	ee07 3a90 	vmov	s15, r3
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8001154:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8001158:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800115c:	ee27 7a26 	vmul.f32	s14, s14, s13
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8001160:	ee67 7aa6 	vmul.f32	s15, s15, s13
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8001164:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8001168:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800116c:	ed84 7a01 	vstr	s14, [r4, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8001170:	edc4 7a02 	vstr	s15, [r4, #8]

  return LSM303AGR_OK;
}
 8001174:	b002      	add	sp, #8
 8001176:	bd10      	pop	{r4, pc}
    return LSM303AGR_ERROR;
 8001178:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800117c:	e7fa      	b.n	8001174 <LSM303AGR_MAG_GetAxes+0x5a>
	...

08001180 <LSM303AGR_ACC_SetOutputDataRate>:
{
 8001180:	b508      	push	{r3, lr}
  if (pObj->acc_is_enabled == 1U)
 8001182:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
 8001186:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800118a:	2901      	cmp	r1, #1
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 800118c:	eeb4 0ae7 	vcmpe.f32	s0, s15
  if (pObj->acc_is_enabled == 1U)
 8001190:	d137      	bne.n	8001202 <LSM303AGR_ACC_SetOutputDataRate+0x82>
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8001192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001196:	d924      	bls.n	80011e2 <LSM303AGR_ACC_SetOutputDataRate+0x62>
 8001198:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800119c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80011a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a4:	d925      	bls.n	80011f2 <LSM303AGR_ACC_SetOutputDataRate+0x72>
 80011a6:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 80011aa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80011ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b2:	d920      	bls.n	80011f6 <LSM303AGR_ACC_SetOutputDataRate+0x76>
 80011b4:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8001270 <LSM303AGR_ACC_SetOutputDataRate+0xf0>
 80011b8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80011bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c0:	d91b      	bls.n	80011fa <LSM303AGR_ACC_SetOutputDataRate+0x7a>
 80011c2:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8001274 <LSM303AGR_ACC_SetOutputDataRate+0xf4>
 80011c6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80011ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ce:	d916      	bls.n	80011fe <LSM303AGR_ACC_SetOutputDataRate+0x7e>
 80011d0:	eddf 7a29 	vldr	s15, [pc, #164]	; 8001278 <LSM303AGR_ACC_SetOutputDataRate+0xf8>
 80011d4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80011d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011dc:	bf94      	ite	ls
 80011de:	2106      	movls	r1, #6
 80011e0:	2107      	movhi	r1, #7
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 80011e2:	301c      	adds	r0, #28
 80011e4:	f000 fa36 	bl	8001654 <lsm303agr_xl_data_rate_set>
 80011e8:	3000      	adds	r0, #0
 80011ea:	bf18      	it	ne
 80011ec:	2001      	movne	r0, #1
 80011ee:	4240      	negs	r0, r0
 80011f0:	bd08      	pop	{r3, pc}
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 80011f2:	2102      	movs	r1, #2
 80011f4:	e7f5      	b.n	80011e2 <LSM303AGR_ACC_SetOutputDataRate+0x62>
 80011f6:	2103      	movs	r1, #3
 80011f8:	e7f3      	b.n	80011e2 <LSM303AGR_ACC_SetOutputDataRate+0x62>
 80011fa:	2104      	movs	r1, #4
 80011fc:	e7f1      	b.n	80011e2 <LSM303AGR_ACC_SetOutputDataRate+0x62>
 80011fe:	2105      	movs	r1, #5
 8001200:	e7ef      	b.n	80011e2 <LSM303AGR_ACC_SetOutputDataRate+0x62>
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8001202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001206:	d928      	bls.n	800125a <LSM303AGR_ACC_SetOutputDataRate+0xda>
 8001208:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800120c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001214:	d923      	bls.n	800125e <LSM303AGR_ACC_SetOutputDataRate+0xde>
 8001216:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 800121a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800121e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001222:	d91e      	bls.n	8001262 <LSM303AGR_ACC_SetOutputDataRate+0xe2>
 8001224:	eddf 7a12 	vldr	s15, [pc, #72]	; 8001270 <LSM303AGR_ACC_SetOutputDataRate+0xf0>
 8001228:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800122c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001230:	d919      	bls.n	8001266 <LSM303AGR_ACC_SetOutputDataRate+0xe6>
 8001232:	eddf 7a10 	vldr	s15, [pc, #64]	; 8001274 <LSM303AGR_ACC_SetOutputDataRate+0xf4>
 8001236:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800123a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800123e:	d914      	bls.n	800126a <LSM303AGR_ACC_SetOutputDataRate+0xea>
 8001240:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8001278 <LSM303AGR_ACC_SetOutputDataRate+0xf8>
 8001244:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124c:	bf94      	ite	ls
 800124e:	2306      	movls	r3, #6
 8001250:	2307      	movhi	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8001252:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8001256:	2000      	movs	r0, #0
}
 8001258:	bd08      	pop	{r3, pc}
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 800125a:	2301      	movs	r3, #1
 800125c:	e7f9      	b.n	8001252 <LSM303AGR_ACC_SetOutputDataRate+0xd2>
 800125e:	2302      	movs	r3, #2
 8001260:	e7f7      	b.n	8001252 <LSM303AGR_ACC_SetOutputDataRate+0xd2>
 8001262:	2303      	movs	r3, #3
 8001264:	e7f5      	b.n	8001252 <LSM303AGR_ACC_SetOutputDataRate+0xd2>
 8001266:	2304      	movs	r3, #4
 8001268:	e7f3      	b.n	8001252 <LSM303AGR_ACC_SetOutputDataRate+0xd2>
 800126a:	2305      	movs	r3, #5
 800126c:	e7f1      	b.n	8001252 <LSM303AGR_ACC_SetOutputDataRate+0xd2>
 800126e:	bf00      	nop
 8001270:	42480000 	.word	0x42480000
 8001274:	42c80000 	.word	0x42c80000
 8001278:	43480000 	.word	0x43480000

0800127c <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800127c:	b430      	push	{r4, r5}
 800127e:	4604      	mov	r4, r0
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8001280:	6885      	ldr	r5, [r0, #8]
 8001282:	6964      	ldr	r4, [r4, #20]
 8001284:	7b00      	ldrb	r0, [r0, #12]
 8001286:	b925      	cbnz	r5, 8001292 <ReadAccRegWrap+0x16>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001288:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800128c:	46a4      	mov	ip, r4
  }
}
 800128e:	bc30      	pop	{r4, r5}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001290:	4760      	bx	ip
 8001292:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001296:	e7f9      	b.n	800128c <ReadAccRegWrap+0x10>

08001298 <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001298:	b430      	push	{r4, r5}
 800129a:	4604      	mov	r4, r0
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 800129c:	6885      	ldr	r5, [r0, #8]
 800129e:	6924      	ldr	r4, [r4, #16]
 80012a0:	7b00      	ldrb	r0, [r0, #12]
 80012a2:	b925      	cbnz	r5, 80012ae <WriteAccRegWrap+0x16>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80012a4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80012a8:	46a4      	mov	ip, r4
  }
}
 80012aa:	bc30      	pop	{r4, r5}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80012ac:	4760      	bx	ip
 80012ae:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80012b2:	e7f9      	b.n	80012a8 <WriteAccRegWrap+0x10>

080012b4 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80012b4:	b430      	push	{r4, r5}
 80012b6:	4604      	mov	r4, r0
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80012b8:	6885      	ldr	r5, [r0, #8]
 80012ba:	6964      	ldr	r4, [r4, #20]
 80012bc:	7b00      	ldrb	r0, [r0, #12]
 80012be:	b925      	cbnz	r5, 80012ca <ReadMagRegWrap+0x16>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80012c0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80012c4:	46a4      	mov	ip, r4
  }
}
 80012c6:	bc30      	pop	{r4, r5}
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80012c8:	4760      	bx	ip
 80012ca:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80012ce:	e7f9      	b.n	80012c4 <ReadMagRegWrap+0x10>

080012d0 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80012d0:	b430      	push	{r4, r5}
 80012d2:	4604      	mov	r4, r0
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80012d4:	6885      	ldr	r5, [r0, #8]
 80012d6:	6924      	ldr	r4, [r4, #16]
 80012d8:	7b00      	ldrb	r0, [r0, #12]
 80012da:	b925      	cbnz	r5, 80012e6 <WriteMagRegWrap+0x16>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80012dc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80012e0:	46a4      	mov	ip, r4
  }
}
 80012e2:	bc30      	pop	{r4, r5}
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80012e4:	4760      	bx	ip
 80012e6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80012ea:	e7f9      	b.n	80012e0 <WriteMagRegWrap+0x10>

080012ec <LSM303AGR_ACC_Enable>:
{
 80012ec:	b510      	push	{r4, lr}
  if (pObj->acc_is_enabled == 1U)
 80012ee:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80012f2:	2b01      	cmp	r3, #1
{
 80012f4:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 1U)
 80012f6:	d009      	beq.n	800130c <LSM303AGR_ACC_Enable+0x20>
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 80012f8:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
 80012fc:	301c      	adds	r0, #28
 80012fe:	f000 f9a9 	bl	8001654 <lsm303agr_xl_data_rate_set>
 8001302:	b928      	cbnz	r0, 8001310 <LSM303AGR_ACC_Enable+0x24>
  pObj->acc_is_enabled = 1;
 8001304:	2301      	movs	r3, #1
 8001306:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 800130a:	bd10      	pop	{r4, pc}
    return LSM303AGR_OK;
 800130c:	2000      	movs	r0, #0
 800130e:	bd10      	pop	{r4, pc}
    return LSM303AGR_ERROR;
 8001310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001314:	bd10      	pop	{r4, pc}

08001316 <LSM303AGR_ACC_Disable>:
{
 8001316:	b538      	push	{r3, r4, r5, lr}
 8001318:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 0U)
 800131a:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 800131e:	b190      	cbz	r0, 8001346 <LSM303AGR_ACC_Disable+0x30>
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 8001320:	f104 051c 	add.w	r5, r4, #28
 8001324:	f104 012a 	add.w	r1, r4, #42	; 0x2a
 8001328:	4628      	mov	r0, r5
 800132a:	f000 f9a9 	bl	8001680 <lsm303agr_xl_data_rate_get>
 800132e:	4601      	mov	r1, r0
 8001330:	b110      	cbz	r0, 8001338 <LSM303AGR_ACC_Disable+0x22>
    return LSM303AGR_ERROR;
 8001332:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001336:	bd38      	pop	{r3, r4, r5, pc}
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8001338:	4628      	mov	r0, r5
 800133a:	f000 f98b 	bl	8001654 <lsm303agr_xl_data_rate_set>
 800133e:	2800      	cmp	r0, #0
 8001340:	d1f7      	bne.n	8001332 <LSM303AGR_ACC_Disable+0x1c>
  pObj->acc_is_enabled = 0;
 8001342:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
}
 8001346:	bd38      	pop	{r3, r4, r5, pc}

08001348 <LSM303AGR_ACC_DeInit>:
{
 8001348:	b510      	push	{r4, lr}
 800134a:	4604      	mov	r4, r0
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 800134c:	f7ff ffe3 	bl	8001316 <LSM303AGR_ACC_Disable>
 8001350:	b920      	cbnz	r0, 800135c <LSM303AGR_ACC_DeInit+0x14>
  pObj->is_initialized = 0;
 8001352:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 8001356:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
  return LSM303AGR_OK;
 800135a:	bd10      	pop	{r4, pc}
    return LSM303AGR_ERROR;
 800135c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001360:	bd10      	pop	{r4, pc}
	...

08001364 <LSM303AGR_ACC_GetSensitivity>:
{
 8001364:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8001366:	f100 051c 	add.w	r5, r0, #28
{
 800136a:	460c      	mov	r4, r1
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 800136c:	4628      	mov	r0, r5
 800136e:	f10d 0106 	add.w	r1, sp, #6
 8001372:	f000 f94f 	bl	8001614 <lsm303agr_xl_operating_mode_get>
 8001376:	b930      	cbnz	r0, 8001386 <LSM303AGR_ACC_GetSensitivity+0x22>
  switch (op_mode)
 8001378:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d01c      	beq.n	80013ba <LSM303AGR_ACC_GetSensitivity+0x56>
 8001380:	d304      	bcc.n	800138c <LSM303AGR_ACC_GetSensitivity+0x28>
 8001382:	2b02      	cmp	r3, #2
 8001384:	d02e      	beq.n	80013e4 <LSM303AGR_ACC_GetSensitivity+0x80>
        return LSM303AGR_ERROR;
 8001386:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800138a:	e010      	b.n	80013ae <LSM303AGR_ACC_GetSensitivity+0x4a>
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 800138c:	f10d 0107 	add.w	r1, sp, #7
 8001390:	4628      	mov	r0, r5
 8001392:	f000 f999 	bl	80016c8 <lsm303agr_xl_full_scale_get>
 8001396:	2800      	cmp	r0, #0
 8001398:	d1f5      	bne.n	8001386 <LSM303AGR_ACC_GetSensitivity+0x22>
  switch (fullscale)
 800139a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800139e:	2b03      	cmp	r3, #3
 80013a0:	d8f1      	bhi.n	8001386 <LSM303AGR_ACC_GetSensitivity+0x22>
 80013a2:	e8df f003 	tbb	[pc, r3]
 80013a6:	0602      	.short	0x0602
 80013a8:	0819      	.short	0x0819
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 80013aa:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <LSM303AGR_ACC_GetSensitivity+0xb0>)
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 80013ac:	6023      	str	r3, [r4, #0]
}
 80013ae:	b003      	add	sp, #12
 80013b0:	bd30      	pop	{r4, r5, pc}
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 80013b2:	4b19      	ldr	r3, [pc, #100]	; (8001418 <LSM303AGR_ACC_GetSensitivity+0xb4>)
 80013b4:	e7fa      	b.n	80013ac <LSM303AGR_ACC_GetSensitivity+0x48>
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 80013b6:	4b19      	ldr	r3, [pc, #100]	; (800141c <LSM303AGR_ACC_GetSensitivity+0xb8>)
 80013b8:	e7f8      	b.n	80013ac <LSM303AGR_ACC_GetSensitivity+0x48>
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 80013ba:	f10d 0107 	add.w	r1, sp, #7
 80013be:	4628      	mov	r0, r5
 80013c0:	f000 f982 	bl	80016c8 <lsm303agr_xl_full_scale_get>
 80013c4:	2800      	cmp	r0, #0
 80013c6:	d1de      	bne.n	8001386 <LSM303AGR_ACC_GetSensitivity+0x22>
  switch (fullscale)
 80013c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80013cc:	2b03      	cmp	r3, #3
 80013ce:	d8da      	bhi.n	8001386 <LSM303AGR_ACC_GetSensitivity+0x22>
 80013d0:	e8df f003 	tbb	[pc, r3]
 80013d4:	06170402 	.word	0x06170402
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <LSM303AGR_ACC_GetSensitivity+0xbc>)
 80013da:	e7e7      	b.n	80013ac <LSM303AGR_ACC_GetSensitivity+0x48>
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <LSM303AGR_ACC_GetSensitivity+0xc0>)
 80013de:	e7e5      	b.n	80013ac <LSM303AGR_ACC_GetSensitivity+0x48>
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <LSM303AGR_ACC_GetSensitivity+0xc4>)
 80013e2:	e7e3      	b.n	80013ac <LSM303AGR_ACC_GetSensitivity+0x48>
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 80013e4:	f10d 0107 	add.w	r1, sp, #7
 80013e8:	4628      	mov	r0, r5
 80013ea:	f000 f96d 	bl	80016c8 <lsm303agr_xl_full_scale_get>
 80013ee:	2800      	cmp	r0, #0
 80013f0:	d1c9      	bne.n	8001386 <LSM303AGR_ACC_GetSensitivity+0x22>
  switch (fullscale)
 80013f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80013f6:	2b03      	cmp	r3, #3
 80013f8:	d8c5      	bhi.n	8001386 <LSM303AGR_ACC_GetSensitivity+0x22>
 80013fa:	e8df f003 	tbb	[pc, r3]
 80013fe:	0402      	.short	0x0402
 8001400:	0806      	.short	0x0806
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 8001402:	4b0a      	ldr	r3, [pc, #40]	; (800142c <LSM303AGR_ACC_GetSensitivity+0xc8>)
 8001404:	e7d2      	b.n	80013ac <LSM303AGR_ACC_GetSensitivity+0x48>
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <LSM303AGR_ACC_GetSensitivity+0xcc>)
 8001408:	e7d0      	b.n	80013ac <LSM303AGR_ACC_GetSensitivity+0x48>
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <LSM303AGR_ACC_GetSensitivity+0xd0>)
 800140c:	e7ce      	b.n	80013ac <LSM303AGR_ACC_GetSensitivity+0x48>
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 800140e:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <LSM303AGR_ACC_GetSensitivity+0xd4>)
 8001410:	e7cc      	b.n	80013ac <LSM303AGR_ACC_GetSensitivity+0x48>
 8001412:	bf00      	nop
 8001414:	3f7ae148 	.word	0x3f7ae148
 8001418:	3ff9999a 	.word	0x3ff9999a
 800141c:	413b851f 	.word	0x413b851f
 8001420:	4079999a 	.word	0x4079999a
 8001424:	40fa3d71 	.word	0x40fa3d71
 8001428:	423b999a 	.word	0x423b999a
 800142c:	417a147b 	.word	0x417a147b
 8001430:	41fa147b 	.word	0x41fa147b
 8001434:	427a147b 	.word	0x427a147b
 8001438:	433b947b 	.word	0x433b947b

0800143c <LSM303AGR_ACC_GetAxes>:
{
 800143c:	b530      	push	{r4, r5, lr}
 800143e:	b085      	sub	sp, #20
 8001440:	460c      	mov	r4, r1
  float sensitivity = 0.0f;
 8001442:	2300      	movs	r3, #0
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8001444:	a902      	add	r1, sp, #8
{
 8001446:	4605      	mov	r5, r0
  float sensitivity = 0.0f;
 8001448:	9301      	str	r3, [sp, #4]
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 800144a:	f7ff fdab 	bl	8000fa4 <LSM303AGR_ACC_GetAxesRaw>
 800144e:	b118      	cbz	r0, 8001458 <LSM303AGR_ACC_GetAxes+0x1c>
    return LSM303AGR_ERROR;
 8001450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001454:	b005      	add	sp, #20
 8001456:	bd30      	pop	{r4, r5, pc}
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8001458:	a901      	add	r1, sp, #4
 800145a:	4628      	mov	r0, r5
 800145c:	f7ff ff82 	bl	8001364 <LSM303AGR_ACC_GetSensitivity>
 8001460:	2800      	cmp	r0, #0
 8001462:	d1f5      	bne.n	8001450 <LSM303AGR_ACC_GetAxes+0x14>
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8001464:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8001468:	eddd 6a01 	vldr	s13, [sp, #4]
 800146c:	ee07 3a10 	vmov	s14, r3
 8001470:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8001474:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8001478:	ee27 7a26 	vmul.f32	s14, s14, s13
 800147c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8001480:	ed84 7a00 	vstr	s14, [r4]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8001484:	ee07 3a10 	vmov	s14, r3
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8001488:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800148c:	ee07 3a90 	vmov	s15, r3
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8001490:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8001494:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8001498:	ee27 7a26 	vmul.f32	s14, s14, s13
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 800149c:	ee67 7aa6 	vmul.f32	s15, s15, s13
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 80014a0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 80014a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 80014a8:	ed84 7a01 	vstr	s14, [r4, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 80014ac:	edc4 7a02 	vstr	s15, [r4, #8]
  return LSM303AGR_OK;
 80014b0:	e7d0      	b.n	8001454 <LSM303AGR_ACC_GetAxes+0x18>

080014b2 <LSM303AGR_MAG_Enable>:
{
 80014b2:	b510      	push	{r4, lr}
  if (pObj->mag_is_enabled == 1U)
 80014b4:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80014b8:	2b01      	cmp	r3, #1
{
 80014ba:	4604      	mov	r4, r0
  if (pObj->mag_is_enabled == 1U)
 80014bc:	d008      	beq.n	80014d0 <LSM303AGR_MAG_Enable+0x1e>
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 80014be:	2100      	movs	r1, #0
 80014c0:	301c      	adds	r0, #28
 80014c2:	f000 f92a 	bl	800171a <lsm303agr_mag_operating_mode_set>
 80014c6:	b928      	cbnz	r0, 80014d4 <LSM303AGR_MAG_Enable+0x22>
  pObj->mag_is_enabled = 1;
 80014c8:	2301      	movs	r3, #1
 80014ca:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 80014ce:	bd10      	pop	{r4, pc}
    return LSM303AGR_OK;
 80014d0:	2000      	movs	r0, #0
 80014d2:	bd10      	pop	{r4, pc}
    return LSM303AGR_ERROR;
 80014d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80014d8:	bd10      	pop	{r4, pc}

080014da <LSM303AGR_MAG_Disable>:
{
 80014da:	b510      	push	{r4, lr}
 80014dc:	4604      	mov	r4, r0
  if (pObj->mag_is_enabled == 0U)
 80014de:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 80014e2:	b150      	cbz	r0, 80014fa <LSM303AGR_MAG_Disable+0x20>
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 80014e4:	2102      	movs	r1, #2
 80014e6:	f104 001c 	add.w	r0, r4, #28
 80014ea:	f000 f916 	bl	800171a <lsm303agr_mag_operating_mode_set>
 80014ee:	b910      	cbnz	r0, 80014f6 <LSM303AGR_MAG_Disable+0x1c>
  pObj->mag_is_enabled = 0;
 80014f0:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 80014f4:	bd10      	pop	{r4, pc}
    return LSM303AGR_ERROR;
 80014f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80014fa:	bd10      	pop	{r4, pc}

080014fc <LSM303AGR_MAG_DeInit>:
{
 80014fc:	b510      	push	{r4, lr}
 80014fe:	4604      	mov	r4, r0
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 8001500:	f7ff ffeb 	bl	80014da <LSM303AGR_MAG_Disable>
 8001504:	b910      	cbnz	r0, 800150c <LSM303AGR_MAG_DeInit+0x10>
  pObj->is_initialized = 0;
 8001506:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
  return LSM303AGR_OK;
 800150a:	bd10      	pop	{r4, pc}
    return LSM303AGR_ERROR;
 800150c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001510:	bd10      	pop	{r4, pc}

08001512 <LSM303AGR_ACC_Write_Reg>:
{
 8001512:	b513      	push	{r0, r1, r4, lr}
 8001514:	ac02      	add	r4, sp, #8
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 8001516:	2301      	movs	r3, #1
{
 8001518:	f804 2d01 	strb.w	r2, [r4, #-1]!
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 800151c:	301c      	adds	r0, #28
 800151e:	4622      	mov	r2, r4
 8001520:	f000 f871 	bl	8001606 <lsm303agr_write_reg>
 8001524:	3000      	adds	r0, #0
 8001526:	bf18      	it	ne
 8001528:	2001      	movne	r0, #1
}
 800152a:	4240      	negs	r0, r0
 800152c:	b002      	add	sp, #8
 800152e:	bd10      	pop	{r4, pc}

08001530 <LSM303AGR_ACC_RegisterBusIO>:
{
 8001530:	b510      	push	{r4, lr}
  if (pObj == NULL)
 8001532:	4604      	mov	r4, r0
 8001534:	b910      	cbnz	r0, 800153c <LSM303AGR_ACC_RegisterBusIO+0xc>
    ret = LSM303AGR_ERROR;
 8001536:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800153a:	bd10      	pop	{r4, pc}
    pObj->IO.DeInit    = pIO->DeInit;
 800153c:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 800153e:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001540:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001542:	688a      	ldr	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8001544:	6003      	str	r3, [r0, #0]
    pObj->IO.BusType   = pIO->BusType;
 8001546:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 8001548:	7b0a      	ldrb	r2, [r1, #12]
 800154a:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800154c:	690a      	ldr	r2, [r1, #16]
 800154e:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001550:	694a      	ldr	r2, [r1, #20]
 8001552:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001554:	698a      	ldr	r2, [r1, #24]
 8001556:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadAccRegWrap;
 8001558:	4a0c      	ldr	r2, [pc, #48]	; (800158c <LSM303AGR_ACC_RegisterBusIO+0x5c>)
 800155a:	6202      	str	r2, [r0, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 800155c:	4a0c      	ldr	r2, [pc, #48]	; (8001590 <LSM303AGR_ACC_RegisterBusIO+0x60>)
 800155e:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.handle    = pObj;
 8001560:	6260      	str	r0, [r4, #36]	; 0x24
    if (pObj->IO.Init == NULL)
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0e7      	beq.n	8001536 <LSM303AGR_ACC_RegisterBusIO+0x6>
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8001566:	4798      	blx	r3
 8001568:	2800      	cmp	r0, #0
 800156a:	d1e4      	bne.n	8001536 <LSM303AGR_ACC_RegisterBusIO+0x6>
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800156c:	68a2      	ldr	r2, [r4, #8]
 800156e:	2a01      	cmp	r2, #1
 8001570:	d10a      	bne.n	8001588 <LSM303AGR_ACC_RegisterBusIO+0x58>
        if (pObj->is_initialized == 0U)
 8001572:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8001576:	b93b      	cbnz	r3, 8001588 <LSM303AGR_ACC_RegisterBusIO+0x58>
          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 8001578:	2123      	movs	r1, #35	; 0x23
 800157a:	4620      	mov	r0, r4
 800157c:	f7ff ffc9 	bl	8001512 <LSM303AGR_ACC_Write_Reg>
 8001580:	3000      	adds	r0, #0
 8001582:	bf18      	it	ne
 8001584:	2001      	movne	r0, #1
 8001586:	4240      	negs	r0, r0
}
 8001588:	bd10      	pop	{r4, pc}
 800158a:	bf00      	nop
 800158c:	0800127d 	.word	0x0800127d
 8001590:	08001299 	.word	0x08001299

08001594 <LSM303AGR_MAG_RegisterBusIO>:
{
 8001594:	b510      	push	{r4, lr}
  if (pObj == NULL)
 8001596:	4604      	mov	r4, r0
 8001598:	b910      	cbnz	r0, 80015a0 <LSM303AGR_MAG_RegisterBusIO+0xc>
    ret = LSM303AGR_ERROR;
 800159a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800159e:	bd10      	pop	{r4, pc}
    pObj->IO.DeInit    = pIO->DeInit;
 80015a0:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 80015a2:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80015a4:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 80015a6:	688a      	ldr	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 80015a8:	6003      	str	r3, [r0, #0]
    pObj->IO.BusType   = pIO->BusType;
 80015aa:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 80015ac:	7b0a      	ldrb	r2, [r1, #12]
 80015ae:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80015b0:	690a      	ldr	r2, [r1, #16]
 80015b2:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80015b4:	694a      	ldr	r2, [r1, #20]
 80015b6:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80015b8:	698a      	ldr	r2, [r1, #24]
 80015ba:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadMagRegWrap;
 80015bc:	4a0c      	ldr	r2, [pc, #48]	; (80015f0 <LSM303AGR_MAG_RegisterBusIO+0x5c>)
 80015be:	6202      	str	r2, [r0, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 80015c0:	4a0c      	ldr	r2, [pc, #48]	; (80015f4 <LSM303AGR_MAG_RegisterBusIO+0x60>)
 80015c2:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.handle    = pObj;
 80015c4:	6260      	str	r0, [r4, #36]	; 0x24
    if (pObj->IO.Init == NULL)
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0e7      	beq.n	800159a <LSM303AGR_MAG_RegisterBusIO+0x6>
    else if (pObj->IO.Init() != LSM303AGR_OK)
 80015ca:	4798      	blx	r3
 80015cc:	2800      	cmp	r0, #0
 80015ce:	d1e4      	bne.n	800159a <LSM303AGR_MAG_RegisterBusIO+0x6>
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 80015d0:	68a3      	ldr	r3, [r4, #8]
 80015d2:	b15b      	cbz	r3, 80015ec <LSM303AGR_MAG_RegisterBusIO+0x58>
        if (pObj->is_initialized == 0U)
 80015d4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80015d8:	b943      	cbnz	r3, 80015ec <LSM303AGR_MAG_RegisterBusIO+0x58>
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 80015da:	2101      	movs	r1, #1
 80015dc:	f104 001c 	add.w	r0, r4, #28
 80015e0:	f000 f926 	bl	8001830 <lsm303agr_mag_i2c_interface_set>
 80015e4:	3000      	adds	r0, #0
 80015e6:	bf18      	it	ne
 80015e8:	2001      	movne	r0, #1
 80015ea:	4240      	negs	r0, r0
}
 80015ec:	bd10      	pop	{r4, pc}
 80015ee:	bf00      	nop
 80015f0:	080012b5 	.word	0x080012b5
 80015f4:	080012d1 	.word	0x080012d1

080015f8 <lsm303agr_read_reg>:
  * @param  uint16_t len: number of consecutive register to read
  *
  */
int32_t lsm303agr_read_reg(lsm303agr_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80015f8:	b410      	push	{r4}
  return ctx->read_reg(ctx->handle, reg, data, len);
 80015fa:	6844      	ldr	r4, [r0, #4]
 80015fc:	6880      	ldr	r0, [r0, #8]
 80015fe:	46a4      	mov	ip, r4
}
 8001600:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->read_reg(ctx->handle, reg, data, len);
 8001604:	4760      	bx	ip

08001606 <lsm303agr_write_reg>:
  * @param  uint16_t len: number of consecutive register to write
  *
*/
int32_t lsm303agr_write_reg(lsm303agr_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 8001606:	b410      	push	{r4}
  return ctx->write_reg(ctx->handle, reg, data, len);
 8001608:	6804      	ldr	r4, [r0, #0]
 800160a:	6880      	ldr	r0, [r0, #8]
 800160c:	46a4      	mov	ip, r4
}
 800160e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->write_reg(ctx->handle, reg, data, len);
 8001612:	4760      	bx	ip

08001614 <lsm303agr_xl_operating_mode_get>:
  *                                  reg CTRL_REG4_AG1_A
  *
  */
int32_t lsm303agr_xl_operating_mode_get(lsm303agr_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8001614:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;
  uint8_t lpen, hr;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A, &reg.byte, 1);
 8001616:	2301      	movs	r3, #1
 8001618:	aa01      	add	r2, sp, #4
{
 800161a:	460d      	mov	r5, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A, &reg.byte, 1);
 800161c:	2120      	movs	r1, #32
{
 800161e:	4607      	mov	r7, r0
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A, &reg.byte, 1);
 8001620:	f7ff ffea 	bl	80015f8 <lsm303agr_read_reg>
  lpen = reg.ctrl_reg1_a.lpen;
 8001624:	f89d 4004 	ldrb.w	r4, [sp, #4]
 8001628:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 800162c:	b2e6      	uxtb	r6, r4
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 800162e:	2301      	movs	r3, #1
 8001630:	aa01      	add	r2, sp, #4
 8001632:	2123      	movs	r1, #35	; 0x23
 8001634:	4638      	mov	r0, r7
 8001636:	f7ff ffdf 	bl	80015f8 <lsm303agr_read_reg>
  hr = reg.ctrl_reg4_a.hr;

  if ( lpen ){
 800163a:	b116      	cbz	r6, 8001642 <lsm303agr_xl_operating_mode_get+0x2e>
    *val = LSM303AGR_LP_8bit;
 800163c:	2302      	movs	r3, #2
  } else if (hr) {
    *val = LSM303AGR_HR_12bit;
  } else{
    *val = LSM303AGR_NM_10bit;
 800163e:	702b      	strb	r3, [r5, #0]
  }

  return mm_error;
 8001640:	e004      	b.n	800164c <lsm303agr_xl_operating_mode_get+0x38>
  hr = reg.ctrl_reg4_a.hr;
 8001642:	f89d 3004 	ldrb.w	r3, [sp, #4]
  } else if (hr) {
 8001646:	071b      	lsls	r3, r3, #28
 8001648:	d502      	bpl.n	8001650 <lsm303agr_xl_operating_mode_get+0x3c>
    *val = LSM303AGR_HR_12bit;
 800164a:	702c      	strb	r4, [r5, #0]
}
 800164c:	b003      	add	sp, #12
 800164e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *val = LSM303AGR_NM_10bit;
 8001650:	2301      	movs	r3, #1
 8001652:	e7f4      	b.n	800163e <lsm303agr_xl_operating_mode_get+0x2a>

08001654 <lsm303agr_xl_data_rate_set>:
  * @param  lsm303agr_odr_a_t: change the values of odr in reg CTRL_REG1_A
  *
  */
int32_t lsm303agr_xl_data_rate_set(lsm303agr_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8001654:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8001656:	2301      	movs	r3, #1
{
 8001658:	460d      	mov	r5, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800165a:	aa01      	add	r2, sp, #4
 800165c:	2120      	movs	r1, #32
{
 800165e:	4604      	mov	r4, r0
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8001660:	f7ff ffca 	bl	80015f8 <lsm303agr_read_reg>
                                &reg.byte, 1);
  reg.ctrl_reg1_a.odr = val;
 8001664:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001668:	f365 1307 	bfi	r3, r5, #4, #4
 800166c:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8001670:	aa01      	add	r2, sp, #4
 8001672:	2301      	movs	r3, #1
 8001674:	2120      	movs	r1, #32
 8001676:	4620      	mov	r0, r4
 8001678:	f7ff ffc5 	bl	8001606 <lsm303agr_write_reg>
                                 &reg.byte, 1);

  return mm_error;
}
 800167c:	b003      	add	sp, #12
 800167e:	bd30      	pop	{r4, r5, pc}

08001680 <lsm303agr_xl_data_rate_get>:
  * @param  lsm303agr_odr_a_t: Get the values of odr in reg CTRL_REG1_A
  *
  */
int32_t lsm303agr_xl_data_rate_get(lsm303agr_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 8001680:	b513      	push	{r0, r1, r4, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A, &reg.byte, 1);
 8001682:	2301      	movs	r3, #1
{
 8001684:	460c      	mov	r4, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A, &reg.byte, 1);
 8001686:	aa01      	add	r2, sp, #4
 8001688:	2120      	movs	r1, #32
 800168a:	f7ff ffb5 	bl	80015f8 <lsm303agr_read_reg>
  *val = (lsm303agr_odr_a_t) reg.ctrl_reg1_a.odr;
 800168e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001692:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001696:	7023      	strb	r3, [r4, #0]

  return mm_error;
}
 8001698:	b002      	add	sp, #8
 800169a:	bd10      	pop	{r4, pc}

0800169c <lsm303agr_xl_full_scale_set>:
  * @param  lsm303agr_fs_a_t: change the values of fs in reg CTRL_REG4_A
  *
  */
int32_t lsm303agr_xl_full_scale_set(lsm303agr_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 800169c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 800169e:	2301      	movs	r3, #1
{
 80016a0:	460d      	mov	r5, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 80016a2:	aa01      	add	r2, sp, #4
 80016a4:	2123      	movs	r1, #35	; 0x23
{
 80016a6:	4604      	mov	r4, r0
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 80016a8:	f7ff ffa6 	bl	80015f8 <lsm303agr_read_reg>
  reg.ctrl_reg4_a.fs = val;
 80016ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80016b0:	f365 1305 	bfi	r3, r5, #4, #2
 80016b4:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 80016b8:	aa01      	add	r2, sp, #4
 80016ba:	2301      	movs	r3, #1
 80016bc:	2123      	movs	r1, #35	; 0x23
 80016be:	4620      	mov	r0, r4
 80016c0:	f7ff ffa1 	bl	8001606 <lsm303agr_write_reg>

  return mm_error;
}
 80016c4:	b003      	add	sp, #12
 80016c6:	bd30      	pop	{r4, r5, pc}

080016c8 <lsm303agr_xl_full_scale_get>:
  * @param  lsm303agr_fs_a_t: Get the values of fs in reg CTRL_REG4_A
  *
  */
int32_t lsm303agr_xl_full_scale_get(lsm303agr_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 80016c8:	b513      	push	{r0, r1, r4, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 80016ca:	2301      	movs	r3, #1
{
 80016cc:	460c      	mov	r4, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 80016ce:	aa01      	add	r2, sp, #4
 80016d0:	2123      	movs	r1, #35	; 0x23
 80016d2:	f7ff ff91 	bl	80015f8 <lsm303agr_read_reg>
  *val = (lsm303agr_fs_a_t) reg.ctrl_reg4_a.fs;
 80016d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80016da:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80016de:	7023      	strb	r3, [r4, #0]

  return mm_error;
}
 80016e0:	b002      	add	sp, #8
 80016e2:	bd10      	pop	{r4, pc}

080016e4 <lsm303agr_xl_block_data_update_set>:
  * @param  uint8_t val: change the values of bdu in reg CTRL_REG4_A
  *
  */
int32_t lsm303agr_xl_block_data_update_set(lsm303agr_ctx_t *ctx,
                                           uint8_t val)
{
 80016e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 80016e6:	2301      	movs	r3, #1
{
 80016e8:	460d      	mov	r5, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 80016ea:	aa01      	add	r2, sp, #4
 80016ec:	2123      	movs	r1, #35	; 0x23
{
 80016ee:	4604      	mov	r4, r0
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 80016f0:	f7ff ff82 	bl	80015f8 <lsm303agr_read_reg>
  reg.ctrl_reg4_a.bdu = val;
 80016f4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80016f8:	f365 13c7 	bfi	r3, r5, #7, #1
 80016fc:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A, &reg.byte, 1);
 8001700:	aa01      	add	r2, sp, #4
 8001702:	2301      	movs	r3, #1
 8001704:	2123      	movs	r1, #35	; 0x23
 8001706:	4620      	mov	r0, r4
 8001708:	f7ff ff7d 	bl	8001606 <lsm303agr_write_reg>

  return mm_error;
}
 800170c:	b003      	add	sp, #12
 800170e:	bd30      	pop	{r4, r5, pc}

08001710 <lsm303agr_acceleration_raw_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t lsm303agr_acceleration_raw_get(lsm303agr_ctx_t *ctx, uint8_t *buff)
{
  return lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8001710:	460a      	mov	r2, r1
 8001712:	2306      	movs	r3, #6
 8001714:	2128      	movs	r1, #40	; 0x28
 8001716:	f7ff bf6f 	b.w	80015f8 <lsm303agr_read_reg>

0800171a <lsm303agr_mag_operating_mode_set>:
  * @param  lsm303agr_md_t: change the values of md in reg CFG_REG_A_M
  *
  */
int32_t lsm303agr_mag_operating_mode_set(lsm303agr_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 800171a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 800171c:	2301      	movs	r3, #1
{
 800171e:	460d      	mov	r5, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 8001720:	aa01      	add	r2, sp, #4
 8001722:	2160      	movs	r1, #96	; 0x60
{
 8001724:	4604      	mov	r4, r0
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 8001726:	f7ff ff67 	bl	80015f8 <lsm303agr_read_reg>
  reg.cfg_reg_a_m.md = val;
 800172a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800172e:	f365 0301 	bfi	r3, r5, #0, #2
 8001732:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 8001736:	aa01      	add	r2, sp, #4
 8001738:	2301      	movs	r3, #1
 800173a:	2160      	movs	r1, #96	; 0x60
 800173c:	4620      	mov	r0, r4
 800173e:	f7ff ff62 	bl	8001606 <lsm303agr_write_reg>

  return mm_error;
}
 8001742:	b003      	add	sp, #12
 8001744:	bd30      	pop	{r4, r5, pc}

08001746 <lsm303agr_mag_data_rate_set>:
  * @param  lsm303agr_mg_odr_m_t: change the values of odr in reg CFG_REG_A_M
  *
  */
int32_t lsm303agr_mag_data_rate_set(lsm303agr_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8001746:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 8001748:	2301      	movs	r3, #1
{
 800174a:	460d      	mov	r5, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 800174c:	aa01      	add	r2, sp, #4
 800174e:	2160      	movs	r1, #96	; 0x60
{
 8001750:	4604      	mov	r4, r0
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 8001752:	f7ff ff51 	bl	80015f8 <lsm303agr_read_reg>
  reg.cfg_reg_a_m.odr = val;
 8001756:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800175a:	f365 0383 	bfi	r3, r5, #2, #2
 800175e:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 8001762:	aa01      	add	r2, sp, #4
 8001764:	2301      	movs	r3, #1
 8001766:	2160      	movs	r1, #96	; 0x60
 8001768:	4620      	mov	r0, r4
 800176a:	f7ff ff4c 	bl	8001606 <lsm303agr_write_reg>

  return mm_error;
}
 800176e:	b003      	add	sp, #12
 8001770:	bd30      	pop	{r4, r5, pc}

08001772 <lsm303agr_mag_data_rate_get>:
  * @param  lsm303agr_mg_odr_m_tv: Get the values of odr in reg CFG_REG_A_M
  *
  */
int32_t lsm303agr_mag_data_rate_get(lsm303agr_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 8001772:	b513      	push	{r0, r1, r4, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 8001774:	2301      	movs	r3, #1
{
 8001776:	460c      	mov	r4, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M, &reg.byte, 1);
 8001778:	aa01      	add	r2, sp, #4
 800177a:	2160      	movs	r1, #96	; 0x60
 800177c:	f7ff ff3c 	bl	80015f8 <lsm303agr_read_reg>
  *val = (lsm303agr_mg_odr_m_t) reg.cfg_reg_a_m.odr;
 8001780:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001784:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001788:	7023      	strb	r3, [r4, #0]

  return mm_error;
}
 800178a:	b002      	add	sp, #8
 800178c:	bd10      	pop	{r4, pc}

0800178e <lsm303agr_mag_block_data_update_set>:
  * @param  uint8_t val: change the values of bdu in reg CFG_REG_C_M
  *
  */
int32_t lsm303agr_mag_block_data_update_set(lsm303agr_ctx_t *ctx,
                                            uint8_t val)
{
 800178e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 8001790:	2301      	movs	r3, #1
{
 8001792:	460d      	mov	r5, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 8001794:	aa01      	add	r2, sp, #4
 8001796:	2162      	movs	r1, #98	; 0x62
{
 8001798:	4604      	mov	r4, r0
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 800179a:	f7ff ff2d 	bl	80015f8 <lsm303agr_read_reg>
  reg.cfg_reg_c_m.bdu = val;
 800179e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80017a2:	f365 1304 	bfi	r3, r5, #4, #1
 80017a6:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 80017aa:	aa01      	add	r2, sp, #4
 80017ac:	2301      	movs	r3, #1
 80017ae:	2162      	movs	r1, #98	; 0x62
 80017b0:	4620      	mov	r0, r4
 80017b2:	f7ff ff28 	bl	8001606 <lsm303agr_write_reg>

  return mm_error;
}
 80017b6:	b003      	add	sp, #12
 80017b8:	bd30      	pop	{r4, r5, pc}

080017ba <lsm303agr_magnetic_raw_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t lsm303agr_magnetic_raw_get(lsm303agr_ctx_t *ctx, uint8_t *buff)
{
  return lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 80017ba:	460a      	mov	r2, r1
 80017bc:	2306      	movs	r3, #6
 80017be:	2168      	movs	r1, #104	; 0x68
 80017c0:	f7ff bf1a 	b.w	80015f8 <lsm303agr_read_reg>

080017c4 <lsm303agr_xl_device_id_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t lsm303agr_xl_device_id_get(lsm303agr_ctx_t *ctx, uint8_t *buff)
{
  return lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 80017c4:	460a      	mov	r2, r1
 80017c6:	2301      	movs	r3, #1
 80017c8:	210f      	movs	r1, #15
 80017ca:	f7ff bf15 	b.w	80015f8 <lsm303agr_read_reg>

080017ce <lsm303agr_mag_device_id_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t lsm303agr_mag_device_id_get(lsm303agr_ctx_t *ctx, uint8_t *buff)
{
  return lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 80017ce:	460a      	mov	r2, r1
 80017d0:	2301      	movs	r3, #1
 80017d2:	214f      	movs	r1, #79	; 0x4f
 80017d4:	f7ff bf10 	b.w	80015f8 <lsm303agr_read_reg>

080017d8 <lsm303agr_mag_self_test_set>:
  * @param  lsm303agr_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t val: change the values of self_test in reg CFG_REG_C_M
  *
  */
int32_t lsm303agr_mag_self_test_set(lsm303agr_ctx_t *ctx, uint8_t val)
{
 80017d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 80017da:	2301      	movs	r3, #1
{
 80017dc:	460d      	mov	r5, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 80017de:	aa01      	add	r2, sp, #4
 80017e0:	2162      	movs	r1, #98	; 0x62
{
 80017e2:	4604      	mov	r4, r0
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 80017e4:	f7ff ff08 	bl	80015f8 <lsm303agr_read_reg>
  reg.cfg_reg_c_m.self_test = val;
 80017e8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80017ec:	f365 0341 	bfi	r3, r5, #1, #1
 80017f0:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 80017f4:	aa01      	add	r2, sp, #4
 80017f6:	2301      	movs	r3, #1
 80017f8:	2162      	movs	r1, #98	; 0x62
 80017fa:	4620      	mov	r0, r4
 80017fc:	f7ff ff03 	bl	8001606 <lsm303agr_write_reg>

  return mm_error;
}
 8001800:	b003      	add	sp, #12
 8001802:	bd30      	pop	{r4, r5, pc}

08001804 <lsm303agr_xl_fifo_mode_set>:
  * @param  lsm303agr_fm_a_t: change the values of fm in reg FIFO_CTRL_REG_A
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(lsm303agr_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8001804:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8001806:	2301      	movs	r3, #1
{
 8001808:	460d      	mov	r5, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 800180a:	aa01      	add	r2, sp, #4
 800180c:	212e      	movs	r1, #46	; 0x2e
{
 800180e:	4604      	mov	r4, r0
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8001810:	f7ff fef2 	bl	80015f8 <lsm303agr_read_reg>
                                &reg.byte, 1);
  reg.fifo_ctrl_reg_a.fm = val;
 8001814:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001818:	f365 1387 	bfi	r3, r5, #6, #2
 800181c:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8001820:	aa01      	add	r2, sp, #4
 8001822:	2301      	movs	r3, #1
 8001824:	212e      	movs	r1, #46	; 0x2e
 8001826:	4620      	mov	r0, r4
 8001828:	f7ff feed 	bl	8001606 <lsm303agr_write_reg>
                                 &reg.byte, 1);

  return mm_error;
}
 800182c:	b003      	add	sp, #12
 800182e:	bd30      	pop	{r4, r5, pc}

08001830 <lsm303agr_mag_i2c_interface_set>:
  *                                reg CFG_REG_C_M
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(lsm303agr_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 8001830:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm303agr_reg_t reg;
  int32_t mm_error;

  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 8001832:	2301      	movs	r3, #1
{
 8001834:	460d      	mov	r5, r1
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 8001836:	aa01      	add	r2, sp, #4
 8001838:	2162      	movs	r1, #98	; 0x62
{
 800183a:	4604      	mov	r4, r0
  mm_error = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 800183c:	f7ff fedc 	bl	80015f8 <lsm303agr_read_reg>
  reg.cfg_reg_c_m.i2c_dis = val;
 8001840:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001844:	f365 1345 	bfi	r3, r5, #5, #1
 8001848:	f88d 3004 	strb.w	r3, [sp, #4]
  mm_error = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M, &reg.byte, 1);
 800184c:	aa01      	add	r2, sp, #4
 800184e:	2301      	movs	r3, #1
 8001850:	2162      	movs	r1, #98	; 0x62
 8001852:	4620      	mov	r0, r4
 8001854:	f7ff fed7 	bl	8001606 <lsm303agr_write_reg>

  return mm_error;
}
 8001858:	b003      	add	sp, #12
 800185a:	bd30      	pop	{r4, r5, pc}

0800185c <LSM6DSL_GetCapabilities>:
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800185c:	2301      	movs	r3, #1
 800185e:	700b      	strb	r3, [r1, #0]
  Capabilities->Gyro         = 1;
 8001860:	704b      	strb	r3, [r1, #1]
  Capabilities->Magneto      = 0;
  Capabilities->LowPower     = 0;
  Capabilities->GyroMaxFS    = 2000;
 8001862:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001866:	604b      	str	r3, [r1, #4]
  Capabilities->AccMaxFS     = 16;
 8001868:	2310      	movs	r3, #16
 800186a:	608b      	str	r3, [r1, #8]
  Capabilities->MagMaxFS     = 0;
  Capabilities->GyroMaxOdr   = 6660.0f;
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <LSM6DSL_GetCapabilities+0x24>)
 800186e:	610b      	str	r3, [r1, #16]
  Capabilities->Magneto      = 0;
 8001870:	2000      	movs	r0, #0
  Capabilities->AccMaxOdr    = 6660.0f;
 8001872:	614b      	str	r3, [r1, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8001874:	2300      	movs	r3, #0
  Capabilities->Magneto      = 0;
 8001876:	7088      	strb	r0, [r1, #2]
  Capabilities->LowPower     = 0;
 8001878:	70c8      	strb	r0, [r1, #3]
  Capabilities->MagMaxFS     = 0;
 800187a:	60c8      	str	r0, [r1, #12]
  Capabilities->MagMaxOdr    = 0.0f;
 800187c:	618b      	str	r3, [r1, #24]
  return LSM6DSL_OK;
}
 800187e:	4770      	bx	lr
 8001880:	45d02000 	.word	0x45d02000

08001884 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001884:	b410      	push	{r4}
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001886:	6944      	ldr	r4, [r0, #20]
 8001888:	7b00      	ldrb	r0, [r0, #12]
 800188a:	46a4      	mov	ip, r4
}
 800188c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001890:	4760      	bx	ip

08001892 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001892:	b410      	push	{r4}
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001894:	6904      	ldr	r4, [r0, #16]
 8001896:	7b00      	ldrb	r0, [r0, #12]
 8001898:	46a4      	mov	ip, r4
}
 800189a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800189e:	4760      	bx	ip

080018a0 <LSM6DSL_ACC_SetFullScale>:
           : (FullScale <= 4) ? LSM6DSL_4g
 80018a0:	2902      	cmp	r1, #2
{
 80018a2:	b508      	push	{r3, lr}
           : (FullScale <= 4) ? LSM6DSL_4g
 80018a4:	dd0d      	ble.n	80018c2 <LSM6DSL_ACC_SetFullScale+0x22>
 80018a6:	2904      	cmp	r1, #4
 80018a8:	dd0d      	ble.n	80018c6 <LSM6DSL_ACC_SetFullScale+0x26>
 80018aa:	2909      	cmp	r1, #9
 80018ac:	bfb4      	ite	lt
 80018ae:	2103      	movlt	r1, #3
 80018b0:	2101      	movge	r1, #1
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 80018b2:	301c      	adds	r0, #28
 80018b4:	f000 fc5e 	bl	8002174 <lsm6dsl_xl_full_scale_set>
 80018b8:	3000      	adds	r0, #0
 80018ba:	bf18      	it	ne
 80018bc:	2001      	movne	r0, #1
}
 80018be:	4240      	negs	r0, r0
 80018c0:	bd08      	pop	{r3, pc}
           : (FullScale <= 4) ? LSM6DSL_4g
 80018c2:	2100      	movs	r1, #0
 80018c4:	e7f5      	b.n	80018b2 <LSM6DSL_ACC_SetFullScale+0x12>
 80018c6:	2102      	movs	r1, #2
 80018c8:	e7f3      	b.n	80018b2 <LSM6DSL_ACC_SetFullScale+0x12>

080018ca <LSM6DSL_Init>:
{
 80018ca:	b570      	push	{r4, r5, r6, lr}
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80018cc:	f100 041c 	add.w	r4, r0, #28
{
 80018d0:	4605      	mov	r5, r0
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80018d2:	2101      	movs	r1, #1
 80018d4:	4620      	mov	r0, r4
 80018d6:	f000 fd6b 	bl	80023b0 <lsm6dsl_auto_increment_set>
 80018da:	b110      	cbz	r0, 80018e2 <LSM6DSL_Init+0x18>
    return LSM6DSL_ERROR;
 80018dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018e0:	bd70      	pop	{r4, r5, r6, pc}
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80018e2:	2101      	movs	r1, #1
 80018e4:	4620      	mov	r0, r4
 80018e6:	f000 fd3d 	bl	8002364 <lsm6dsl_block_data_update_set>
 80018ea:	4601      	mov	r1, r0
 80018ec:	2800      	cmp	r0, #0
 80018ee:	d1f5      	bne.n	80018dc <LSM6DSL_Init+0x12>
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 80018f0:	4620      	mov	r0, r4
 80018f2:	f000 fd74 	bl	80023de <lsm6dsl_fifo_mode_set>
 80018f6:	4601      	mov	r1, r0
 80018f8:	2800      	cmp	r0, #0
 80018fa:	d1ef      	bne.n	80018dc <LSM6DSL_Init+0x12>
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 80018fc:	2604      	movs	r6, #4
 80018fe:	f885 602b 	strb.w	r6, [r5, #43]	; 0x2b
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8001902:	4620      	mov	r0, r4
 8001904:	f000 fc6a 	bl	80021dc <lsm6dsl_xl_data_rate_set>
 8001908:	4601      	mov	r1, r0
 800190a:	2800      	cmp	r0, #0
 800190c:	d1e6      	bne.n	80018dc <LSM6DSL_Init+0x12>
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 800190e:	4620      	mov	r0, r4
 8001910:	f000 fc30 	bl	8002174 <lsm6dsl_xl_full_scale_set>
 8001914:	4601      	mov	r1, r0
 8001916:	2800      	cmp	r0, #0
 8001918:	d1e0      	bne.n	80018dc <LSM6DSL_Init+0x12>
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 800191a:	f885 602c 	strb.w	r6, [r5, #44]	; 0x2c
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 800191e:	4620      	mov	r0, r4
 8001920:	f000 fcdb 	bl	80022da <lsm6dsl_gy_data_rate_set>
 8001924:	2800      	cmp	r0, #0
 8001926:	d1d9      	bne.n	80018dc <LSM6DSL_Init+0x12>
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8001928:	2106      	movs	r1, #6
 800192a:	4620      	mov	r0, r4
 800192c:	f000 fc9d 	bl	800226a <lsm6dsl_gy_full_scale_set>
 8001930:	2800      	cmp	r0, #0
 8001932:	d1d3      	bne.n	80018dc <LSM6DSL_Init+0x12>
  pObj->is_initialized = 1;
 8001934:	2301      	movs	r3, #1
 8001936:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
}
 800193a:	bd70      	pop	{r4, r5, r6, pc}

0800193c <LSM6DSL_GYRO_SetFullScale>:
           : (FullScale <= 250)  ? LSM6DSL_250dps
 800193c:	297d      	cmp	r1, #125	; 0x7d
{
 800193e:	b508      	push	{r3, lr}
           : (FullScale <= 250)  ? LSM6DSL_250dps
 8001940:	dd11      	ble.n	8001966 <LSM6DSL_GYRO_SetFullScale+0x2a>
 8001942:	29fa      	cmp	r1, #250	; 0xfa
 8001944:	dd11      	ble.n	800196a <LSM6DSL_GYRO_SetFullScale+0x2e>
 8001946:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
 800194a:	dd10      	ble.n	800196e <LSM6DSL_GYRO_SetFullScale+0x32>
 800194c:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8001950:	bfd4      	ite	le
 8001952:	2104      	movle	r1, #4
 8001954:	2106      	movgt	r1, #6
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8001956:	301c      	adds	r0, #28
 8001958:	f000 fc87 	bl	800226a <lsm6dsl_gy_full_scale_set>
 800195c:	3000      	adds	r0, #0
 800195e:	bf18      	it	ne
 8001960:	2001      	movne	r0, #1
}
 8001962:	4240      	negs	r0, r0
 8001964:	bd08      	pop	{r3, pc}
           : (FullScale <= 250)  ? LSM6DSL_250dps
 8001966:	2101      	movs	r1, #1
 8001968:	e7f5      	b.n	8001956 <LSM6DSL_GYRO_SetFullScale+0x1a>
 800196a:	2100      	movs	r1, #0
 800196c:	e7f3      	b.n	8001956 <LSM6DSL_GYRO_SetFullScale+0x1a>
 800196e:	2102      	movs	r1, #2
 8001970:	e7f1      	b.n	8001956 <LSM6DSL_GYRO_SetFullScale+0x1a>

08001972 <LSM6DSL_ReadID>:
{
 8001972:	b508      	push	{r3, lr}
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8001974:	301c      	adds	r0, #28
 8001976:	f000 fd16 	bl	80023a6 <lsm6dsl_device_id_get>
 800197a:	3000      	adds	r0, #0
 800197c:	bf18      	it	ne
 800197e:	2001      	movne	r0, #1
}
 8001980:	4240      	negs	r0, r0
 8001982:	bd08      	pop	{r3, pc}

08001984 <LSM6DSL_ACC_GetOutputDataRate>:
{
 8001984:	b513      	push	{r0, r1, r4, lr}
 8001986:	460c      	mov	r4, r1
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8001988:	301c      	adds	r0, #28
 800198a:	f10d 0107 	add.w	r1, sp, #7
 800198e:	f000 fc3c 	bl	800220a <lsm6dsl_xl_data_rate_get>
 8001992:	bb28      	cbnz	r0, 80019e0 <LSM6DSL_ACC_GetOutputDataRate+0x5c>
  switch (odr_low_level)
 8001994:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001998:	2b0b      	cmp	r3, #11
 800199a:	d821      	bhi.n	80019e0 <LSM6DSL_ACC_GetOutputDataRate+0x5c>
 800199c:	e8df f003 	tbb	[pc, r3]
 80019a0:	100e0c06 	.word	0x100e0c06
 80019a4:	18161412 	.word	0x18161412
 80019a8:	0a1e1c1a 	.word	0x0a1e1c1a
      *Odr = 0.0f;
 80019ac:	2300      	movs	r3, #0
      *Odr = 6660.0f;
 80019ae:	6023      	str	r3, [r4, #0]
}
 80019b0:	b002      	add	sp, #8
 80019b2:	bd10      	pop	{r4, pc}
      *Odr = 1.6f;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <LSM6DSL_ACC_GetOutputDataRate+0x64>)
 80019b6:	e7fa      	b.n	80019ae <LSM6DSL_ACC_GetOutputDataRate+0x2a>
      *Odr = 12.5f;
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <LSM6DSL_ACC_GetOutputDataRate+0x68>)
 80019ba:	e7f8      	b.n	80019ae <LSM6DSL_ACC_GetOutputDataRate+0x2a>
      *Odr = 26.0f;
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <LSM6DSL_ACC_GetOutputDataRate+0x6c>)
 80019be:	e7f6      	b.n	80019ae <LSM6DSL_ACC_GetOutputDataRate+0x2a>
      *Odr = 52.0f;
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <LSM6DSL_ACC_GetOutputDataRate+0x70>)
 80019c2:	e7f4      	b.n	80019ae <LSM6DSL_ACC_GetOutputDataRate+0x2a>
      *Odr = 104.0f;
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <LSM6DSL_ACC_GetOutputDataRate+0x74>)
 80019c6:	e7f2      	b.n	80019ae <LSM6DSL_ACC_GetOutputDataRate+0x2a>
      *Odr = 208.0f;
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <LSM6DSL_ACC_GetOutputDataRate+0x78>)
 80019ca:	e7f0      	b.n	80019ae <LSM6DSL_ACC_GetOutputDataRate+0x2a>
      *Odr = 416.0f;
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <LSM6DSL_ACC_GetOutputDataRate+0x7c>)
 80019ce:	e7ee      	b.n	80019ae <LSM6DSL_ACC_GetOutputDataRate+0x2a>
      *Odr = 833.0f;
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <LSM6DSL_ACC_GetOutputDataRate+0x80>)
 80019d2:	e7ec      	b.n	80019ae <LSM6DSL_ACC_GetOutputDataRate+0x2a>
      *Odr = 1660.0f;
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <LSM6DSL_ACC_GetOutputDataRate+0x84>)
 80019d6:	e7ea      	b.n	80019ae <LSM6DSL_ACC_GetOutputDataRate+0x2a>
      *Odr = 3330.0f;
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <LSM6DSL_ACC_GetOutputDataRate+0x88>)
 80019da:	e7e8      	b.n	80019ae <LSM6DSL_ACC_GetOutputDataRate+0x2a>
      *Odr = 6660.0f;
 80019dc:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <LSM6DSL_ACC_GetOutputDataRate+0x8c>)
 80019de:	e7e6      	b.n	80019ae <LSM6DSL_ACC_GetOutputDataRate+0x2a>
      ret = LSM6DSL_ERROR;
 80019e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019e4:	e7e4      	b.n	80019b0 <LSM6DSL_ACC_GetOutputDataRate+0x2c>
 80019e6:	bf00      	nop
 80019e8:	3fcccccd 	.word	0x3fcccccd
 80019ec:	41480000 	.word	0x41480000
 80019f0:	41d00000 	.word	0x41d00000
 80019f4:	42500000 	.word	0x42500000
 80019f8:	42d00000 	.word	0x42d00000
 80019fc:	43500000 	.word	0x43500000
 8001a00:	43d00000 	.word	0x43d00000
 8001a04:	44504000 	.word	0x44504000
 8001a08:	44cf8000 	.word	0x44cf8000
 8001a0c:	45502000 	.word	0x45502000
 8001a10:	45d02000 	.word	0x45d02000

08001a14 <LSM6DSL_ACC_GetSensitivity>:
{
 8001a14:	b513      	push	{r0, r1, r4, lr}
 8001a16:	460c      	mov	r4, r1
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8001a18:	301c      	adds	r0, #28
 8001a1a:	f10d 0107 	add.w	r1, sp, #7
 8001a1e:	f000 fbc0 	bl	80021a2 <lsm6dsl_xl_full_scale_get>
 8001a22:	b988      	cbnz	r0, 8001a48 <LSM6DSL_ACC_GetSensitivity+0x34>
  switch (full_scale)
 8001a24:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d80d      	bhi.n	8001a48 <LSM6DSL_ACC_GetSensitivity+0x34>
 8001a2c:	e8df f003 	tbb	[pc, r3]
 8001a30:	08060a02 	.word	0x08060a02
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <LSM6DSL_ACC_GetSensitivity+0x3c>)
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8001a36:	6023      	str	r3, [r4, #0]
}
 8001a38:	b002      	add	sp, #8
 8001a3a:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <LSM6DSL_ACC_GetSensitivity+0x40>)
 8001a3e:	e7fa      	b.n	8001a36 <LSM6DSL_ACC_GetSensitivity+0x22>
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <LSM6DSL_ACC_GetSensitivity+0x44>)
 8001a42:	e7f8      	b.n	8001a36 <LSM6DSL_ACC_GetSensitivity+0x22>
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <LSM6DSL_ACC_GetSensitivity+0x48>)
 8001a46:	e7f6      	b.n	8001a36 <LSM6DSL_ACC_GetSensitivity+0x22>
      ret = LSM6DSL_ERROR;
 8001a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a4c:	e7f4      	b.n	8001a38 <LSM6DSL_ACC_GetSensitivity+0x24>
 8001a4e:	bf00      	nop
 8001a50:	3d79db23 	.word	0x3d79db23
 8001a54:	3df9db23 	.word	0x3df9db23
 8001a58:	3e79db23 	.word	0x3e79db23
 8001a5c:	3ef9db23 	.word	0x3ef9db23

08001a60 <LSM6DSL_ACC_GetFullScale>:
{
 8001a60:	b513      	push	{r0, r1, r4, lr}
 8001a62:	460c      	mov	r4, r1
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8001a64:	301c      	adds	r0, #28
 8001a66:	f10d 0107 	add.w	r1, sp, #7
 8001a6a:	f000 fb9a 	bl	80021a2 <lsm6dsl_xl_full_scale_get>
 8001a6e:	b988      	cbnz	r0, 8001a94 <LSM6DSL_ACC_GetFullScale+0x34>
  switch (fs_low_level)
 8001a70:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d80d      	bhi.n	8001a94 <LSM6DSL_ACC_GetFullScale+0x34>
 8001a78:	e8df f003 	tbb	[pc, r3]
 8001a7c:	08060a02 	.word	0x08060a02
      *FullScale =  2;
 8001a80:	2302      	movs	r3, #2
      *FullScale = 16;
 8001a82:	6023      	str	r3, [r4, #0]
}
 8001a84:	b002      	add	sp, #8
 8001a86:	bd10      	pop	{r4, pc}
      *FullScale =  4;
 8001a88:	2304      	movs	r3, #4
 8001a8a:	e7fa      	b.n	8001a82 <LSM6DSL_ACC_GetFullScale+0x22>
      *FullScale =  8;
 8001a8c:	2308      	movs	r3, #8
 8001a8e:	e7f8      	b.n	8001a82 <LSM6DSL_ACC_GetFullScale+0x22>
      *FullScale = 16;
 8001a90:	2310      	movs	r3, #16
 8001a92:	e7f6      	b.n	8001a82 <LSM6DSL_ACC_GetFullScale+0x22>
      ret = LSM6DSL_ERROR;
 8001a94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a98:	e7f4      	b.n	8001a84 <LSM6DSL_ACC_GetFullScale+0x24>

08001a9a <LSM6DSL_ACC_GetAxesRaw>:
{
 8001a9a:	b513      	push	{r0, r1, r4, lr}
 8001a9c:	460c      	mov	r4, r1
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8001a9e:	301c      	adds	r0, #28
 8001aa0:	4669      	mov	r1, sp
 8001aa2:	f000 fc7b 	bl	800239c <lsm6dsl_acceleration_raw_get>
 8001aa6:	b950      	cbnz	r0, 8001abe <LSM6DSL_ACC_GetAxesRaw+0x24>
  Value->x = data_raw.i16bit[0];
 8001aa8:	f8bd 3000 	ldrh.w	r3, [sp]
 8001aac:	8023      	strh	r3, [r4, #0]
  Value->y = data_raw.i16bit[1];
 8001aae:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8001ab2:	8063      	strh	r3, [r4, #2]
  Value->z = data_raw.i16bit[2];
 8001ab4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001ab8:	80a3      	strh	r3, [r4, #4]
}
 8001aba:	b002      	add	sp, #8
 8001abc:	bd10      	pop	{r4, pc}
    return LSM6DSL_ERROR;
 8001abe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ac2:	e7fa      	b.n	8001aba <LSM6DSL_ACC_GetAxesRaw+0x20>

08001ac4 <LSM6DSL_ACC_GetAxes>:
{
 8001ac4:	b530      	push	{r4, r5, lr}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	4605      	mov	r5, r0
 8001aca:	460c      	mov	r4, r1
  float sensitivity = 0.0f;
 8001acc:	2300      	movs	r3, #0
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8001ace:	a902      	add	r1, sp, #8
 8001ad0:	301c      	adds	r0, #28
  float sensitivity = 0.0f;
 8001ad2:	9301      	str	r3, [sp, #4]
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8001ad4:	f000 fc62 	bl	800239c <lsm6dsl_acceleration_raw_get>
 8001ad8:	b118      	cbz	r0, 8001ae2 <LSM6DSL_ACC_GetAxes+0x1e>
    return LSM6DSL_ERROR;
 8001ada:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001ade:	b005      	add	sp, #20
 8001ae0:	bd30      	pop	{r4, r5, pc}
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8001ae2:	a901      	add	r1, sp, #4
 8001ae4:	4628      	mov	r0, r5
 8001ae6:	f7ff ff95 	bl	8001a14 <LSM6DSL_ACC_GetSensitivity>
 8001aea:	2800      	cmp	r0, #0
 8001aec:	d1f5      	bne.n	8001ada <LSM6DSL_ACC_GetAxes+0x16>
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8001aee:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8001af2:	eddd 6a01 	vldr	s13, [sp, #4]
 8001af6:	ee07 3a10 	vmov	s14, r3
 8001afa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8001afe:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8001b02:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001b06:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8001b0a:	ed84 7a00 	vstr	s14, [r4]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8001b0e:	ee07 3a10 	vmov	s14, r3
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8001b12:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001b16:	ee07 3a90 	vmov	s15, r3
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8001b1a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8001b1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8001b22:	ee27 7a26 	vmul.f32	s14, s14, s13
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8001b26:	ee67 7aa6 	vmul.f32	s15, s15, s13
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8001b2a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8001b2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8001b32:	ed84 7a01 	vstr	s14, [r4, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8001b36:	edc4 7a02 	vstr	s15, [r4, #8]
  return LSM6DSL_OK;
 8001b3a:	e7d0      	b.n	8001ade <LSM6DSL_ACC_GetAxes+0x1a>

08001b3c <LSM6DSL_GYRO_GetOutputDataRate>:
{
 8001b3c:	b513      	push	{r0, r1, r4, lr}
 8001b3e:	460c      	mov	r4, r1
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8001b40:	301c      	adds	r0, #28
 8001b42:	f10d 0107 	add.w	r1, sp, #7
 8001b46:	f000 fbdf 	bl	8002308 <lsm6dsl_gy_data_rate_get>
 8001b4a:	bb18      	cbnz	r0, 8001b94 <LSM6DSL_GYRO_GetOutputDataRate+0x58>
  switch (odr_low_level)
 8001b4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001b50:	2b0a      	cmp	r3, #10
 8001b52:	d81f      	bhi.n	8001b94 <LSM6DSL_GYRO_GetOutputDataRate+0x58>
 8001b54:	e8df f003 	tbb	[pc, r3]
 8001b58:	0e0c0a06 	.word	0x0e0c0a06
 8001b5c:	16141210 	.word	0x16141210
 8001b60:	1a18      	.short	0x1a18
 8001b62:	1c          	.byte	0x1c
 8001b63:	00          	.byte	0x00
      *Odr = 0.0f;
 8001b64:	2300      	movs	r3, #0
      *Odr =  6660.0f;
 8001b66:	6023      	str	r3, [r4, #0]
}
 8001b68:	b002      	add	sp, #8
 8001b6a:	bd10      	pop	{r4, pc}
      *Odr = 12.5f;
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <LSM6DSL_GYRO_GetOutputDataRate+0x60>)
 8001b6e:	e7fa      	b.n	8001b66 <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
      *Odr = 26.0f;
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <LSM6DSL_GYRO_GetOutputDataRate+0x64>)
 8001b72:	e7f8      	b.n	8001b66 <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
      *Odr = 52.0f;
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <LSM6DSL_GYRO_GetOutputDataRate+0x68>)
 8001b76:	e7f6      	b.n	8001b66 <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
      *Odr = 104.0f;
 8001b78:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <LSM6DSL_GYRO_GetOutputDataRate+0x6c>)
 8001b7a:	e7f4      	b.n	8001b66 <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
      *Odr = 208.0f;
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <LSM6DSL_GYRO_GetOutputDataRate+0x70>)
 8001b7e:	e7f2      	b.n	8001b66 <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
      *Odr = 416.0f;
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <LSM6DSL_GYRO_GetOutputDataRate+0x74>)
 8001b82:	e7f0      	b.n	8001b66 <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
      *Odr = 833.0f;
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <LSM6DSL_GYRO_GetOutputDataRate+0x78>)
 8001b86:	e7ee      	b.n	8001b66 <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
      *Odr =  1660.0f;
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <LSM6DSL_GYRO_GetOutputDataRate+0x7c>)
 8001b8a:	e7ec      	b.n	8001b66 <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
      *Odr =  3330.0f;
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <LSM6DSL_GYRO_GetOutputDataRate+0x80>)
 8001b8e:	e7ea      	b.n	8001b66 <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
      *Odr =  6660.0f;
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <LSM6DSL_GYRO_GetOutputDataRate+0x84>)
 8001b92:	e7e8      	b.n	8001b66 <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
      ret = LSM6DSL_ERROR;
 8001b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b98:	e7e6      	b.n	8001b68 <LSM6DSL_GYRO_GetOutputDataRate+0x2c>
 8001b9a:	bf00      	nop
 8001b9c:	41480000 	.word	0x41480000
 8001ba0:	41d00000 	.word	0x41d00000
 8001ba4:	42500000 	.word	0x42500000
 8001ba8:	42d00000 	.word	0x42d00000
 8001bac:	43500000 	.word	0x43500000
 8001bb0:	43d00000 	.word	0x43d00000
 8001bb4:	44504000 	.word	0x44504000
 8001bb8:	44cf8000 	.word	0x44cf8000
 8001bbc:	45502000 	.word	0x45502000
 8001bc0:	45d02000 	.word	0x45d02000

08001bc4 <LSM6DSL_GYRO_GetSensitivity>:
{
 8001bc4:	b513      	push	{r0, r1, r4, lr}
 8001bc6:	460c      	mov	r4, r1
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8001bc8:	301c      	adds	r0, #28
 8001bca:	f10d 0107 	add.w	r1, sp, #7
 8001bce:	f000 fb63 	bl	8002298 <lsm6dsl_gy_full_scale_get>
 8001bd2:	b9a8      	cbnz	r0, 8001c00 <LSM6DSL_GYRO_GetSensitivity+0x3c>
  switch (full_scale)
 8001bd4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001bd8:	2b06      	cmp	r3, #6
 8001bda:	d811      	bhi.n	8001c00 <LSM6DSL_GYRO_GetSensitivity+0x3c>
 8001bdc:	e8df f003 	tbb	[pc, r3]
 8001be0:	100a0408 	.word	0x100a0408
 8001be4:	100c      	.short	0x100c
 8001be6:	0e          	.byte	0x0e
 8001be7:	00          	.byte	0x00
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 8001be8:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <LSM6DSL_GYRO_GetSensitivity+0x44>)
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 8001bea:	6023      	str	r3, [r4, #0]
}
 8001bec:	b002      	add	sp, #8
 8001bee:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8001bf0:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <LSM6DSL_GYRO_GetSensitivity+0x48>)
 8001bf2:	e7fa      	b.n	8001bea <LSM6DSL_GYRO_GetSensitivity+0x26>
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <LSM6DSL_GYRO_GetSensitivity+0x4c>)
 8001bf6:	e7f8      	b.n	8001bea <LSM6DSL_GYRO_GetSensitivity+0x26>
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <LSM6DSL_GYRO_GetSensitivity+0x50>)
 8001bfa:	e7f6      	b.n	8001bea <LSM6DSL_GYRO_GetSensitivity+0x26>
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <LSM6DSL_GYRO_GetSensitivity+0x54>)
 8001bfe:	e7f4      	b.n	8001bea <LSM6DSL_GYRO_GetSensitivity+0x26>
      ret = LSM6DSL_ERROR;
 8001c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c04:	e7f2      	b.n	8001bec <LSM6DSL_GYRO_GetSensitivity+0x28>
 8001c06:	bf00      	nop
 8001c08:	408c0000 	.word	0x408c0000
 8001c0c:	410c0000 	.word	0x410c0000
 8001c10:	418c0000 	.word	0x418c0000
 8001c14:	420c0000 	.word	0x420c0000
 8001c18:	428c0000 	.word	0x428c0000

08001c1c <LSM6DSL_GYRO_GetFullScale>:
{
 8001c1c:	b513      	push	{r0, r1, r4, lr}
 8001c1e:	460c      	mov	r4, r1
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8001c20:	301c      	adds	r0, #28
 8001c22:	f10d 0107 	add.w	r1, sp, #7
 8001c26:	f000 fb37 	bl	8002298 <lsm6dsl_gy_full_scale_get>
 8001c2a:	b9c0      	cbnz	r0, 8001c5e <LSM6DSL_GYRO_GetFullScale+0x42>
  switch (fs_low_level)
 8001c2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001c30:	2b06      	cmp	r3, #6
 8001c32:	d814      	bhi.n	8001c5e <LSM6DSL_GYRO_GetFullScale+0x42>
 8001c34:	e8df f003 	tbb	[pc, r3]
 8001c38:	130a0408 	.word	0x130a0408
 8001c3c:	130d      	.short	0x130d
 8001c3e:	10          	.byte	0x10
 8001c3f:	00          	.byte	0x00
      *FullScale =  125;
 8001c40:	237d      	movs	r3, #125	; 0x7d
      *FullScale = 2000;
 8001c42:	6023      	str	r3, [r4, #0]
}
 8001c44:	b002      	add	sp, #8
 8001c46:	bd10      	pop	{r4, pc}
      *FullScale =  250;
 8001c48:	23fa      	movs	r3, #250	; 0xfa
 8001c4a:	e7fa      	b.n	8001c42 <LSM6DSL_GYRO_GetFullScale+0x26>
      *FullScale =  500;
 8001c4c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c50:	e7f7      	b.n	8001c42 <LSM6DSL_GYRO_GetFullScale+0x26>
      *FullScale = 1000;
 8001c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c56:	e7f4      	b.n	8001c42 <LSM6DSL_GYRO_GetFullScale+0x26>
      *FullScale = 2000;
 8001c58:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c5c:	e7f1      	b.n	8001c42 <LSM6DSL_GYRO_GetFullScale+0x26>
      ret = LSM6DSL_ERROR;
 8001c5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c62:	e7ef      	b.n	8001c44 <LSM6DSL_GYRO_GetFullScale+0x28>

08001c64 <LSM6DSL_GYRO_GetAxesRaw>:
{
 8001c64:	b513      	push	{r0, r1, r4, lr}
 8001c66:	460c      	mov	r4, r1
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8001c68:	301c      	adds	r0, #28
 8001c6a:	4669      	mov	r1, sp
 8001c6c:	f000 fb91 	bl	8002392 <lsm6dsl_angular_rate_raw_get>
 8001c70:	b950      	cbnz	r0, 8001c88 <LSM6DSL_GYRO_GetAxesRaw+0x24>
  Value->x = data_raw.i16bit[0];
 8001c72:	f8bd 3000 	ldrh.w	r3, [sp]
 8001c76:	8023      	strh	r3, [r4, #0]
  Value->y = data_raw.i16bit[1];
 8001c78:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8001c7c:	8063      	strh	r3, [r4, #2]
  Value->z = data_raw.i16bit[2];
 8001c7e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001c82:	80a3      	strh	r3, [r4, #4]
}
 8001c84:	b002      	add	sp, #8
 8001c86:	bd10      	pop	{r4, pc}
    return LSM6DSL_ERROR;
 8001c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c8c:	e7fa      	b.n	8001c84 <LSM6DSL_GYRO_GetAxesRaw+0x20>

08001c8e <LSM6DSL_GYRO_GetAxes>:
{
 8001c8e:	b530      	push	{r4, r5, lr}
 8001c90:	b085      	sub	sp, #20
 8001c92:	4605      	mov	r5, r0
 8001c94:	460c      	mov	r4, r1
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
 8001c96:	301c      	adds	r0, #28
 8001c98:	a902      	add	r1, sp, #8
 8001c9a:	f000 fb7a 	bl	8002392 <lsm6dsl_angular_rate_raw_get>
 8001c9e:	b118      	cbz	r0, 8001ca8 <LSM6DSL_GYRO_GetAxes+0x1a>
    return LSM6DSL_ERROR;
 8001ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001ca4:	b005      	add	sp, #20
 8001ca6:	bd30      	pop	{r4, r5, pc}
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8001ca8:	a901      	add	r1, sp, #4
 8001caa:	4628      	mov	r0, r5
 8001cac:	f7ff ff8a 	bl	8001bc4 <LSM6DSL_GYRO_GetSensitivity>
 8001cb0:	2800      	cmp	r0, #0
 8001cb2:	d1f5      	bne.n	8001ca0 <LSM6DSL_GYRO_GetAxes+0x12>
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8001cb4:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8001cb8:	eddd 6a01 	vldr	s13, [sp, #4]
 8001cbc:	ee07 3a10 	vmov	s14, r3
 8001cc0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8001cc4:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8001cc8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001ccc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8001cd0:	ed84 7a00 	vstr	s14, [r4]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8001cd4:	ee07 3a10 	vmov	s14, r3
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8001cd8:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001cdc:	ee07 3a90 	vmov	s15, r3
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8001ce0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8001ce4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8001ce8:	ee27 7a26 	vmul.f32	s14, s14, s13
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8001cec:	ee67 7aa6 	vmul.f32	s15, s15, s13
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8001cf0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8001cf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8001cf8:	ed84 7a01 	vstr	s14, [r4, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8001cfc:	edc4 7a02 	vstr	s15, [r4, #8]
  return LSM6DSL_OK;
 8001d00:	e7d0      	b.n	8001ca4 <LSM6DSL_GYRO_GetAxes+0x16>
	...

08001d04 <LSM6DSL_ACC_SetOutputDataRate>:
{
 8001d04:	b508      	push	{r3, lr}
  if (pObj->acc_is_enabled == 1U)
 8001d06:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
 8001d0a:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8001d0e:	2901      	cmp	r1, #1
            : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8001d10:	eeb4 0ae7 	vcmpe.f32	s0, s15
  if (pObj->acc_is_enabled == 1U)
 8001d14:	d152      	bne.n	8001dbc <LSM6DSL_ACC_SetOutputDataRate+0xb8>
            : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8001d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1a:	d939      	bls.n	8001d90 <LSM6DSL_ACC_SetOutputDataRate+0x8c>
 8001d1c:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8001d20:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d28:	d93a      	bls.n	8001da0 <LSM6DSL_ACC_SetOutputDataRate+0x9c>
 8001d2a:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8001e60 <LSM6DSL_ACC_SetOutputDataRate+0x15c>
 8001d2e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d36:	d935      	bls.n	8001da4 <LSM6DSL_ACC_SetOutputDataRate+0xa0>
 8001d38:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8001e64 <LSM6DSL_ACC_SetOutputDataRate+0x160>
 8001d3c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d44:	d930      	bls.n	8001da8 <LSM6DSL_ACC_SetOutputDataRate+0xa4>
 8001d46:	eddf 7a48 	vldr	s15, [pc, #288]	; 8001e68 <LSM6DSL_ACC_SetOutputDataRate+0x164>
 8001d4a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d52:	d92b      	bls.n	8001dac <LSM6DSL_ACC_SetOutputDataRate+0xa8>
 8001d54:	eddf 7a45 	vldr	s15, [pc, #276]	; 8001e6c <LSM6DSL_ACC_SetOutputDataRate+0x168>
 8001d58:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d60:	d926      	bls.n	8001db0 <LSM6DSL_ACC_SetOutputDataRate+0xac>
 8001d62:	eddf 7a43 	vldr	s15, [pc, #268]	; 8001e70 <LSM6DSL_ACC_SetOutputDataRate+0x16c>
 8001d66:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6e:	d921      	bls.n	8001db4 <LSM6DSL_ACC_SetOutputDataRate+0xb0>
 8001d70:	eddf 7a40 	vldr	s15, [pc, #256]	; 8001e74 <LSM6DSL_ACC_SetOutputDataRate+0x170>
 8001d74:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7c:	d91c      	bls.n	8001db8 <LSM6DSL_ACC_SetOutputDataRate+0xb4>
 8001d7e:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8001e78 <LSM6DSL_ACC_SetOutputDataRate+0x174>
 8001d82:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8a:	bf94      	ite	ls
 8001d8c:	2109      	movls	r1, #9
 8001d8e:	210a      	movhi	r1, #10
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8001d90:	301c      	adds	r0, #28
 8001d92:	f000 fa23 	bl	80021dc <lsm6dsl_xl_data_rate_set>
 8001d96:	3000      	adds	r0, #0
 8001d98:	bf18      	it	ne
 8001d9a:	2001      	movne	r0, #1
 8001d9c:	4240      	negs	r0, r0
 8001d9e:	bd08      	pop	{r3, pc}
            : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8001da0:	2102      	movs	r1, #2
 8001da2:	e7f5      	b.n	8001d90 <LSM6DSL_ACC_SetOutputDataRate+0x8c>
 8001da4:	2103      	movs	r1, #3
 8001da6:	e7f3      	b.n	8001d90 <LSM6DSL_ACC_SetOutputDataRate+0x8c>
 8001da8:	2104      	movs	r1, #4
 8001daa:	e7f1      	b.n	8001d90 <LSM6DSL_ACC_SetOutputDataRate+0x8c>
 8001dac:	2105      	movs	r1, #5
 8001dae:	e7ef      	b.n	8001d90 <LSM6DSL_ACC_SetOutputDataRate+0x8c>
 8001db0:	2106      	movs	r1, #6
 8001db2:	e7ed      	b.n	8001d90 <LSM6DSL_ACC_SetOutputDataRate+0x8c>
 8001db4:	2107      	movs	r1, #7
 8001db6:	e7eb      	b.n	8001d90 <LSM6DSL_ACC_SetOutputDataRate+0x8c>
 8001db8:	2108      	movs	r1, #8
 8001dba:	e7e9      	b.n	8001d90 <LSM6DSL_ACC_SetOutputDataRate+0x8c>
                  : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8001dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc0:	d93d      	bls.n	8001e3e <LSM6DSL_ACC_SetOutputDataRate+0x13a>
 8001dc2:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8001dc6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dce:	d938      	bls.n	8001e42 <LSM6DSL_ACC_SetOutputDataRate+0x13e>
 8001dd0:	eddf 7a23 	vldr	s15, [pc, #140]	; 8001e60 <LSM6DSL_ACC_SetOutputDataRate+0x15c>
 8001dd4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ddc:	d933      	bls.n	8001e46 <LSM6DSL_ACC_SetOutputDataRate+0x142>
 8001dde:	eddf 7a21 	vldr	s15, [pc, #132]	; 8001e64 <LSM6DSL_ACC_SetOutputDataRate+0x160>
 8001de2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dea:	d92e      	bls.n	8001e4a <LSM6DSL_ACC_SetOutputDataRate+0x146>
 8001dec:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8001e68 <LSM6DSL_ACC_SetOutputDataRate+0x164>
 8001df0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df8:	d929      	bls.n	8001e4e <LSM6DSL_ACC_SetOutputDataRate+0x14a>
 8001dfa:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8001e6c <LSM6DSL_ACC_SetOutputDataRate+0x168>
 8001dfe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e06:	d924      	bls.n	8001e52 <LSM6DSL_ACC_SetOutputDataRate+0x14e>
 8001e08:	eddf 7a19 	vldr	s15, [pc, #100]	; 8001e70 <LSM6DSL_ACC_SetOutputDataRate+0x16c>
 8001e0c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e14:	d91f      	bls.n	8001e56 <LSM6DSL_ACC_SetOutputDataRate+0x152>
 8001e16:	eddf 7a17 	vldr	s15, [pc, #92]	; 8001e74 <LSM6DSL_ACC_SetOutputDataRate+0x170>
 8001e1a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e22:	d91a      	bls.n	8001e5a <LSM6DSL_ACC_SetOutputDataRate+0x156>
 8001e24:	eddf 7a14 	vldr	s15, [pc, #80]	; 8001e78 <LSM6DSL_ACC_SetOutputDataRate+0x174>
 8001e28:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e30:	bf94      	ite	ls
 8001e32:	2309      	movls	r3, #9
 8001e34:	230a      	movhi	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8001e36:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8001e3a:	2000      	movs	r0, #0
}
 8001e3c:	bd08      	pop	{r3, pc}
                  : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e7f9      	b.n	8001e36 <LSM6DSL_ACC_SetOutputDataRate+0x132>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e7f7      	b.n	8001e36 <LSM6DSL_ACC_SetOutputDataRate+0x132>
 8001e46:	2303      	movs	r3, #3
 8001e48:	e7f5      	b.n	8001e36 <LSM6DSL_ACC_SetOutputDataRate+0x132>
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	e7f3      	b.n	8001e36 <LSM6DSL_ACC_SetOutputDataRate+0x132>
 8001e4e:	2305      	movs	r3, #5
 8001e50:	e7f1      	b.n	8001e36 <LSM6DSL_ACC_SetOutputDataRate+0x132>
 8001e52:	2306      	movs	r3, #6
 8001e54:	e7ef      	b.n	8001e36 <LSM6DSL_ACC_SetOutputDataRate+0x132>
 8001e56:	2307      	movs	r3, #7
 8001e58:	e7ed      	b.n	8001e36 <LSM6DSL_ACC_SetOutputDataRate+0x132>
 8001e5a:	2308      	movs	r3, #8
 8001e5c:	e7eb      	b.n	8001e36 <LSM6DSL_ACC_SetOutputDataRate+0x132>
 8001e5e:	bf00      	nop
 8001e60:	42500000 	.word	0x42500000
 8001e64:	42d00000 	.word	0x42d00000
 8001e68:	43500000 	.word	0x43500000
 8001e6c:	43d00000 	.word	0x43d00000
 8001e70:	44504000 	.word	0x44504000
 8001e74:	44cf8000 	.word	0x44cf8000
 8001e78:	45502000 	.word	0x45502000

08001e7c <LSM6DSL_GYRO_SetOutputDataRate>:
{
 8001e7c:	b508      	push	{r3, lr}
  if (pObj->gyro_is_enabled == 1U)
 8001e7e:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
 8001e82:	eef2 7a09 	vmov.f32	s15, #41	; 0x41480000  12.5
 8001e86:	2901      	cmp	r1, #1
            : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8001e88:	eeb4 0ae7 	vcmpe.f32	s0, s15
  if (pObj->gyro_is_enabled == 1U)
 8001e8c:	d152      	bne.n	8001f34 <LSM6DSL_GYRO_SetOutputDataRate+0xb8>
            : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8001e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e92:	d939      	bls.n	8001f08 <LSM6DSL_GYRO_SetOutputDataRate+0x8c>
 8001e94:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8001e98:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea0:	d93a      	bls.n	8001f18 <LSM6DSL_GYRO_SetOutputDataRate+0x9c>
 8001ea2:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8001fd8 <LSM6DSL_GYRO_SetOutputDataRate+0x15c>
 8001ea6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eae:	d935      	bls.n	8001f1c <LSM6DSL_GYRO_SetOutputDataRate+0xa0>
 8001eb0:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8001fdc <LSM6DSL_GYRO_SetOutputDataRate+0x160>
 8001eb4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ebc:	d930      	bls.n	8001f20 <LSM6DSL_GYRO_SetOutputDataRate+0xa4>
 8001ebe:	eddf 7a48 	vldr	s15, [pc, #288]	; 8001fe0 <LSM6DSL_GYRO_SetOutputDataRate+0x164>
 8001ec2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eca:	d92b      	bls.n	8001f24 <LSM6DSL_GYRO_SetOutputDataRate+0xa8>
 8001ecc:	eddf 7a45 	vldr	s15, [pc, #276]	; 8001fe4 <LSM6DSL_GYRO_SetOutputDataRate+0x168>
 8001ed0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed8:	d926      	bls.n	8001f28 <LSM6DSL_GYRO_SetOutputDataRate+0xac>
 8001eda:	eddf 7a43 	vldr	s15, [pc, #268]	; 8001fe8 <LSM6DSL_GYRO_SetOutputDataRate+0x16c>
 8001ede:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee6:	d921      	bls.n	8001f2c <LSM6DSL_GYRO_SetOutputDataRate+0xb0>
 8001ee8:	eddf 7a40 	vldr	s15, [pc, #256]	; 8001fec <LSM6DSL_GYRO_SetOutputDataRate+0x170>
 8001eec:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef4:	d91c      	bls.n	8001f30 <LSM6DSL_GYRO_SetOutputDataRate+0xb4>
 8001ef6:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8001ff0 <LSM6DSL_GYRO_SetOutputDataRate+0x174>
 8001efa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f02:	bf94      	ite	ls
 8001f04:	2109      	movls	r1, #9
 8001f06:	210a      	movhi	r1, #10
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8001f08:	301c      	adds	r0, #28
 8001f0a:	f000 f9e6 	bl	80022da <lsm6dsl_gy_data_rate_set>
 8001f0e:	3000      	adds	r0, #0
 8001f10:	bf18      	it	ne
 8001f12:	2001      	movne	r0, #1
 8001f14:	4240      	negs	r0, r0
 8001f16:	bd08      	pop	{r3, pc}
            : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8001f18:	2102      	movs	r1, #2
 8001f1a:	e7f5      	b.n	8001f08 <LSM6DSL_GYRO_SetOutputDataRate+0x8c>
 8001f1c:	2103      	movs	r1, #3
 8001f1e:	e7f3      	b.n	8001f08 <LSM6DSL_GYRO_SetOutputDataRate+0x8c>
 8001f20:	2104      	movs	r1, #4
 8001f22:	e7f1      	b.n	8001f08 <LSM6DSL_GYRO_SetOutputDataRate+0x8c>
 8001f24:	2105      	movs	r1, #5
 8001f26:	e7ef      	b.n	8001f08 <LSM6DSL_GYRO_SetOutputDataRate+0x8c>
 8001f28:	2106      	movs	r1, #6
 8001f2a:	e7ed      	b.n	8001f08 <LSM6DSL_GYRO_SetOutputDataRate+0x8c>
 8001f2c:	2107      	movs	r1, #7
 8001f2e:	e7eb      	b.n	8001f08 <LSM6DSL_GYRO_SetOutputDataRate+0x8c>
 8001f30:	2108      	movs	r1, #8
 8001f32:	e7e9      	b.n	8001f08 <LSM6DSL_GYRO_SetOutputDataRate+0x8c>
                   : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8001f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f38:	d93d      	bls.n	8001fb6 <LSM6DSL_GYRO_SetOutputDataRate+0x13a>
 8001f3a:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8001f3e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f46:	d938      	bls.n	8001fba <LSM6DSL_GYRO_SetOutputDataRate+0x13e>
 8001f48:	eddf 7a23 	vldr	s15, [pc, #140]	; 8001fd8 <LSM6DSL_GYRO_SetOutputDataRate+0x15c>
 8001f4c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f54:	d933      	bls.n	8001fbe <LSM6DSL_GYRO_SetOutputDataRate+0x142>
 8001f56:	eddf 7a21 	vldr	s15, [pc, #132]	; 8001fdc <LSM6DSL_GYRO_SetOutputDataRate+0x160>
 8001f5a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f62:	d92e      	bls.n	8001fc2 <LSM6DSL_GYRO_SetOutputDataRate+0x146>
 8001f64:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8001fe0 <LSM6DSL_GYRO_SetOutputDataRate+0x164>
 8001f68:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f70:	d929      	bls.n	8001fc6 <LSM6DSL_GYRO_SetOutputDataRate+0x14a>
 8001f72:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8001fe4 <LSM6DSL_GYRO_SetOutputDataRate+0x168>
 8001f76:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7e:	d924      	bls.n	8001fca <LSM6DSL_GYRO_SetOutputDataRate+0x14e>
 8001f80:	eddf 7a19 	vldr	s15, [pc, #100]	; 8001fe8 <LSM6DSL_GYRO_SetOutputDataRate+0x16c>
 8001f84:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f8c:	d91f      	bls.n	8001fce <LSM6DSL_GYRO_SetOutputDataRate+0x152>
 8001f8e:	eddf 7a17 	vldr	s15, [pc, #92]	; 8001fec <LSM6DSL_GYRO_SetOutputDataRate+0x170>
 8001f92:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f9a:	d91a      	bls.n	8001fd2 <LSM6DSL_GYRO_SetOutputDataRate+0x156>
 8001f9c:	eddf 7a14 	vldr	s15, [pc, #80]	; 8001ff0 <LSM6DSL_GYRO_SetOutputDataRate+0x174>
 8001fa0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa8:	bf94      	ite	ls
 8001faa:	2309      	movls	r3, #9
 8001fac:	230a      	movhi	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8001fae:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8001fb2:	2000      	movs	r0, #0
}
 8001fb4:	bd08      	pop	{r3, pc}
                   : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e7f9      	b.n	8001fae <LSM6DSL_GYRO_SetOutputDataRate+0x132>
 8001fba:	2302      	movs	r3, #2
 8001fbc:	e7f7      	b.n	8001fae <LSM6DSL_GYRO_SetOutputDataRate+0x132>
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e7f5      	b.n	8001fae <LSM6DSL_GYRO_SetOutputDataRate+0x132>
 8001fc2:	2304      	movs	r3, #4
 8001fc4:	e7f3      	b.n	8001fae <LSM6DSL_GYRO_SetOutputDataRate+0x132>
 8001fc6:	2305      	movs	r3, #5
 8001fc8:	e7f1      	b.n	8001fae <LSM6DSL_GYRO_SetOutputDataRate+0x132>
 8001fca:	2306      	movs	r3, #6
 8001fcc:	e7ef      	b.n	8001fae <LSM6DSL_GYRO_SetOutputDataRate+0x132>
 8001fce:	2307      	movs	r3, #7
 8001fd0:	e7ed      	b.n	8001fae <LSM6DSL_GYRO_SetOutputDataRate+0x132>
 8001fd2:	2308      	movs	r3, #8
 8001fd4:	e7eb      	b.n	8001fae <LSM6DSL_GYRO_SetOutputDataRate+0x132>
 8001fd6:	bf00      	nop
 8001fd8:	42500000 	.word	0x42500000
 8001fdc:	42d00000 	.word	0x42d00000
 8001fe0:	43500000 	.word	0x43500000
 8001fe4:	43d00000 	.word	0x43d00000
 8001fe8:	44504000 	.word	0x44504000
 8001fec:	44cf8000 	.word	0x44cf8000
 8001ff0:	45502000 	.word	0x45502000

08001ff4 <LSM6DSL_ACC_Enable>:
{
 8001ff4:	b510      	push	{r4, lr}
  if (pObj->acc_is_enabled == 1U)
 8001ff6:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8001ffa:	2b01      	cmp	r3, #1
{
 8001ffc:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 1U)
 8001ffe:	d009      	beq.n	8002014 <LSM6DSL_ACC_Enable+0x20>
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8002000:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
 8002004:	301c      	adds	r0, #28
 8002006:	f000 f8e9 	bl	80021dc <lsm6dsl_xl_data_rate_set>
 800200a:	b928      	cbnz	r0, 8002018 <LSM6DSL_ACC_Enable+0x24>
  pObj->acc_is_enabled = 1;
 800200c:	2301      	movs	r3, #1
 800200e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 8002012:	bd10      	pop	{r4, pc}
    return LSM6DSL_OK;
 8002014:	2000      	movs	r0, #0
 8002016:	bd10      	pop	{r4, pc}
    return LSM6DSL_ERROR;
 8002018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800201c:	bd10      	pop	{r4, pc}

0800201e <LSM6DSL_GYRO_Enable>:
{
 800201e:	b510      	push	{r4, lr}
  if (pObj->gyro_is_enabled == 1U)
 8002020:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8002024:	2b01      	cmp	r3, #1
{
 8002026:	4604      	mov	r4, r0
  if (pObj->gyro_is_enabled == 1U)
 8002028:	d009      	beq.n	800203e <LSM6DSL_GYRO_Enable+0x20>
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 800202a:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
 800202e:	301c      	adds	r0, #28
 8002030:	f000 f953 	bl	80022da <lsm6dsl_gy_data_rate_set>
 8002034:	b928      	cbnz	r0, 8002042 <LSM6DSL_GYRO_Enable+0x24>
  pObj->gyro_is_enabled = 1;
 8002036:	2301      	movs	r3, #1
 8002038:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
 800203c:	bd10      	pop	{r4, pc}
    return LSM6DSL_OK;
 800203e:	2000      	movs	r0, #0
 8002040:	bd10      	pop	{r4, pc}
    return LSM6DSL_ERROR;
 8002042:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8002046:	bd10      	pop	{r4, pc}

08002048 <LSM6DSL_ACC_Disable>:
{
 8002048:	b538      	push	{r3, r4, r5, lr}
 800204a:	4604      	mov	r4, r0
  if (pObj->acc_is_enabled == 0U)
 800204c:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 8002050:	b190      	cbz	r0, 8002078 <LSM6DSL_ACC_Disable+0x30>
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 8002052:	f104 051c 	add.w	r5, r4, #28
 8002056:	f104 012b 	add.w	r1, r4, #43	; 0x2b
 800205a:	4628      	mov	r0, r5
 800205c:	f000 f8d5 	bl	800220a <lsm6dsl_xl_data_rate_get>
 8002060:	4601      	mov	r1, r0
 8002062:	b110      	cbz	r0, 800206a <LSM6DSL_ACC_Disable+0x22>
    return LSM6DSL_ERROR;
 8002064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002068:	bd38      	pop	{r3, r4, r5, pc}
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 800206a:	4628      	mov	r0, r5
 800206c:	f000 f8b6 	bl	80021dc <lsm6dsl_xl_data_rate_set>
 8002070:	2800      	cmp	r0, #0
 8002072:	d1f7      	bne.n	8002064 <LSM6DSL_ACC_Disable+0x1c>
  pObj->acc_is_enabled = 0;
 8002074:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
}
 8002078:	bd38      	pop	{r3, r4, r5, pc}

0800207a <LSM6DSL_GYRO_Disable>:
{
 800207a:	b538      	push	{r3, r4, r5, lr}
 800207c:	4604      	mov	r4, r0
  if (pObj->gyro_is_enabled == 0U)
 800207e:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 8002082:	b190      	cbz	r0, 80020aa <LSM6DSL_GYRO_Disable+0x30>
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 8002084:	f104 051c 	add.w	r5, r4, #28
 8002088:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 800208c:	4628      	mov	r0, r5
 800208e:	f000 f93b 	bl	8002308 <lsm6dsl_gy_data_rate_get>
 8002092:	4601      	mov	r1, r0
 8002094:	b110      	cbz	r0, 800209c <LSM6DSL_GYRO_Disable+0x22>
    return LSM6DSL_ERROR;
 8002096:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800209a:	bd38      	pop	{r3, r4, r5, pc}
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 800209c:	4628      	mov	r0, r5
 800209e:	f000 f91c 	bl	80022da <lsm6dsl_gy_data_rate_set>
 80020a2:	2800      	cmp	r0, #0
 80020a4:	d1f7      	bne.n	8002096 <LSM6DSL_GYRO_Disable+0x1c>
  pObj->gyro_is_enabled = 0;
 80020a6:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
}
 80020aa:	bd38      	pop	{r3, r4, r5, pc}

080020ac <LSM6DSL_DeInit>:
{
 80020ac:	b510      	push	{r4, lr}
 80020ae:	4604      	mov	r4, r0
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 80020b0:	f7ff ffca 	bl	8002048 <LSM6DSL_ACC_Disable>
 80020b4:	b110      	cbz	r0, 80020bc <LSM6DSL_DeInit+0x10>
    return LSM6DSL_ERROR;
 80020b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020ba:	bd10      	pop	{r4, pc}
  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 80020bc:	4620      	mov	r0, r4
 80020be:	f7ff ffdc 	bl	800207a <LSM6DSL_GYRO_Disable>
 80020c2:	2800      	cmp	r0, #0
 80020c4:	d1f7      	bne.n	80020b6 <LSM6DSL_DeInit+0xa>
  pObj->is_initialized = 0;
 80020c6:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 80020ca:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 80020ce:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
}
 80020d2:	bd10      	pop	{r4, pc}

080020d4 <LSM6DSL_Write_Reg>:
{
 80020d4:	b513      	push	{r0, r1, r4, lr}
 80020d6:	ac02      	add	r4, sp, #8
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 80020d8:	2301      	movs	r3, #1
{
 80020da:	f804 2d01 	strb.w	r2, [r4, #-1]!
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 80020de:	301c      	adds	r0, #28
 80020e0:	4622      	mov	r2, r4
 80020e2:	f000 f840 	bl	8002166 <lsm6dsl_write_reg>
 80020e6:	3000      	adds	r0, #0
 80020e8:	bf18      	it	ne
 80020ea:	2001      	movne	r0, #1
}
 80020ec:	4240      	negs	r0, r0
 80020ee:	b002      	add	sp, #8
 80020f0:	bd10      	pop	{r4, pc}
	...

080020f4 <LSM6DSL_RegisterBusIO>:
{
 80020f4:	b510      	push	{r4, lr}
  if (pObj == NULL)
 80020f6:	4604      	mov	r4, r0
 80020f8:	b910      	cbnz	r0, 8002100 <LSM6DSL_RegisterBusIO+0xc>
    ret = LSM6DSL_ERROR;
 80020fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020fe:	bd10      	pop	{r4, pc}
    pObj->IO.DeInit    = pIO->DeInit;
 8002100:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8002102:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002104:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002106:	688a      	ldr	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8002108:	6003      	str	r3, [r0, #0]
    pObj->IO.BusType   = pIO->BusType;
 800210a:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 800210c:	7b0a      	ldrb	r2, [r1, #12]
 800210e:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002110:	690a      	ldr	r2, [r1, #16]
 8002112:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002114:	694a      	ldr	r2, [r1, #20]
 8002116:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002118:	698a      	ldr	r2, [r1, #24]
 800211a:	6182      	str	r2, [r0, #24]
    pObj->Ctx.read_reg  = ReadRegWrap;
 800211c:	4a0c      	ldr	r2, [pc, #48]	; (8002150 <LSM6DSL_RegisterBusIO+0x5c>)
 800211e:	6202      	str	r2, [r0, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8002120:	4a0c      	ldr	r2, [pc, #48]	; (8002154 <LSM6DSL_RegisterBusIO+0x60>)
 8002122:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.handle   = pObj;
 8002124:	6260      	str	r0, [r4, #36]	; 0x24
    if (pObj->IO.Init == NULL)
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0e7      	beq.n	80020fa <LSM6DSL_RegisterBusIO+0x6>
    else if (pObj->IO.Init() != LSM6DSL_OK)
 800212a:	4798      	blx	r3
 800212c:	2800      	cmp	r0, #0
 800212e:	d1e4      	bne.n	80020fa <LSM6DSL_RegisterBusIO+0x6>
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002130:	68a3      	ldr	r3, [r4, #8]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d10b      	bne.n	800214e <LSM6DSL_RegisterBusIO+0x5a>
        if (pObj->is_initialized == 0U)
 8002136:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800213a:	b943      	cbnz	r3, 800214e <LSM6DSL_RegisterBusIO+0x5a>
          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 800213c:	220c      	movs	r2, #12
 800213e:	2112      	movs	r1, #18
 8002140:	4620      	mov	r0, r4
 8002142:	f7ff ffc7 	bl	80020d4 <LSM6DSL_Write_Reg>
 8002146:	3000      	adds	r0, #0
 8002148:	bf18      	it	ne
 800214a:	2001      	movne	r0, #1
 800214c:	4240      	negs	r0, r0
}
 800214e:	bd10      	pop	{r4, pc}
 8002150:	08001885 	.word	0x08001885
 8002154:	08001893 	.word	0x08001893

08002158 <lsm6dsl_read_reg>:
  * @param  uint16_t len: number of consecutive register to read
  *
  */
int32_t lsm6dsl_read_reg(lsm6dsl_ctx_t *ctx, uint8_t reg, uint8_t *data,
                         uint16_t len)
{
 8002158:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800215a:	6844      	ldr	r4, [r0, #4]
 800215c:	6880      	ldr	r0, [r0, #8]
 800215e:	46a4      	mov	ip, r4
  return ret;
}
 8002160:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002164:	4760      	bx	ip

08002166 <lsm6dsl_write_reg>:
  * @param  uint16_t len: number of consecutive register to write
  *
*/
int32_t lsm6dsl_write_reg(lsm6dsl_ctx_t *ctx, uint8_t reg, uint8_t *data,
                          uint16_t len)
{
 8002166:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002168:	6804      	ldr	r4, [r0, #0]
 800216a:	6880      	ldr	r0, [r0, #8]
 800216c:	46a4      	mov	ip, r4
  return ret;
}
 800216e:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002172:	4760      	bx	ip

08002174 <lsm6dsl_xl_full_scale_set>:
  * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
  * @param  lsm6dsl_fs_xl_t: change the values of fs_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dsl_xl_full_scale_set(lsm6dsl_ctx_t *ctx, lsm6dsl_fs_xl_t val)
{
 8002174:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm6dsl_reg_t reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
 8002176:	2301      	movs	r3, #1
{
 8002178:	460d      	mov	r5, r1
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
 800217a:	aa01      	add	r2, sp, #4
 800217c:	2110      	movs	r1, #16
{
 800217e:	4604      	mov	r4, r0
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
 8002180:	f7ff ffea 	bl	8002158 <lsm6dsl_read_reg>
  if (ret == 0)
 8002184:	b958      	cbnz	r0, 800219e <lsm6dsl_xl_full_scale_set+0x2a>
  {
    reg.ctrl1_xl.fs_xl = (uint8_t) val;
 8002186:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800218a:	f365 0383 	bfi	r3, r5, #2, #2
 800218e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
 8002192:	aa01      	add	r2, sp, #4
 8002194:	2301      	movs	r3, #1
 8002196:	2110      	movs	r1, #16
 8002198:	4620      	mov	r0, r4
 800219a:	f7ff ffe4 	bl	8002166 <lsm6dsl_write_reg>
  }
  return ret;
}
 800219e:	b003      	add	sp, #12
 80021a0:	bd30      	pop	{r4, r5, pc}

080021a2 <lsm6dsl_xl_full_scale_get>:
  * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
  * @param  lsm6dsl_fs_xl_t: Get the values of fs_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dsl_xl_full_scale_get(lsm6dsl_ctx_t *ctx, lsm6dsl_fs_xl_t *val)
{
 80021a2:	b513      	push	{r0, r1, r4, lr}
  lsm6dsl_reg_t reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
 80021a4:	2301      	movs	r3, #1
{
 80021a6:	460c      	mov	r4, r1
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
 80021a8:	aa01      	add	r2, sp, #4
 80021aa:	2110      	movs	r1, #16
 80021ac:	f7ff ffd4 	bl	8002158 <lsm6dsl_read_reg>
  switch (reg.ctrl1_xl.fs_xl)
 80021b0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80021b4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80021b8:	2b03      	cmp	r3, #3
 80021ba:	d80d      	bhi.n	80021d8 <lsm6dsl_xl_full_scale_get+0x36>
 80021bc:	e8df f003 	tbb	[pc, r3]
 80021c0:	0a080602 	.word	0x0a080602
  {
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 80021c4:	2300      	movs	r3, #0
      break;
    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
      break;
    default:
      *val = LSM6DSL_XL_FS_ND;
 80021c6:	7023      	strb	r3, [r4, #0]
      break;
  }

  return ret;
}
 80021c8:	b002      	add	sp, #8
 80021ca:	bd10      	pop	{r4, pc}
      *val = LSM6DSL_16g;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e7fa      	b.n	80021c6 <lsm6dsl_xl_full_scale_get+0x24>
      *val = LSM6DSL_4g;
 80021d0:	2302      	movs	r3, #2
 80021d2:	e7f8      	b.n	80021c6 <lsm6dsl_xl_full_scale_get+0x24>
      *val = LSM6DSL_8g;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e7f6      	b.n	80021c6 <lsm6dsl_xl_full_scale_get+0x24>
      *val = LSM6DSL_XL_FS_ND;
 80021d8:	2304      	movs	r3, #4
 80021da:	e7f4      	b.n	80021c6 <lsm6dsl_xl_full_scale_get+0x24>

080021dc <lsm6dsl_xl_data_rate_set>:
  * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
  * @param  lsm6dsl_odr_xl_t: change the values of odr_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dsl_xl_data_rate_set(lsm6dsl_ctx_t *ctx, lsm6dsl_odr_xl_t val)
{
 80021dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm6dsl_reg_t reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
 80021de:	2301      	movs	r3, #1
{
 80021e0:	460d      	mov	r5, r1
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
 80021e2:	aa01      	add	r2, sp, #4
 80021e4:	2110      	movs	r1, #16
{
 80021e6:	4604      	mov	r4, r0
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
 80021e8:	f7ff ffb6 	bl	8002158 <lsm6dsl_read_reg>
  if (ret == 0)
 80021ec:	b958      	cbnz	r0, 8002206 <lsm6dsl_xl_data_rate_set+0x2a>
  {
    reg.ctrl1_xl.odr_xl = (uint8_t) val;
 80021ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80021f2:	f365 1307 	bfi	r3, r5, #4, #4
 80021f6:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
 80021fa:	aa01      	add	r2, sp, #4
 80021fc:	2301      	movs	r3, #1
 80021fe:	2110      	movs	r1, #16
 8002200:	4620      	mov	r0, r4
 8002202:	f7ff ffb0 	bl	8002166 <lsm6dsl_write_reg>
  }
  return ret;
}
 8002206:	b003      	add	sp, #12
 8002208:	bd30      	pop	{r4, r5, pc}

0800220a <lsm6dsl_xl_data_rate_get>:
  * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
  * @param  lsm6dsl_odr_xl_t: Get the values of odr_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dsl_xl_data_rate_get(lsm6dsl_ctx_t *ctx, lsm6dsl_odr_xl_t *val)
{
 800220a:	b513      	push	{r0, r1, r4, lr}
  lsm6dsl_reg_t reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
 800220c:	2301      	movs	r3, #1
{
 800220e:	460c      	mov	r4, r1
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, &reg.byte, 1);
 8002210:	aa01      	add	r2, sp, #4
 8002212:	2110      	movs	r1, #16
 8002214:	f7ff ffa0 	bl	8002158 <lsm6dsl_read_reg>
  switch (reg.ctrl1_xl.odr_xl)
 8002218:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800221c:	091b      	lsrs	r3, r3, #4
 800221e:	2b0b      	cmp	r3, #11
 8002220:	d821      	bhi.n	8002266 <lsm6dsl_xl_data_rate_get+0x5c>
 8002222:	e8df f003 	tbb	[pc, r3]
 8002226:	0a06      	.short	0x0a06
 8002228:	12100e0c 	.word	0x12100e0c
 800222c:	1a181614 	.word	0x1a181614
 8002230:	1e1c      	.short	0x1e1c
  {
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 8002232:	2300      	movs	r3, #0
      break;
    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
      break;
    default:
      *val = LSM6DSL_XL_ODR_ND;
 8002234:	7023      	strb	r3, [r4, #0]
      break;
  }

  return ret;
}
 8002236:	b002      	add	sp, #8
 8002238:	bd10      	pop	{r4, pc}
      *val = LSM6DSL_XL_ODR_12Hz5;
 800223a:	2301      	movs	r3, #1
 800223c:	e7fa      	b.n	8002234 <lsm6dsl_xl_data_rate_get+0x2a>
      *val = LSM6DSL_XL_ODR_26Hz;
 800223e:	2302      	movs	r3, #2
 8002240:	e7f8      	b.n	8002234 <lsm6dsl_xl_data_rate_get+0x2a>
      *val = LSM6DSL_XL_ODR_52Hz;
 8002242:	2303      	movs	r3, #3
 8002244:	e7f6      	b.n	8002234 <lsm6dsl_xl_data_rate_get+0x2a>
      *val = LSM6DSL_XL_ODR_104Hz;
 8002246:	2304      	movs	r3, #4
 8002248:	e7f4      	b.n	8002234 <lsm6dsl_xl_data_rate_get+0x2a>
      *val = LSM6DSL_XL_ODR_208Hz;
 800224a:	2305      	movs	r3, #5
 800224c:	e7f2      	b.n	8002234 <lsm6dsl_xl_data_rate_get+0x2a>
      *val = LSM6DSL_XL_ODR_416Hz;
 800224e:	2306      	movs	r3, #6
 8002250:	e7f0      	b.n	8002234 <lsm6dsl_xl_data_rate_get+0x2a>
      *val = LSM6DSL_XL_ODR_833Hz;
 8002252:	2307      	movs	r3, #7
 8002254:	e7ee      	b.n	8002234 <lsm6dsl_xl_data_rate_get+0x2a>
      *val = LSM6DSL_XL_ODR_1k66Hz;
 8002256:	2308      	movs	r3, #8
 8002258:	e7ec      	b.n	8002234 <lsm6dsl_xl_data_rate_get+0x2a>
      *val = LSM6DSL_XL_ODR_3k33Hz;
 800225a:	2309      	movs	r3, #9
 800225c:	e7ea      	b.n	8002234 <lsm6dsl_xl_data_rate_get+0x2a>
      *val = LSM6DSL_XL_ODR_6k66Hz;
 800225e:	230a      	movs	r3, #10
 8002260:	e7e8      	b.n	8002234 <lsm6dsl_xl_data_rate_get+0x2a>
      *val = LSM6DSL_XL_ODR_1Hz6;
 8002262:	230b      	movs	r3, #11
 8002264:	e7e6      	b.n	8002234 <lsm6dsl_xl_data_rate_get+0x2a>
      *val = LSM6DSL_XL_ODR_ND;
 8002266:	230c      	movs	r3, #12
 8002268:	e7e4      	b.n	8002234 <lsm6dsl_xl_data_rate_get+0x2a>

0800226a <lsm6dsl_gy_full_scale_set>:
  * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
  * @param  lsm6dsl_fs_g_t: change the values of fs_g in reg CTRL2_G
  *
  */
int32_t lsm6dsl_gy_full_scale_set(lsm6dsl_ctx_t *ctx, lsm6dsl_fs_g_t val)
{
 800226a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm6dsl_reg_t reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
 800226c:	2301      	movs	r3, #1
{
 800226e:	460d      	mov	r5, r1
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
 8002270:	aa01      	add	r2, sp, #4
 8002272:	2111      	movs	r1, #17
{
 8002274:	4604      	mov	r4, r0
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
 8002276:	f7ff ff6f 	bl	8002158 <lsm6dsl_read_reg>
  if (ret == 0)
 800227a:	b958      	cbnz	r0, 8002294 <lsm6dsl_gy_full_scale_set+0x2a>
  {
    reg.ctrl2_g.fs_g = (uint8_t) val;
 800227c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002280:	f365 0343 	bfi	r3, r5, #1, #3
 8002284:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
 8002288:	aa01      	add	r2, sp, #4
 800228a:	2301      	movs	r3, #1
 800228c:	2111      	movs	r1, #17
 800228e:	4620      	mov	r0, r4
 8002290:	f7ff ff69 	bl	8002166 <lsm6dsl_write_reg>
  }
  return ret;
}
 8002294:	b003      	add	sp, #12
 8002296:	bd30      	pop	{r4, r5, pc}

08002298 <lsm6dsl_gy_full_scale_get>:
  * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
  * @param  lsm6dsl_fs_g_t: Get the values of fs_g in reg CTRL2_G
  *
  */
int32_t lsm6dsl_gy_full_scale_get(lsm6dsl_ctx_t *ctx, lsm6dsl_fs_g_t *val)
{
 8002298:	b513      	push	{r0, r1, r4, lr}
  lsm6dsl_reg_t reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
 800229a:	2301      	movs	r3, #1
{
 800229c:	460c      	mov	r4, r1
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
 800229e:	aa01      	add	r2, sp, #4
 80022a0:	2111      	movs	r1, #17
 80022a2:	f7ff ff59 	bl	8002158 <lsm6dsl_read_reg>
  switch (reg.ctrl2_g.fs_g)
 80022a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80022aa:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80022ae:	2b06      	cmp	r3, #6
 80022b0:	d811      	bhi.n	80022d6 <lsm6dsl_gy_full_scale_get+0x3e>
 80022b2:	e8df f003 	tbb	[pc, r3]
 80022b6:	0804      	.short	0x0804
 80022b8:	100c100a 	.word	0x100c100a
 80022bc:	0e          	.byte	0x0e
 80022bd:	00          	.byte	0x00
  {
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 80022be:	2300      	movs	r3, #0
      break;
    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
      break;
    default:
      *val = LSM6DSL_GY_FS_ND;
 80022c0:	7023      	strb	r3, [r4, #0]
      break;
  }

  return ret;
}
 80022c2:	b002      	add	sp, #8
 80022c4:	bd10      	pop	{r4, pc}
      *val = LSM6DSL_125dps;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e7fa      	b.n	80022c0 <lsm6dsl_gy_full_scale_get+0x28>
      *val = LSM6DSL_500dps;
 80022ca:	2302      	movs	r3, #2
 80022cc:	e7f8      	b.n	80022c0 <lsm6dsl_gy_full_scale_get+0x28>
      *val = LSM6DSL_1000dps;
 80022ce:	2304      	movs	r3, #4
 80022d0:	e7f6      	b.n	80022c0 <lsm6dsl_gy_full_scale_get+0x28>
      *val = LSM6DSL_2000dps;
 80022d2:	2306      	movs	r3, #6
 80022d4:	e7f4      	b.n	80022c0 <lsm6dsl_gy_full_scale_get+0x28>
      *val = LSM6DSL_GY_FS_ND;
 80022d6:	2307      	movs	r3, #7
 80022d8:	e7f2      	b.n	80022c0 <lsm6dsl_gy_full_scale_get+0x28>

080022da <lsm6dsl_gy_data_rate_set>:
  * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
  * @param  lsm6dsl_odr_g_t: change the values of odr_g in reg CTRL2_G
  *
  */
int32_t lsm6dsl_gy_data_rate_set(lsm6dsl_ctx_t *ctx, lsm6dsl_odr_g_t val)
{
 80022da:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm6dsl_reg_t reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
 80022dc:	2301      	movs	r3, #1
{
 80022de:	460d      	mov	r5, r1
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
 80022e0:	aa01      	add	r2, sp, #4
 80022e2:	2111      	movs	r1, #17
{
 80022e4:	4604      	mov	r4, r0
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
 80022e6:	f7ff ff37 	bl	8002158 <lsm6dsl_read_reg>
  if (ret == 0)
 80022ea:	b958      	cbnz	r0, 8002304 <lsm6dsl_gy_data_rate_set+0x2a>
  {
    reg.ctrl2_g.odr_g = (uint8_t) val;
 80022ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80022f0:	f365 1307 	bfi	r3, r5, #4, #4
 80022f4:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
 80022f8:	aa01      	add	r2, sp, #4
 80022fa:	2301      	movs	r3, #1
 80022fc:	2111      	movs	r1, #17
 80022fe:	4620      	mov	r0, r4
 8002300:	f7ff ff31 	bl	8002166 <lsm6dsl_write_reg>
  }
  return ret;
}
 8002304:	b003      	add	sp, #12
 8002306:	bd30      	pop	{r4, r5, pc}

08002308 <lsm6dsl_gy_data_rate_get>:
  * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
  * @param  lsm6dsl_odr_g_t: Get the values of odr_g in reg CTRL2_G
  *
  */
int32_t lsm6dsl_gy_data_rate_get(lsm6dsl_ctx_t *ctx, lsm6dsl_odr_g_t *val)
{
 8002308:	b513      	push	{r0, r1, r4, lr}
  lsm6dsl_reg_t reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
 800230a:	2301      	movs	r3, #1
{
 800230c:	460c      	mov	r4, r1
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, &reg.byte, 1);
 800230e:	aa01      	add	r2, sp, #4
 8002310:	2111      	movs	r1, #17
 8002312:	f7ff ff21 	bl	8002158 <lsm6dsl_read_reg>
  switch (reg.ctrl2_g.odr_g)
 8002316:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800231a:	091b      	lsrs	r3, r3, #4
 800231c:	2b0a      	cmp	r3, #10
 800231e:	d81f      	bhi.n	8002360 <lsm6dsl_gy_data_rate_get+0x58>
 8002320:	e8df f003 	tbb	[pc, r3]
 8002324:	0e0c0a06 	.word	0x0e0c0a06
 8002328:	16141210 	.word	0x16141210
 800232c:	1a18      	.short	0x1a18
 800232e:	1c          	.byte	0x1c
 800232f:	00          	.byte	0x00
  {
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8002330:	2300      	movs	r3, #0
      break;
    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
      break;
    default:
      *val = LSM6DSL_GY_ODR_ND;
 8002332:	7023      	strb	r3, [r4, #0]
      break;
  }

  return ret;
}
 8002334:	b002      	add	sp, #8
 8002336:	bd10      	pop	{r4, pc}
      *val = LSM6DSL_GY_ODR_12Hz5;
 8002338:	2301      	movs	r3, #1
 800233a:	e7fa      	b.n	8002332 <lsm6dsl_gy_data_rate_get+0x2a>
      *val = LSM6DSL_GY_ODR_26Hz;
 800233c:	2302      	movs	r3, #2
 800233e:	e7f8      	b.n	8002332 <lsm6dsl_gy_data_rate_get+0x2a>
      *val = LSM6DSL_GY_ODR_52Hz;
 8002340:	2303      	movs	r3, #3
 8002342:	e7f6      	b.n	8002332 <lsm6dsl_gy_data_rate_get+0x2a>
      *val = LSM6DSL_GY_ODR_104Hz;
 8002344:	2304      	movs	r3, #4
 8002346:	e7f4      	b.n	8002332 <lsm6dsl_gy_data_rate_get+0x2a>
      *val = LSM6DSL_GY_ODR_208Hz;
 8002348:	2305      	movs	r3, #5
 800234a:	e7f2      	b.n	8002332 <lsm6dsl_gy_data_rate_get+0x2a>
      *val = LSM6DSL_GY_ODR_416Hz;
 800234c:	2306      	movs	r3, #6
 800234e:	e7f0      	b.n	8002332 <lsm6dsl_gy_data_rate_get+0x2a>
      *val = LSM6DSL_GY_ODR_833Hz;
 8002350:	2307      	movs	r3, #7
 8002352:	e7ee      	b.n	8002332 <lsm6dsl_gy_data_rate_get+0x2a>
      *val = LSM6DSL_GY_ODR_1k66Hz;
 8002354:	2308      	movs	r3, #8
 8002356:	e7ec      	b.n	8002332 <lsm6dsl_gy_data_rate_get+0x2a>
      *val = LSM6DSL_GY_ODR_3k33Hz;
 8002358:	2309      	movs	r3, #9
 800235a:	e7ea      	b.n	8002332 <lsm6dsl_gy_data_rate_get+0x2a>
      *val = LSM6DSL_GY_ODR_6k66Hz;
 800235c:	230a      	movs	r3, #10
 800235e:	e7e8      	b.n	8002332 <lsm6dsl_gy_data_rate_get+0x2a>
      *val = LSM6DSL_GY_ODR_ND;
 8002360:	230b      	movs	r3, #11
 8002362:	e7e6      	b.n	8002332 <lsm6dsl_gy_data_rate_get+0x2a>

08002364 <lsm6dsl_block_data_update_set>:
  * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t val: change the values of bdu in reg CTRL3_C
  *
  */
int32_t lsm6dsl_block_data_update_set(lsm6dsl_ctx_t *ctx, uint8_t val)
{
 8002364:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm6dsl_reg_t reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, &reg.byte, 1);
 8002366:	2301      	movs	r3, #1
{
 8002368:	460d      	mov	r5, r1
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, &reg.byte, 1);
 800236a:	aa01      	add	r2, sp, #4
 800236c:	2112      	movs	r1, #18
{
 800236e:	4604      	mov	r4, r0
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, &reg.byte, 1);
 8002370:	f7ff fef2 	bl	8002158 <lsm6dsl_read_reg>
  if (ret == 0)
 8002374:	b958      	cbnz	r0, 800238e <lsm6dsl_block_data_update_set+0x2a>
  {
    reg.ctrl3_c.bdu = val;
 8002376:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800237a:	f365 1386 	bfi	r3, r5, #6, #1
 800237e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, &reg.byte, 1);
 8002382:	aa01      	add	r2, sp, #4
 8002384:	2301      	movs	r3, #1
 8002386:	2112      	movs	r1, #18
 8002388:	4620      	mov	r0, r4
 800238a:	f7ff feec 	bl	8002166 <lsm6dsl_write_reg>
  }
  return ret;
}
 800238e:	b003      	add	sp, #12
 8002390:	bd30      	pop	{r4, r5, pc}

08002392 <lsm6dsl_angular_rate_raw_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(lsm6dsl_ctx_t *ctx, uint8_t *buff)
{
  return lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8002392:	460a      	mov	r2, r1
 8002394:	2306      	movs	r3, #6
 8002396:	2122      	movs	r1, #34	; 0x22
 8002398:	f7ff bede 	b.w	8002158 <lsm6dsl_read_reg>

0800239c <lsm6dsl_acceleration_raw_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t lsm6dsl_acceleration_raw_get(lsm6dsl_ctx_t *ctx, uint8_t *buff)
{
  return lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 800239c:	460a      	mov	r2, r1
 800239e:	2306      	movs	r3, #6
 80023a0:	2128      	movs	r1, #40	; 0x28
 80023a2:	f7ff bed9 	b.w	8002158 <lsm6dsl_read_reg>

080023a6 <lsm6dsl_device_id_get>:
  * @param  uint8_t * : buffer that stores data read
  *
  */
int32_t lsm6dsl_device_id_get(lsm6dsl_ctx_t *ctx, uint8_t *buff)
{
  return lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 80023a6:	460a      	mov	r2, r1
 80023a8:	2301      	movs	r3, #1
 80023aa:	210f      	movs	r1, #15
 80023ac:	f7ff bed4 	b.w	8002158 <lsm6dsl_read_reg>

080023b0 <lsm6dsl_auto_increment_set>:
  * @param  lsm6dsl_ctx_t *ctx: read / write interface definitions
  * @param  uint8_t val: change the values of if_inc in reg CTRL3_C
  *
  */
int32_t lsm6dsl_auto_increment_set(lsm6dsl_ctx_t *ctx, uint8_t val)
{
 80023b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm6dsl_reg_t reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, &reg.byte, 1);
 80023b2:	2301      	movs	r3, #1
{
 80023b4:	460d      	mov	r5, r1
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, &reg.byte, 1);
 80023b6:	aa01      	add	r2, sp, #4
 80023b8:	2112      	movs	r1, #18
{
 80023ba:	4604      	mov	r4, r0
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, &reg.byte, 1);
 80023bc:	f7ff fecc 	bl	8002158 <lsm6dsl_read_reg>
  if (ret == 0)
 80023c0:	b958      	cbnz	r0, 80023da <lsm6dsl_auto_increment_set+0x2a>
  {
    reg.ctrl3_c.if_inc = val;
 80023c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80023c6:	f365 0382 	bfi	r3, r5, #2, #1
 80023ca:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, &reg.byte, 1);
 80023ce:	aa01      	add	r2, sp, #4
 80023d0:	2301      	movs	r3, #1
 80023d2:	2112      	movs	r1, #18
 80023d4:	4620      	mov	r0, r4
 80023d6:	f7ff fec6 	bl	8002166 <lsm6dsl_write_reg>
  }
  return ret;
}
 80023da:	b003      	add	sp, #12
 80023dc:	bd30      	pop	{r4, r5, pc}

080023de <lsm6dsl_fifo_mode_set>:
  * @param  lsm6dsl_fifo_mode_t: change the values of fifo_mode in
  *                              reg FIFO_CTRL5
  *
  */
int32_t lsm6dsl_fifo_mode_set(lsm6dsl_ctx_t *ctx, lsm6dsl_fifo_mode_t val)
{
 80023de:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lsm6dsl_reg_t reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, &reg.byte, 1);
 80023e0:	2301      	movs	r3, #1
{
 80023e2:	460d      	mov	r5, r1
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, &reg.byte, 1);
 80023e4:	aa01      	add	r2, sp, #4
 80023e6:	210a      	movs	r1, #10
{
 80023e8:	4604      	mov	r4, r0
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, &reg.byte, 1);
 80023ea:	f7ff feb5 	bl	8002158 <lsm6dsl_read_reg>
  if (ret == 0)
 80023ee:	b958      	cbnz	r0, 8002408 <lsm6dsl_fifo_mode_set+0x2a>
  {
    reg.fifo_ctrl5.fifo_mode = (uint8_t)val;
 80023f0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80023f4:	f365 0302 	bfi	r3, r5, #0, #3
 80023f8:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, &reg.byte, 1);
 80023fc:	aa01      	add	r2, sp, #4
 80023fe:	2301      	movs	r3, #1
 8002400:	210a      	movs	r1, #10
 8002402:	4620      	mov	r0, r4
 8002404:	f7ff feaf 	bl	8002166 <lsm6dsl_write_reg>
  }
  return ret;
}
 8002408:	b003      	add	sp, #12
 800240a:	bd30      	pop	{r4, r5, pc}

0800240c <ST7789H2_GetLcdPixelHeight>:
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
}
 800240c:	20f0      	movs	r0, #240	; 0xf0
 800240e:	4770      	bx	lr

08002410 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002410:	b530      	push	{r4, r5, lr}
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 8002412:	28ef      	cmp	r0, #239	; 0xef
 8002414:	4c11      	ldr	r4, [pc, #68]	; (800245c <ST7789H2_SetDisplayWindow+0x4c>)
  {
    WindowsXstart = Xpos;
  }
  else
  {
    WindowsXstart = 0;
 8002416:	bf8a      	itet	hi
 8002418:	2500      	movhi	r5, #0
    WindowsXstart = Xpos;
 800241a:	8020      	strhls	r0, [r4, #0]
    WindowsXstart = 0;
 800241c:	8025      	strhhi	r5, [r4, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 800241e:	29ef      	cmp	r1, #239	; 0xef
 8002420:	4c0f      	ldr	r4, [pc, #60]	; (8002460 <ST7789H2_SetDisplayWindow+0x50>)
  {
    WindowsYstart = Ypos;
  }
  else
  {
    WindowsYstart = 0;
 8002422:	bf8a      	itet	hi
 8002424:	2500      	movhi	r5, #0
    WindowsYstart = Ypos;
 8002426:	8021      	strhls	r1, [r4, #0]
    WindowsYstart = 0;
 8002428:	8025      	strhhi	r5, [r4, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 800242a:	1814      	adds	r4, r2, r0
 800242c:	2cf0      	cmp	r4, #240	; 0xf0
 800242e:	4c0d      	ldr	r4, [pc, #52]	; (8002464 <ST7789H2_SetDisplayWindow+0x54>)
  {
    WindowsXend = Width  + Xpos - 1;
 8002430:	bfd5      	itete	le
 8002432:	f102 32ff 	addle.w	r2, r2, #4294967295	; 0xffffffff
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 8002436:	22ef      	movgt	r2, #239	; 0xef
    WindowsXend = Width  + Xpos - 1;
 8002438:	1880      	addle	r0, r0, r2
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 800243a:	8022      	strhgt	r2, [r4, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 800243c:	eb03 0201 	add.w	r2, r3, r1
    WindowsXend = Width  + Xpos - 1;
 8002440:	bfd8      	it	le
 8002442:	8020      	strhle	r0, [r4, #0]
  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 8002444:	2af0      	cmp	r2, #240	; 0xf0
  {
    WindowsYend = Height + Ypos - 1;
 8002446:	bfd8      	it	le
 8002448:	f103 33ff 	addle.w	r3, r3, #4294967295	; 0xffffffff
 800244c:	4a06      	ldr	r2, [pc, #24]	; (8002468 <ST7789H2_SetDisplayWindow+0x58>)
 800244e:	bfd5      	itete	le
 8002450:	18c9      	addle	r1, r1, r3
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 8002452:	23ef      	movgt	r3, #239	; 0xef
    WindowsYend = Height + Ypos - 1;
 8002454:	8011      	strhle	r1, [r2, #0]
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 8002456:	8013      	strhgt	r3, [r2, #0]
 8002458:	bd30      	pop	{r4, r5, pc}
 800245a:	bf00      	nop
 800245c:	200001c0 	.word	0x200001c0
 8002460:	200001c2 	.word	0x200001c2
 8002464:	200000f8 	.word	0x200000f8
 8002468:	200000fa 	.word	0x200000fa

0800246c <ST7789H2_GetLcdPixelWidth>:
 800246c:	20f0      	movs	r0, #240	; 0xf0
 800246e:	4770      	bx	lr

08002470 <ST7789H2_WriteReg>:
{
 8002470:	b570      	push	{r4, r5, r6, lr}
 8002472:	460c      	mov	r4, r1
 8002474:	4616      	mov	r6, r2
  LCD_IO_WriteReg(Command);
 8002476:	f000 fb79 	bl	8002b6c <LCD_IO_WriteReg>
 800247a:	3e01      	subs	r6, #1
 800247c:	1e65      	subs	r5, r4, #1
 800247e:	4434      	add	r4, r6
  for (i=0; i<NbParameters; i++)
 8002480:	42a5      	cmp	r5, r4
 8002482:	d100      	bne.n	8002486 <ST7789H2_WriteReg+0x16>
}
 8002484:	bd70      	pop	{r4, r5, r6, pc}
    LCD_IO_WriteData(Parameters[i]);
 8002486:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 800248a:	f000 fb69 	bl	8002b60 <LCD_IO_WriteData>
 800248e:	e7f7      	b.n	8002480 <ST7789H2_WriteReg+0x10>

08002490 <ST7789H2_SetOrientation>:
  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 8002490:	2801      	cmp	r0, #1
{
 8002492:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002494:	4605      	mov	r5, r0
  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 8002496:	d109      	bne.n	80024ac <ST7789H2_SetOrientation+0x1c>
    parameter[0] = 0x00;     
 8002498:	2300      	movs	r3, #0
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 800249a:	2201      	movs	r2, #1
 800249c:	4669      	mov	r1, sp
 800249e:	2036      	movs	r0, #54	; 0x36
    parameter[0] = 0x60;     
 80024a0:	f88d 3000 	strb.w	r3, [sp]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 80024a4:	f7ff ffe4 	bl	8002470 <ST7789H2_WriteReg>
}
 80024a8:	b003      	add	sp, #12
 80024aa:	bd30      	pop	{r4, r5, pc}
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 80024ac:	2802      	cmp	r0, #2
 80024ae:	d11f      	bne.n	80024f0 <ST7789H2_SetOrientation+0x60>
    parameter[2] = 0x01;
 80024b0:	2301      	movs	r3, #1
    parameter[0] = 0x00;
 80024b2:	2400      	movs	r4, #0
    parameter[2] = 0x01;
 80024b4:	f88d 3002 	strb.w	r3, [sp, #2]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 80024b8:	2206      	movs	r2, #6
    parameter[3] = 0xF0;
 80024ba:	23f0      	movs	r3, #240	; 0xf0
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 80024bc:	4669      	mov	r1, sp
 80024be:	2033      	movs	r0, #51	; 0x33
    parameter[3] = 0xF0;
 80024c0:	f88d 3003 	strb.w	r3, [sp, #3]
    parameter[0] = 0x00;
 80024c4:	f88d 4000 	strb.w	r4, [sp]
    parameter[1] = 0x00;
 80024c8:	f88d 4001 	strb.w	r4, [sp, #1]
    parameter[4] = 0x00;
 80024cc:	f88d 4004 	strb.w	r4, [sp, #4]
    parameter[5] = 0x00; 
 80024d0:	f88d 4005 	strb.w	r4, [sp, #5]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 80024d4:	f7ff ffcc 	bl	8002470 <ST7789H2_WriteReg>
    parameter[1] = 0x50;
 80024d8:	2350      	movs	r3, #80	; 0x50
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 80024da:	462a      	mov	r2, r5
 80024dc:	4669      	mov	r1, sp
 80024de:	2037      	movs	r0, #55	; 0x37
    parameter[1] = 0x50;
 80024e0:	f88d 3001 	strb.w	r3, [sp, #1]
    parameter[0] = 0x00;
 80024e4:	f88d 4000 	strb.w	r4, [sp]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 80024e8:	f7ff ffc2 	bl	8002470 <ST7789H2_WriteReg>
    parameter[0] = 0xC0; 
 80024ec:	23c0      	movs	r3, #192	; 0xc0
 80024ee:	e7d4      	b.n	800249a <ST7789H2_SetOrientation+0xa>
    parameter[0] = 0x60;     
 80024f0:	2360      	movs	r3, #96	; 0x60
 80024f2:	e7d2      	b.n	800249a <ST7789H2_SetOrientation+0xa>

080024f4 <ST7789H2_DisplayOn>:
{
 80024f4:	b508      	push	{r3, lr}
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 80024f6:	2200      	movs	r2, #0
 80024f8:	4611      	mov	r1, r2
 80024fa:	2029      	movs	r0, #41	; 0x29
 80024fc:	f7ff ffb8 	bl	8002470 <ST7789H2_WriteReg>
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 8002500:	2200      	movs	r2, #0
 8002502:	4611      	mov	r1, r2
 8002504:	2011      	movs	r0, #17
}
 8002506:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 800250a:	f7ff bfb1 	b.w	8002470 <ST7789H2_WriteReg>

0800250e <ST7789H2_Init>:
{
 800250e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002512:	b085      	sub	sp, #20
  LCD_IO_Init();
 8002514:	f000 fa8c 	bl	8002a30 <LCD_IO_Init>
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8002518:	2200      	movs	r2, #0
 800251a:	4611      	mov	r1, r2
 800251c:	2010      	movs	r0, #16
 800251e:	f7ff ffa7 	bl	8002470 <ST7789H2_WriteReg>
  LCD_IO_Delay(10);  
 8002522:	200a      	movs	r0, #10
 8002524:	f000 fb2d 	bl	8002b82 <LCD_IO_Delay>
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 8002528:	2200      	movs	r2, #0
 800252a:	4611      	mov	r1, r2
 800252c:	2001      	movs	r0, #1
 800252e:	f7ff ff9f 	bl	8002470 <ST7789H2_WriteReg>
  LCD_IO_Delay(200);
 8002532:	20c8      	movs	r0, #200	; 0xc8
 8002534:	f000 fb25 	bl	8002b82 <LCD_IO_Delay>
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 8002538:	2200      	movs	r2, #0
  parameter[0] = 0x00;     
 800253a:	ac04      	add	r4, sp, #16
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 800253c:	4611      	mov	r1, r2
 800253e:	2011      	movs	r0, #17
  parameter[0] = 0x00;     
 8002540:	2500      	movs	r5, #0
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 8002542:	f7ff ff95 	bl	8002470 <ST7789H2_WriteReg>
  LCD_IO_Delay(120); 
 8002546:	2078      	movs	r0, #120	; 0x78
 8002548:	f000 fb1b 	bl	8002b82 <LCD_IO_Delay>
  parameter[0] = 0x00;     
 800254c:	f804 5d10 	strb.w	r5, [r4, #-16]!
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8002550:	2201      	movs	r2, #1
 8002552:	4621      	mov	r1, r4
 8002554:	2036      	movs	r0, #54	; 0x36
 8002556:	f7ff ff8b 	bl	8002470 <ST7789H2_WriteReg>
  parameter[0] = 0x05;     
 800255a:	2605      	movs	r6, #5
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 800255c:	4621      	mov	r1, r4
 800255e:	2201      	movs	r2, #1
 8002560:	203a      	movs	r0, #58	; 0x3a
  parameter[0] = 0x05;     
 8002562:	f88d 6000 	strb.w	r6, [sp]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 8002566:	f7ff ff83 	bl	8002470 <ST7789H2_WriteReg>
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 800256a:	462a      	mov	r2, r5
 800256c:	4629      	mov	r1, r5
 800256e:	2021      	movs	r0, #33	; 0x21
 8002570:	f7ff ff7e 	bl	8002470 <ST7789H2_WriteReg>
  parameter[3] = 0xEF;
 8002574:	27ef      	movs	r7, #239	; 0xef
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8002576:	4621      	mov	r1, r4
 8002578:	2204      	movs	r2, #4
 800257a:	202a      	movs	r0, #42	; 0x2a
  parameter[3] = 0xEF;
 800257c:	f88d 7003 	strb.w	r7, [sp, #3]
  parameter[0] = 0x00;
 8002580:	f88d 5000 	strb.w	r5, [sp]
  parameter[1] = 0x00;
 8002584:	f88d 5001 	strb.w	r5, [sp, #1]
  parameter[2] = 0x00;
 8002588:	f88d 5002 	strb.w	r5, [sp, #2]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 800258c:	f7ff ff70 	bl	8002470 <ST7789H2_WriteReg>
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8002590:	4621      	mov	r1, r4
 8002592:	2204      	movs	r2, #4
 8002594:	202b      	movs	r0, #43	; 0x2b
  parameter[0] = 0x0C;
 8002596:	f04f 090c 	mov.w	r9, #12
  parameter[3] = 0x33;
 800259a:	f04f 0833 	mov.w	r8, #51	; 0x33
  parameter[3] = 0xEF;
 800259e:	f88d 7003 	strb.w	r7, [sp, #3]
  parameter[0] = 0x00;
 80025a2:	f88d 5000 	strb.w	r5, [sp]
  parameter[1] = 0x00;
 80025a6:	f88d 5001 	strb.w	r5, [sp, #1]
  parameter[2] = 0x00;
 80025aa:	f88d 5002 	strb.w	r5, [sp, #2]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 80025ae:	f7ff ff5f 	bl	8002470 <ST7789H2_WriteReg>
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 80025b2:	4632      	mov	r2, r6
 80025b4:	4621      	mov	r1, r4
 80025b6:	20b2      	movs	r0, #178	; 0xb2
  parameter[0] = 0x0C;
 80025b8:	f88d 9000 	strb.w	r9, [sp]
  parameter[1] = 0x0C;
 80025bc:	f88d 9001 	strb.w	r9, [sp, #1]
  parameter[3] = 0x33;
 80025c0:	f88d 8003 	strb.w	r8, [sp, #3]
  parameter[4] = 0x33; 
 80025c4:	f88d 8004 	strb.w	r8, [sp, #4]
  parameter[0] = 0x35; 
 80025c8:	f04f 0a35 	mov.w	sl, #53	; 0x35
  parameter[2] = 0x00;
 80025cc:	f88d 5002 	strb.w	r5, [sp, #2]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 80025d0:	f7ff ff4e 	bl	8002470 <ST7789H2_WriteReg>
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 80025d4:	4621      	mov	r1, r4
 80025d6:	2201      	movs	r2, #1
 80025d8:	20b7      	movs	r0, #183	; 0xb7
  parameter[0] = 0x35; 
 80025da:	f88d a000 	strb.w	sl, [sp]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 80025de:	f7ff ff47 	bl	8002470 <ST7789H2_WriteReg>
  parameter[0] = 0x1F; 
 80025e2:	231f      	movs	r3, #31
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 80025e4:	4621      	mov	r1, r4
 80025e6:	2201      	movs	r2, #1
 80025e8:	20bb      	movs	r0, #187	; 0xbb
  parameter[0] = 0x1F; 
 80025ea:	f88d 3000 	strb.w	r3, [sp]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 80025ee:	f7ff ff3f 	bl	8002470 <ST7789H2_WriteReg>
  parameter[0] = 0x2C; 
 80025f2:	232c      	movs	r3, #44	; 0x2c
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 80025f4:	4621      	mov	r1, r4
 80025f6:	2201      	movs	r2, #1
 80025f8:	20c0      	movs	r0, #192	; 0xc0
  parameter[0] = 0x01;
 80025fa:	2601      	movs	r6, #1
  parameter[0] = 0x2C; 
 80025fc:	f88d 3000 	strb.w	r3, [sp]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 8002600:	f7ff ff36 	bl	8002470 <ST7789H2_WriteReg>
  parameter[1] = 0xC3;
 8002604:	23c3      	movs	r3, #195	; 0xc3
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 8002606:	4621      	mov	r1, r4
 8002608:	2202      	movs	r2, #2
 800260a:	20c2      	movs	r0, #194	; 0xc2
  parameter[1] = 0xC3;
 800260c:	f88d 3001 	strb.w	r3, [sp, #1]
  parameter[0] = 0x01;
 8002610:	f88d 6000 	strb.w	r6, [sp]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 8002614:	f7ff ff2c 	bl	8002470 <ST7789H2_WriteReg>
  parameter[0] = 0x20; 
 8002618:	2320      	movs	r3, #32
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 800261a:	4632      	mov	r2, r6
 800261c:	4621      	mov	r1, r4
 800261e:	20c4      	movs	r0, #196	; 0xc4
  parameter[0] = 0x20; 
 8002620:	f88d 3000 	strb.w	r3, [sp]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 8002624:	f7ff ff24 	bl	8002470 <ST7789H2_WriteReg>
  parameter[0] = 0x0F; 
 8002628:	230f      	movs	r3, #15
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 800262a:	4632      	mov	r2, r6
 800262c:	4621      	mov	r1, r4
 800262e:	20c6      	movs	r0, #198	; 0xc6
  parameter[0] = 0x0F; 
 8002630:	f88d 3000 	strb.w	r3, [sp]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 8002634:	f7ff ff1c 	bl	8002470 <ST7789H2_WriteReg>
  parameter[0] = 0xA4;
 8002638:	23a4      	movs	r3, #164	; 0xa4
 800263a:	f88d 3000 	strb.w	r3, [sp]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 1); 
 800263e:	4632      	mov	r2, r6
  parameter[1] = 0xA1;
 8002640:	23a1      	movs	r3, #161	; 0xa1
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 1); 
 8002642:	4621      	mov	r1, r4
 8002644:	20d0      	movs	r0, #208	; 0xd0
  parameter[1] = 0xA1;
 8002646:	f88d 3001 	strb.w	r3, [sp, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 1); 
 800264a:	f7ff ff11 	bl	8002470 <ST7789H2_WriteReg>
  parameter[2] = 0x11;
 800264e:	2311      	movs	r3, #17
 8002650:	f88d 3002 	strb.w	r3, [sp, #2]
  parameter[5] = 0x15;
 8002654:	2315      	movs	r3, #21
 8002656:	f88d 3005 	strb.w	r3, [sp, #5]
  parameter[8] = 0x50;
 800265a:	2350      	movs	r3, #80	; 0x50
 800265c:	f88d 3008 	strb.w	r3, [sp, #8]
  parameter[9] = 0x36;
 8002660:	2336      	movs	r3, #54	; 0x36
 8002662:	f88d 3009 	strb.w	r3, [sp, #9]
  parameter[10] = 0x13;
 8002666:	2313      	movs	r3, #19
 8002668:	f88d 300a 	strb.w	r3, [sp, #10]
  parameter[12] = 0x29;
 800266c:	2329      	movs	r3, #41	; 0x29
  parameter[1] = 0x08;
 800266e:	2708      	movs	r7, #8
  parameter[0] = 0xD0;
 8002670:	f04f 0bd0 	mov.w	fp, #208	; 0xd0
  parameter[4] = 0x0C;
 8002674:	f88d 9004 	strb.w	r9, [sp, #4]
  parameter[7] = 0x33;
 8002678:	f88d 8007 	strb.w	r8, [sp, #7]
  parameter[6] = 0x39;
 800267c:	f04f 0939 	mov.w	r9, #57	; 0x39
  parameter[11] = 0x14;
 8002680:	f04f 0814 	mov.w	r8, #20
  parameter[12] = 0x29;
 8002684:	f88d 300c 	strb.w	r3, [sp, #12]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 8002688:	4621      	mov	r1, r4
  parameter[13] = 0x2D;
 800268a:	232d      	movs	r3, #45	; 0x2d
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 800268c:	220e      	movs	r2, #14
 800268e:	20e0      	movs	r0, #224	; 0xe0
  parameter[13] = 0x2D;
 8002690:	f88d 300d 	strb.w	r3, [sp, #13]
  parameter[0] = 0xD0;
 8002694:	f88d b000 	strb.w	fp, [sp]
  parameter[1] = 0x08;
 8002698:	f88d 7001 	strb.w	r7, [sp, #1]
  parameter[3] = 0x08;
 800269c:	f88d 7003 	strb.w	r7, [sp, #3]
  parameter[6] = 0x39;
 80026a0:	f88d 9006 	strb.w	r9, [sp, #6]
  parameter[11] = 0x14;
 80026a4:	f88d 800b 	strb.w	r8, [sp, #11]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 80026a8:	f7ff fee2 	bl	8002470 <ST7789H2_WriteReg>
  parameter[2] = 0x10;
 80026ac:	2310      	movs	r3, #16
 80026ae:	f88d 3002 	strb.w	r3, [sp, #2]
  parameter[4] = 0x06;
 80026b2:	2306      	movs	r3, #6
 80026b4:	f88d 3004 	strb.w	r3, [sp, #4]
  parameter[5] = 0x06;
 80026b8:	f88d 3005 	strb.w	r3, [sp, #5]
  parameter[7] = 0x44;
 80026bc:	2344      	movs	r3, #68	; 0x44
 80026be:	f88d 3007 	strb.w	r3, [sp, #7]
  parameter[8] = 0x51;
 80026c2:	2351      	movs	r3, #81	; 0x51
 80026c4:	f88d 3008 	strb.w	r3, [sp, #8]
  parameter[9] = 0x0B;
 80026c8:	230b      	movs	r3, #11
 80026ca:	f88d 3009 	strb.w	r3, [sp, #9]
  parameter[10] = 0x16;
 80026ce:	2316      	movs	r3, #22
 80026d0:	f88d 300a 	strb.w	r3, [sp, #10]
  parameter[12] = 0x2F;
 80026d4:	232f      	movs	r3, #47	; 0x2f
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 80026d6:	4621      	mov	r1, r4
  parameter[12] = 0x2F;
 80026d8:	f88d 300c 	strb.w	r3, [sp, #12]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 80026dc:	220e      	movs	r2, #14
  parameter[13] = 0x31;
 80026de:	2331      	movs	r3, #49	; 0x31
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 80026e0:	20e1      	movs	r0, #225	; 0xe1
  parameter[13] = 0x31;
 80026e2:	f88d 300d 	strb.w	r3, [sp, #13]
  parameter[0] = 0xD0;
 80026e6:	f88d b000 	strb.w	fp, [sp]
  parameter[1] = 0x08;
 80026ea:	f88d 7001 	strb.w	r7, [sp, #1]
  parameter[3] = 0x08;
 80026ee:	f88d 7003 	strb.w	r7, [sp, #3]
  parameter[6] = 0x39;
 80026f2:	f88d 9006 	strb.w	r9, [sp, #6]
  parameter[11] = 0x14;
 80026f6:	f88d 800b 	strb.w	r8, [sp, #11]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 80026fa:	f7ff feb9 	bl	8002470 <ST7789H2_WriteReg>
  ST7789H2_DisplayOn();  
 80026fe:	f7ff fef9 	bl	80024f4 <ST7789H2_DisplayOn>
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 8002702:	4632      	mov	r2, r6
 8002704:	4621      	mov	r1, r4
 8002706:	4650      	mov	r0, sl
  parameter[0] = 0x00;     
 8002708:	f88d 5000 	strb.w	r5, [sp]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 800270c:	f7ff feb0 	bl	8002470 <ST7789H2_WriteReg>
}
 8002710:	b005      	add	sp, #20
 8002712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002716 <ST7789H2_DisplayOff>:
{
 8002716:	b507      	push	{r0, r1, r2, lr}
  parameter[0] = 0xFE;
 8002718:	a902      	add	r1, sp, #8
 800271a:	23fe      	movs	r3, #254	; 0xfe
 800271c:	f801 3d04 	strb.w	r3, [r1, #-4]!
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 8002720:	2201      	movs	r2, #1
 8002722:	20bd      	movs	r0, #189	; 0xbd
 8002724:	f7ff fea4 	bl	8002470 <ST7789H2_WriteReg>
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8002728:	2200      	movs	r2, #0
 800272a:	4611      	mov	r1, r2
 800272c:	2010      	movs	r0, #16
 800272e:	f7ff fe9f 	bl	8002470 <ST7789H2_WriteReg>
  LCD_IO_Delay(10);  
 8002732:	200a      	movs	r0, #10
 8002734:	f000 fa25 	bl	8002b82 <LCD_IO_Delay>
}
 8002738:	b003      	add	sp, #12
 800273a:	f85d fb04 	ldr.w	pc, [sp], #4

0800273e <ST7789H2_SetCursor>:
{
 800273e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  parameter[1] = 0x00 + Xpos;
 8002740:	b2c0      	uxtb	r0, r0
 8002742:	f88d 0005 	strb.w	r0, [sp, #5]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8002746:	2204      	movs	r2, #4
  parameter[3] = 0xEF + Xpos;
 8002748:	3811      	subs	r0, #17
  parameter[0] = 0x00;     
 800274a:	2500      	movs	r5, #0
{
 800274c:	460c      	mov	r4, r1
  parameter[3] = 0xEF + Xpos;
 800274e:	f88d 0007 	strb.w	r0, [sp, #7]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8002752:	eb0d 0102 	add.w	r1, sp, r2
 8002756:	202a      	movs	r0, #42	; 0x2a
  parameter[0] = 0x00;     
 8002758:	f88d 5004 	strb.w	r5, [sp, #4]
  parameter[2] = 0x00;
 800275c:	f88d 5006 	strb.w	r5, [sp, #6]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8002760:	f7ff fe86 	bl	8002470 <ST7789H2_WriteReg>
  parameter[1] = 0x00 + Ypos;
 8002764:	b2e1      	uxtb	r1, r4
 8002766:	f88d 1005 	strb.w	r1, [sp, #5]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 800276a:	2204      	movs	r2, #4
  parameter[3] = 0xEF + Ypos;
 800276c:	3911      	subs	r1, #17
 800276e:	f88d 1007 	strb.w	r1, [sp, #7]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8002772:	202b      	movs	r0, #43	; 0x2b
 8002774:	eb0d 0102 	add.w	r1, sp, r2
  parameter[0] = 0x00;
 8002778:	f88d 5004 	strb.w	r5, [sp, #4]
  parameter[2] = 0x00;
 800277c:	f88d 5006 	strb.w	r5, [sp, #6]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8002780:	f7ff fe76 	bl	8002470 <ST7789H2_WriteReg>
}
 8002784:	b003      	add	sp, #12
 8002786:	bd30      	pop	{r4, r5, pc}

08002788 <ST7789H2_WritePixel>:
{
 8002788:	b510      	push	{r4, lr}
 800278a:	4614      	mov	r4, r2
  ST7789H2_SetCursor(Xpos, Ypos);
 800278c:	f7ff ffd7 	bl	800273e <ST7789H2_SetCursor>
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002790:	2200      	movs	r2, #0
 8002792:	202c      	movs	r0, #44	; 0x2c
 8002794:	4611      	mov	r1, r2
 8002796:	f7ff fe6b 	bl	8002470 <ST7789H2_WriteReg>
  LCD_IO_WriteData(RGBCode);
 800279a:	4620      	mov	r0, r4
}
 800279c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LCD_IO_WriteData(RGBCode);
 80027a0:	f000 b9de 	b.w	8002b60 <LCD_IO_WriteData>

080027a4 <ST7789H2_ReadPixel>:
{
 80027a4:	b538      	push	{r3, r4, r5, lr}
 80027a6:	4604      	mov	r4, r0
 80027a8:	460d      	mov	r5, r1
  ST7789H2_SetCursor(Xpos, Ypos);
 80027aa:	f7ff ffc8 	bl	800273e <ST7789H2_SetCursor>
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80027ae:	4629      	mov	r1, r5
 80027b0:	4620      	mov	r0, r4
 80027b2:	f7ff ffc4 	bl	800273e <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 80027b6:	2200      	movs	r2, #0
 80027b8:	4611      	mov	r1, r2
 80027ba:	202e      	movs	r0, #46	; 0x2e
 80027bc:	f7ff fe58 	bl	8002470 <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 80027c0:	f000 f9da 	bl	8002b78 <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 80027c4:	f000 f9d8 	bl	8002b78 <LCD_IO_ReadData>
 80027c8:	4604      	mov	r4, r0
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 80027ca:	f000 f9d5 	bl	8002b78 <LCD_IO_ReadData>
  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 80027ce:	f3c4 0385 	ubfx	r3, r4, #2, #6
 80027d2:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 80027d6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80027da:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 80027de:	4420      	add	r0, r4
}
 80027e0:	b280      	uxth	r0, r0
 80027e2:	bd38      	pop	{r3, r4, r5, pc}

080027e4 <ST7789H2_DrawHLine>:
{
 80027e4:	b570      	push	{r4, r5, r6, lr}
 80027e6:	4606      	mov	r6, r0
 80027e8:	4608      	mov	r0, r1
  ST7789H2_SetCursor(Xpos, Ypos); 
 80027ea:	4611      	mov	r1, r2
{
 80027ec:	461d      	mov	r5, r3
  ST7789H2_SetCursor(Xpos, Ypos); 
 80027ee:	f7ff ffa6 	bl	800273e <ST7789H2_SetCursor>
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80027f2:	2200      	movs	r2, #0
 80027f4:	4611      	mov	r1, r2
 80027f6:	202c      	movs	r0, #44	; 0x2c
 80027f8:	f7ff fe3a 	bl	8002470 <ST7789H2_WriteReg>
  for(counter = 0; counter < Length; counter++)
 80027fc:	2400      	movs	r4, #0
 80027fe:	42ac      	cmp	r4, r5
 8002800:	d100      	bne.n	8002804 <ST7789H2_DrawHLine+0x20>
}
 8002802:	bd70      	pop	{r4, r5, r6, pc}
    LCD_IO_WriteData(RGBCode);
 8002804:	4630      	mov	r0, r6
 8002806:	f000 f9ab 	bl	8002b60 <LCD_IO_WriteData>
 800280a:	3401      	adds	r4, #1
 800280c:	e7f7      	b.n	80027fe <ST7789H2_DrawHLine+0x1a>

0800280e <ST7789H2_DrawVLine>:
{
 800280e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002810:	460e      	mov	r6, r1
 8002812:	4607      	mov	r7, r0
  ST7789H2_SetCursor(Xpos, Ypos);
 8002814:	4611      	mov	r1, r2
 8002816:	4630      	mov	r0, r6
{
 8002818:	4614      	mov	r4, r2
 800281a:	461d      	mov	r5, r3
  ST7789H2_SetCursor(Xpos, Ypos);
 800281c:	f7ff ff8f 	bl	800273e <ST7789H2_SetCursor>
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002820:	2200      	movs	r2, #0
 8002822:	4611      	mov	r1, r2
 8002824:	202c      	movs	r0, #44	; 0x2c
 8002826:	f7ff fe23 	bl	8002470 <ST7789H2_WriteReg>
 800282a:	4425      	add	r5, r4
 800282c:	b2ad      	uxth	r5, r5
  for(counter = 0; counter < Length; counter++)
 800282e:	42ac      	cmp	r4, r5
 8002830:	d100      	bne.n	8002834 <ST7789H2_DrawVLine+0x26>
}
 8002832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 8002834:	4621      	mov	r1, r4
 8002836:	463a      	mov	r2, r7
 8002838:	4630      	mov	r0, r6
 800283a:	3401      	adds	r4, #1
 800283c:	f7ff ffa4 	bl	8002788 <ST7789H2_WritePixel>
 8002840:	b2a4      	uxth	r4, r4
 8002842:	e7f4      	b.n	800282e <ST7789H2_DrawVLine+0x20>

08002844 <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8002844:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002848:	4690      	mov	r8, r2
  uint32_t i = 0;
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 800284a:	2200      	movs	r2, #0
{
 800284c:	4606      	mov	r6, r0
 800284e:	460f      	mov	r7, r1
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002850:	202c      	movs	r0, #44	; 0x2c
 8002852:	4611      	mov	r1, r2
{
 8002854:	4699      	mov	r9, r3
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8002856:	f8df a058 	ldr.w	sl, [pc, #88]	; 80028b0 <ST7789H2_DrawRGBHLine+0x6c>
 800285a:	f8df b058 	ldr.w	fp, [pc, #88]	; 80028b4 <ST7789H2_DrawRGBHLine+0x70>
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 800285e:	f7ff fe07 	bl	8002470 <ST7789H2_WriteReg>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8002862:	4a11      	ldr	r2, [pc, #68]	; (80028a8 <ST7789H2_DrawRGBHLine+0x64>)
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8002864:	4634      	mov	r4, r6
  uint32_t i = 0;
 8002866:	2500      	movs	r5, #0
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8002868:	eb08 0306 	add.w	r3, r8, r6
 800286c:	429c      	cmp	r4, r3
 800286e:	d302      	bcc.n	8002876 <ST7789H2_DrawRGBHLine+0x32>
        LCD_IO_WriteData(rgb565[i]);        
      }      
      i++;
    }
  }
}
 8002870:	b003      	add	sp, #12
 8002872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8002876:	f8ba 3000 	ldrh.w	r3, [sl]
 800287a:	429c      	cmp	r4, r3
 800287c:	d311      	bcc.n	80028a2 <ST7789H2_DrawRGBHLine+0x5e>
 800287e:	f8bb 3000 	ldrh.w	r3, [fp]
 8002882:	42bb      	cmp	r3, r7
 8002884:	d80d      	bhi.n	80028a2 <ST7789H2_DrawRGBHLine+0x5e>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8002886:	8813      	ldrh	r3, [r2, #0]
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8002888:	429c      	cmp	r4, r3
 800288a:	d80a      	bhi.n	80028a2 <ST7789H2_DrawRGBHLine+0x5e>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 800288c:	4b07      	ldr	r3, [pc, #28]	; (80028ac <ST7789H2_DrawRGBHLine+0x68>)
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	42bb      	cmp	r3, r7
 8002892:	d306      	bcc.n	80028a2 <ST7789H2_DrawRGBHLine+0x5e>
        LCD_IO_WriteData(rgb565[i]);        
 8002894:	f839 0015 	ldrh.w	r0, [r9, r5, lsl #1]
 8002898:	9201      	str	r2, [sp, #4]
 800289a:	f000 f961 	bl	8002b60 <LCD_IO_WriteData>
      i++;
 800289e:	9a01      	ldr	r2, [sp, #4]
 80028a0:	3501      	adds	r5, #1
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 80028a2:	3401      	adds	r4, #1
 80028a4:	e7e0      	b.n	8002868 <ST7789H2_DrawRGBHLine+0x24>
 80028a6:	bf00      	nop
 80028a8:	200000f8 	.word	0x200000f8
 80028ac:	200000fa 	.word	0x200000fa
 80028b0:	200001c0 	.word	0x200001c0
 80028b4:	200001c2 	.word	0x200001c2

080028b8 <ST7789H2_DrawBitmap>:
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 80028b8:	4b19      	ldr	r3, [pc, #100]	; (8002920 <ST7789H2_DrawBitmap+0x68>)
{
 80028ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 80028be:	881d      	ldrh	r5, [r3, #0]
 80028c0:	4b18      	ldr	r3, [pc, #96]	; (8002924 <ST7789H2_DrawBitmap+0x6c>)
{
 80028c2:	460e      	mov	r6, r1
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 80028c4:	881b      	ldrh	r3, [r3, #0]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 80028c6:	4918      	ldr	r1, [pc, #96]	; (8002928 <ST7789H2_DrawBitmap+0x70>)
{
 80028c8:	4607      	mov	r7, r0
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 80028ca:	3501      	adds	r5, #1
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 80028cc:	4817      	ldr	r0, [pc, #92]	; (800292c <ST7789H2_DrawBitmap+0x74>)
 80028ce:	8809      	ldrh	r1, [r1, #0]
 80028d0:	8800      	ldrh	r0, [r0, #0]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 80028d2:	1aed      	subs	r5, r5, r3
  size = *(volatile uint16_t *) (pbmp + 2);
 80028d4:	8853      	ldrh	r3, [r2, #2]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 80028d6:	8893      	ldrh	r3, [r2, #4]
  index = *(volatile uint16_t *) (pbmp + 10);
 80028d8:	f8b2 800a 	ldrh.w	r8, [r2, #10]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 80028dc:	8993      	ldrh	r3, [r2, #12]
  index = *(volatile uint16_t *) (pbmp + 10);
 80028de:	fa1f f888 	uxth.w	r8, r8
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 80028e2:	3101      	adds	r1, #1
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 80028e4:	b2ad      	uxth	r5, r5
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 80028e6:	1a09      	subs	r1, r1, r0
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 80028e8:	ea48 4803 	orr.w	r8, r8, r3, lsl #16
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 80028ec:	fa16 f181 	uxtah	r1, r6, r1
 80028f0:	ea4f 0945 	mov.w	r9, r5, lsl #1
 80028f4:	4490      	add	r8, r2
 80028f6:	42b1      	cmp	r1, r6
 80028f8:	d801      	bhi.n	80028fe <ST7789H2_DrawBitmap+0x46>
}
 80028fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028fe:	1e4c      	subs	r4, r1, #1
 8002900:	fa1f fa84 	uxth.w	sl, r4
    ST7789H2_SetCursor(Xpos, posY - 1);
 8002904:	4651      	mov	r1, sl
 8002906:	4638      	mov	r0, r7
 8002908:	f7ff ff19 	bl	800273e <ST7789H2_SetCursor>
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 800290c:	4643      	mov	r3, r8
 800290e:	4651      	mov	r1, sl
 8002910:	462a      	mov	r2, r5
 8002912:	4638      	mov	r0, r7
 8002914:	f7ff ff96 	bl	8002844 <ST7789H2_DrawRGBHLine>
 8002918:	44c8      	add	r8, r9
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 800291a:	4621      	mov	r1, r4
 800291c:	e7eb      	b.n	80028f6 <ST7789H2_DrawBitmap+0x3e>
 800291e:	bf00      	nop
 8002920:	200000f8 	.word	0x200000f8
 8002924:	200001c0 	.word	0x200001c0
 8002928:	200000fa 	.word	0x200000fa
 800292c:	200001c2 	.word	0x200001c2

08002930 <ST7789H2_DrawRGBImage>:
{
 8002930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002934:	9d08      	ldr	r5, [sp, #32]
 8002936:	4606      	mov	r6, r0
 8002938:	4617      	mov	r7, r2
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 800293a:	460c      	mov	r4, r1
 800293c:	ea4f 0a42 	mov.w	sl, r2, lsl #1
 8002940:	eb01 0903 	add.w	r9, r1, r3
 8002944:	454c      	cmp	r4, r9
 8002946:	d301      	bcc.n	800294c <ST7789H2_DrawRGBImage+0x1c>
}
 8002948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ST7789H2_SetCursor(Xpos, posY);
 800294c:	fa1f f884 	uxth.w	r8, r4
 8002950:	4641      	mov	r1, r8
 8002952:	4630      	mov	r0, r6
 8002954:	f7ff fef3 	bl	800273e <ST7789H2_SetCursor>
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 8002958:	462b      	mov	r3, r5
 800295a:	463a      	mov	r2, r7
 800295c:	4641      	mov	r1, r8
 800295e:	4630      	mov	r0, r6
 8002960:	f7ff ff70 	bl	8002844 <ST7789H2_DrawRGBHLine>
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8002964:	3401      	adds	r4, #1
 8002966:	4455      	add	r5, sl
 8002968:	e7ec      	b.n	8002944 <ST7789H2_DrawRGBImage+0x14>

0800296a <ST7789H2_ReadReg>:
{
 800296a:	b508      	push	{r3, lr}
  LCD_IO_WriteReg(Command);
 800296c:	f000 f8fe 	bl	8002b6c <LCD_IO_WriteReg>
  LCD_IO_ReadData();
 8002970:	f000 f902 	bl	8002b78 <LCD_IO_ReadData>
  return (LCD_IO_ReadData());
 8002974:	f000 f900 	bl	8002b78 <LCD_IO_ReadData>
}
 8002978:	b2c0      	uxtb	r0, r0
 800297a:	bd08      	pop	{r3, pc}

0800297c <ST7789H2_ReadID>:
{
 800297c:	b508      	push	{r3, lr}
  LCD_IO_Init();
 800297e:	f000 f857 	bl	8002a30 <LCD_IO_Init>
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 8002982:	2004      	movs	r0, #4
 8002984:	f7ff fff1 	bl	800296a <ST7789H2_ReadReg>
}
 8002988:	bd08      	pop	{r3, pc}
	...

0800298c <BSP_LED_Init>:
  *          This parameter can be one of the following values:
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800298c:	b500      	push	{lr}
 800298e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 8002990:	b9e0      	cbnz	r0, 80029cc <BSP_LED_Init+0x40>
 8002992:	4b16      	ldr	r3, [pc, #88]	; (80029ec <BSP_LED_Init+0x60>)
 8002994:	9001      	str	r0, [sp, #4]
 8002996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002998:	f042 0204 	orr.w	r2, r2, #4
 800299c:	631a      	str	r2, [r3, #48]	; 0x30
 800299e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	9301      	str	r3, [sp, #4]
 80029a6:	9b01      	ldr	r3, [sp, #4]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 80029a8:	4b11      	ldr	r3, [pc, #68]	; (80029f0 <BSP_LED_Init+0x64>)
 80029aa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80029ae:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80029b0:	2301      	movs	r3, #1
 80029b2:	9304      	str	r3, [sp, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 80029b4:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80029b6:	2303      	movs	r3, #3
 80029b8:	9306      	str	r3, [sp, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 80029ba:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <BSP_LED_Init+0x68>)
 80029bc:	a903      	add	r1, sp, #12
 80029be:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80029c2:	f000 fe2d 	bl	8003620 <HAL_GPIO_Init>
}
 80029c6:	b009      	add	sp, #36	; 0x24
 80029c8:	f85d fb04 	ldr.w	pc, [sp], #4
  LEDx_GPIO_CLK_ENABLE(Led);
 80029cc:	2801      	cmp	r0, #1
 80029ce:	d1eb      	bne.n	80029a8 <BSP_LED_Init+0x1c>
 80029d0:	2300      	movs	r3, #0
 80029d2:	9302      	str	r3, [sp, #8]
 80029d4:	4b05      	ldr	r3, [pc, #20]	; (80029ec <BSP_LED_Init+0x60>)
 80029d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029d8:	f042 0210 	orr.w	r2, r2, #16
 80029dc:	631a      	str	r2, [r3, #48]	; 0x30
 80029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e0:	f003 0310 	and.w	r3, r3, #16
 80029e4:	9302      	str	r3, [sp, #8]
 80029e6:	9b02      	ldr	r3, [sp, #8]
 80029e8:	e7de      	b.n	80029a8 <BSP_LED_Init+0x1c>
 80029ea:	bf00      	nop
 80029ec:	40023800 	.word	0x40023800
 80029f0:	08009c30 	.word	0x08009c30
 80029f4:	200000fc 	.word	0x200000fc

080029f8 <BSP_LED_On>:
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80029f8:	4b04      	ldr	r3, [pc, #16]	; (8002a0c <BSP_LED_On+0x14>)
 80029fa:	f833 1020 	ldrh.w	r1, [r3, r0, lsl #2]
 80029fe:	4b04      	ldr	r3, [pc, #16]	; (8002a10 <BSP_LED_On+0x18>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002a06:	f000 bf79 	b.w	80038fc <HAL_GPIO_WritePin>
 8002a0a:	bf00      	nop
 8002a0c:	08009c30 	.word	0x08009c30
 8002a10:	200000fc 	.word	0x200000fc

08002a14 <BSP_LED_Off>:
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8002a14:	4b04      	ldr	r3, [pc, #16]	; (8002a28 <BSP_LED_Off+0x14>)
 8002a16:	f833 1020 	ldrh.w	r1, [r3, r0, lsl #2]
 8002a1a:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <BSP_LED_Off+0x18>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002a22:	f000 bf6b 	b.w	80038fc <HAL_GPIO_WritePin>
 8002a26:	bf00      	nop
 8002a28:	08009c30 	.word	0x08009c30
 8002a2c:	200000fc 	.word	0x200000fc

08002a30 <LCD_IO_Init>:
/********************************* LINK LCD ***********************************/
/**
  * @brief  Initializes LCD low level.
  */
void LCD_IO_Init(void) 
{
 8002a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a34:	b0a0      	sub	sp, #128	; 0x80
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002a36:	2400      	movs	r4, #0
 8002a38:	4b44      	ldr	r3, [pc, #272]	; (8002b4c <LCD_IO_Init+0x11c>)
 8002a3a:	9400      	str	r4, [sp, #0]
 8002a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002a3e:	4844      	ldr	r0, [pc, #272]	; (8002b50 <LCD_IO_Init+0x120>)
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002a40:	f042 0201 	orr.w	r2, r2, #1
 8002a44:	639a      	str	r2, [r3, #56]	; 0x38
 8002a46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a48:	f002 0201 	and.w	r2, r2, #1
 8002a4c:	9200      	str	r2, [sp, #0]
 8002a4e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a50:	9401      	str	r4, [sp, #4]
 8002a52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a54:	f042 0208 	orr.w	r2, r2, #8
 8002a58:	631a      	str	r2, [r3, #48]	; 0x30
 8002a5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a5c:	f002 0208 	and.w	r2, r2, #8
 8002a60:	9201      	str	r2, [sp, #4]
 8002a62:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a64:	9402      	str	r4, [sp, #8]
 8002a66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a68:	f042 0210 	orr.w	r2, r2, #16
 8002a6c:	631a      	str	r2, [r3, #48]	; 0x30
 8002a6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a70:	f002 0210 	and.w	r2, r2, #16
 8002a74:	9202      	str	r2, [sp, #8]
 8002a76:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a78:	9403      	str	r4, [sp, #12]
 8002a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a7c:	f042 0220 	orr.w	r2, r2, #32
 8002a80:	631a      	str	r2, [r3, #48]	; 0x30
 8002a82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a84:	f002 0220 	and.w	r2, r2, #32
 8002a88:	9203      	str	r2, [sp, #12]
 8002a8a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a8c:	9404      	str	r4, [sp, #16]
 8002a8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a94:	631a      	str	r2, [r3, #48]	; 0x30
 8002a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a9c:	9304      	str	r3, [sp, #16]
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 |\
 8002a9e:	ad20      	add	r5, sp, #128	; 0x80
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002aa0:	2602      	movs	r6, #2
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002aa2:	2701      	movs	r7, #1
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002aa4:	9b04      	ldr	r3, [sp, #16]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002aa6:	960d      	str	r6, [sp, #52]	; 0x34
  gpio_init_structure.Alternate = GPIO_AF12_FSMC;
 8002aa8:	230c      	movs	r3, #12
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002aaa:	970e      	str	r7, [sp, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FSMC;
 8002aac:	9310      	str	r3, [sp, #64]	; 0x40
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 |\
 8002aae:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8002ab2:	f845 3d50 	str.w	r3, [r5, #-80]!
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab6:	f04f 0803 	mov.w	r8, #3
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002aba:	4629      	mov	r1, r5
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002abc:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002ac0:	f000 fdae 	bl	8003620 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 |\
 8002ac4:	f64f 7380 	movw	r3, #65408	; 0xff80
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002ac8:	4629      	mov	r1, r5
 8002aca:	4822      	ldr	r0, [pc, #136]	; (8002b54 <LCD_IO_Init+0x124>)
  gpio_init_structure.Pin   = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 |\
 8002acc:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002ace:	f000 fda7 	bl	8003620 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002ad2:	f24f 033f 	movw	r3, #61503	; 0xf03f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002ad6:	4629      	mov	r1, r5
 8002ad8:	481f      	ldr	r0, [pc, #124]	; (8002b58 <LCD_IO_Init+0x128>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002ada:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002adc:	f000 fda0 	bl	8003620 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002ae0:	f240 433f 	movw	r3, #1087	; 0x43f
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002ae4:	4629      	mov	r1, r5
 8002ae6:	481d      	ldr	r0, [pc, #116]	; (8002b5c <LCD_IO_Init+0x12c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002ae8:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002aea:	f000 fd99 	bl	8003620 <HAL_GPIO_Init>
  hsram.Instance  = FSMC_NORSRAM_DEVICE;
 8002aee:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8002af2:	930c      	str	r3, [sp, #48]	; 0x30
  hsram.Extended  = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002af4:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002af8:	930d      	str	r3, [sp, #52]	; 0x34
  sram_timing.DataSetupTime         = 4;
 8002afa:	2304      	movs	r3, #4
 8002afc:	9307      	str	r3, [sp, #28]
  hsram.Init.NSBank             = FSMC_NORSRAM_BANK3;
 8002afe:	930e      	str	r3, [sp, #56]	; 0x38
  hsram.Init.MemoryDataWidth    = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002b00:	2310      	movs	r3, #16
 8002b02:	9311      	str	r3, [sp, #68]	; 0x44
  hsram.Init.WriteOperation     = FSMC_WRITE_OPERATION_ENABLE;
 8002b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b08:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing);
 8002b0a:	aa05      	add	r2, sp, #20
  hsram.Init.ExtendedMode       = FSMC_EXTENDED_MODE_ENABLE;
 8002b0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b10:	9318      	str	r3, [sp, #96]	; 0x60
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing);
 8002b12:	4611      	mov	r1, r2
  hsram.Init.WriteFifo          = FSMC_WRITE_FIFO_DISABLE;
 8002b14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing);
 8002b18:	4628      	mov	r0, r5
  sram_timing.AddressSetupTime      = 3;
 8002b1a:	f8cd 8014 	str.w	r8, [sp, #20]
  sram_timing.AddressHoldTime       = 1;
 8002b1e:	9706      	str	r7, [sp, #24]
  sram_timing.BusTurnAroundDuration = 1;
 8002b20:	9708      	str	r7, [sp, #32]
  sram_timing.CLKDivision           = 2;
 8002b22:	9609      	str	r6, [sp, #36]	; 0x24
  sram_timing.DataLatency           = 2;
 8002b24:	960a      	str	r6, [sp, #40]	; 0x28
  sram_timing.AccessMode            = FSMC_ACCESS_MODE_A;
 8002b26:	940b      	str	r4, [sp, #44]	; 0x2c
  hsram.Init.DataAddressMux     = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002b28:	940f      	str	r4, [sp, #60]	; 0x3c
  hsram.Init.MemoryType         = FSMC_MEMORY_TYPE_SRAM;
 8002b2a:	9410      	str	r4, [sp, #64]	; 0x40
  hsram.Init.BurstAccessMode    = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002b2c:	9412      	str	r4, [sp, #72]	; 0x48
  hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002b2e:	9413      	str	r4, [sp, #76]	; 0x4c
  hsram.Init.WrapMode           = FSMC_WRAP_MODE_DISABLE;
 8002b30:	9414      	str	r4, [sp, #80]	; 0x50
  hsram.Init.WaitSignalActive   = FSMC_WAIT_TIMING_BEFORE_WS;
 8002b32:	9415      	str	r4, [sp, #84]	; 0x54
  hsram.Init.WaitSignal         = FSMC_WAIT_SIGNAL_DISABLE;
 8002b34:	9417      	str	r4, [sp, #92]	; 0x5c
  hsram.Init.AsynchronousWait   = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002b36:	9419      	str	r4, [sp, #100]	; 0x64
  hsram.Init.WriteBurst         = FSMC_WRITE_BURST_DISABLE;
 8002b38:	941a      	str	r4, [sp, #104]	; 0x68
  hsram.Init.WriteFifo          = FSMC_WRITE_FIFO_DISABLE;
 8002b3a:	931c      	str	r3, [sp, #112]	; 0x70
  hsram.Init.PageSize           = FSMC_PAGE_SIZE_NONE;
 8002b3c:	941d      	str	r4, [sp, #116]	; 0x74
  hsram.Init.ContinuousClock    = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8002b3e:	941b      	str	r4, [sp, #108]	; 0x6c
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing);
 8002b40:	f002 feb0 	bl	80058a4 <HAL_SRAM_Init>
  FMC_BANK3_Init();
}
 8002b44:	b020      	add	sp, #128	; 0x80
 8002b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	40020c00 	.word	0x40020c00
 8002b54:	40021000 	.word	0x40021000
 8002b58:	40021400 	.word	0x40021400
 8002b5c:	40021800 	.word	0x40021800

08002b60 <LCD_IO_WriteData>:
  FMC_BANK3->RAM = Data;
 8002b60:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8002b64:	8058      	strh	r0, [r3, #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b66:	f3bf 8f4f 	dsb	sy
 8002b6a:	4770      	bx	lr

08002b6c <LCD_IO_WriteReg>:
  FMC_BANK3->REG = Reg;
 8002b6c:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8002b70:	8018      	strh	r0, [r3, #0]
 8002b72:	f3bf 8f4f 	dsb	sy
 8002b76:	4770      	bx	lr

08002b78 <LCD_IO_ReadData>:
  return FMC_BANK3->RAM;
 8002b78:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8002b7c:	8858      	ldrh	r0, [r3, #2]
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void) 
{
  return FMC_BANK3_ReadData();
}
 8002b7e:	b280      	uxth	r0, r0
 8002b80:	4770      	bx	lr

08002b82 <LCD_IO_Delay>:
 8002b82:	f000 ba1b 	b.w	8002fbc <HAL_Delay>
	...

08002b88 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size. 
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002b88:	b508      	push	{r3, lr}
  return(LcdDrv->GetLcdPixelWidth());
 8002b8a:	4b02      	ldr	r3, [pc, #8]	; (8002b94 <BSP_LCD_GetXSize+0xc>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b90:	4798      	blx	r3
}
 8002b92:	bd08      	pop	{r3, pc}
 8002b94:	200001c4 	.word	0x200001c4

08002b98 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size. 
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002b98:	b508      	push	{r3, lr}
  return(LcdDrv->GetLcdPixelHeight());
 8002b9a:	4b02      	ldr	r3, [pc, #8]	; (8002ba4 <BSP_LCD_GetYSize+0xc>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba0:	4798      	blx	r3
}
 8002ba2:	bd08      	pop	{r3, pc}
 8002ba4:	200001c4 	.word	0x200001c4

08002ba8 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
  DrawProp.TextColor = Color;
 8002ba8:	4b01      	ldr	r3, [pc, #4]	; (8002bb0 <BSP_LCD_SetTextColor+0x8>)
 8002baa:	6018      	str	r0, [r3, #0]
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	200002e0 	.word	0x200002e0

08002bb4 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
  DrawProp.BackColor = Color;
 8002bb4:	4b01      	ldr	r3, [pc, #4]	; (8002bbc <BSP_LCD_SetBackColor+0x8>)
 8002bb6:	6058      	str	r0, [r3, #4]
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	200002e0 	.word	0x200002e0

08002bc0 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
  DrawProp.pFont = fonts;
 8002bc0:	4b01      	ldr	r3, [pc, #4]	; (8002bc8 <BSP_LCD_SetFont+0x8>)
 8002bc2:	6098      	str	r0, [r3, #8]
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	200002e0 	.word	0x200002e0

08002bcc <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
  if(LcdDrv->WritePixel != NULL)
 8002bcc:	4b02      	ldr	r3, [pc, #8]	; (8002bd8 <BSP_LCD_DrawPixel+0xc>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	b103      	cbz	r3, 8002bd6 <BSP_LCD_DrawPixel+0xa>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 8002bd4:	4718      	bx	r3
 8002bd6:	4770      	bx	lr
 8002bd8:	200001c4 	.word	0x200001c4

08002bdc <BSP_LCD_DisplayChar>:
{
 8002bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8002be0:	4b27      	ldr	r3, [pc, #156]	; (8002c80 <BSP_LCD_DisplayChar+0xa4>)
{
 8002be2:	b085      	sub	sp, #20
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8002be4:	f1a2 0420 	sub.w	r4, r2, #32
{
 8002be8:	9102      	str	r1, [sp, #8]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8002bea:	6899      	ldr	r1, [r3, #8]
{
 8002bec:	9001      	str	r0, [sp, #4]
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8002bee:	f8b1 b004 	ldrh.w	fp, [r1, #4]
 8002bf2:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 8002bf6:	680a      	ldr	r2, [r1, #0]
 8002bf8:	f10b 0607 	add.w	r6, fp, #7
 8002bfc:	10f6      	asrs	r6, r6, #3
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8002bfe:	fb0a f404 	mul.w	r4, sl, r4
  uint32_t line;
  
  height = DrawProp.pFont->Height;
  width  = DrawProp.pFont->Width;
  
  offset =  8 *((width + 7)/8) -  width ;
 8002c02:	ebcb 00c6 	rsb	r0, fp, r6, lsl #3
 8002c06:	fb06 2404 	mla	r4, r6, r4, r2
      break;
    }  
    
    for (j = 0; j < width; j++)
    {
      if(line & (1 << (width- j + offset- 1))) 
 8002c0a:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8002c0e:	fa52 f380 	uxtab	r3, r2, r0
  for(i = 0; i < height; i++)
 8002c12:	f04f 0800 	mov.w	r8, #0
      if(line & (1 << (width- j + offset- 1))) 
 8002c16:	9303      	str	r3, [sp, #12]
 8002c18:	9b02      	ldr	r3, [sp, #8]
  for(i = 0; i < height; i++)
 8002c1a:	45d0      	cmp	r8, sl
 8002c1c:	eb03 0908 	add.w	r9, r3, r8
 8002c20:	fa1f f989 	uxth.w	r9, r9
 8002c24:	d302      	bcc.n	8002c2c <BSP_LCD_DisplayChar+0x50>
}
 8002c26:	b005      	add	sp, #20
 8002c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 8002c2c:	2e01      	cmp	r6, #1
 8002c2e:	d009      	beq.n	8002c44 <BSP_LCD_DisplayChar+0x68>
 8002c30:	2e02      	cmp	r6, #2
 8002c32:	d00f      	beq.n	8002c54 <BSP_LCD_DisplayChar+0x78>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8002c34:	7865      	ldrb	r5, [r4, #1]
 8002c36:	7822      	ldrb	r2, [r4, #0]
 8002c38:	022d      	lsls	r5, r5, #8
 8002c3a:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
 8002c3e:	78a2      	ldrb	r2, [r4, #2]
 8002c40:	4315      	orrs	r5, r2
 8002c42:	e000      	b.n	8002c46 <BSP_LCD_DisplayChar+0x6a>
      line =  pchar[0];
 8002c44:	7825      	ldrb	r5, [r4, #0]
    for (j = 0; j < width; j++)
 8002c46:	2700      	movs	r7, #0
 8002c48:	45bb      	cmp	fp, r7
 8002c4a:	d808      	bhi.n	8002c5e <BSP_LCD_DisplayChar+0x82>
  for(i = 0; i < height; i++)
 8002c4c:	f108 0801 	add.w	r8, r8, #1
 8002c50:	4434      	add	r4, r6
 8002c52:	e7e1      	b.n	8002c18 <BSP_LCD_DisplayChar+0x3c>
      line =  (pchar[0]<< 8) | pchar[1];
 8002c54:	7822      	ldrb	r2, [r4, #0]
 8002c56:	7865      	ldrb	r5, [r4, #1]
 8002c58:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 8002c5c:	e7f3      	b.n	8002c46 <BSP_LCD_DisplayChar+0x6a>
      if(line & (1 << (width- j + offset- 1))) 
 8002c5e:	9b03      	ldr	r3, [sp, #12]
 8002c60:	1bd9      	subs	r1, r3, r7
 8002c62:	9b01      	ldr	r3, [sp, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	408a      	lsls	r2, r1
 8002c68:	19d8      	adds	r0, r3, r7
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 8002c6a:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <BSP_LCD_DisplayChar+0xa4>)
      if(line & (1 << (width- j + offset- 1))) 
 8002c6c:	422a      	tst	r2, r5
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 8002c6e:	bf14      	ite	ne
 8002c70:	881a      	ldrhne	r2, [r3, #0]
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 8002c72:	889a      	ldrheq	r2, [r3, #4]
 8002c74:	4649      	mov	r1, r9
 8002c76:	b280      	uxth	r0, r0
 8002c78:	f7ff ffa8 	bl	8002bcc <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002c7c:	3701      	adds	r7, #1
 8002c7e:	e7e3      	b.n	8002c48 <BSP_LCD_DisplayChar+0x6c>
 8002c80:	200002e0 	.word	0x200002e0

08002c84 <BSP_LCD_DisplayStringAt>:
{
 8002c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c88:	4604      	mov	r4, r0
 8002c8a:	460e      	mov	r6, r1
 8002c8c:	4615      	mov	r5, r2
 8002c8e:	4699      	mov	r9, r3
 8002c90:	eba2 0805 	sub.w	r8, r2, r5
  while (*ptr++) size ++ ;
 8002c94:	f812 3b01 	ldrb.w	r3, [r2], #1
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1f9      	bne.n	8002c90 <BSP_LCD_DisplayStringAt+0xc>
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 8002c9c:	4f21      	ldr	r7, [pc, #132]	; (8002d24 <BSP_LCD_DisplayStringAt+0xa0>)
 8002c9e:	f7ff ff73 	bl	8002b88 <BSP_LCD_GetXSize>
 8002ca2:	68bb      	ldr	r3, [r7, #8]
  switch (Mode)
 8002ca4:	f1b9 0f01 	cmp.w	r9, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 8002ca8:	889a      	ldrh	r2, [r3, #4]
 8002caa:	fbb0 f0f2 	udiv	r0, r0, r2
  switch (Mode)
 8002cae:	d020      	beq.n	8002cf2 <BSP_LCD_DisplayStringAt+0x6e>
 8002cb0:	f1b9 0f02 	cmp.w	r9, #2
 8002cb4:	d024      	beq.n	8002d00 <BSP_LCD_DisplayStringAt+0x7c>
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8002cb6:	b223      	sxth	r3, r4
    refcolumn = 1;
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	bfd8      	it	le
 8002cbc:	2401      	movle	r4, #1
 8002cbe:	46a9      	mov	r9, r5
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8002cc0:	f899 a000 	ldrb.w	sl, [r9]
 8002cc4:	f11a 0a00 	adds.w	sl, sl, #0
 8002cc8:	bf18      	it	ne
 8002cca:	f04f 0a01 	movne.w	sl, #1
 8002cce:	f7ff ff5b 	bl	8002b88 <BSP_LCD_GetXSize>
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	eba9 0805 	sub.w	r8, r9, r5
 8002cd8:	889b      	ldrh	r3, [r3, #4]
 8002cda:	fa1f f888 	uxth.w	r8, r8
 8002cde:	fb03 0018 	mls	r0, r3, r8, r0
 8002ce2:	b280      	uxth	r0, r0
 8002ce4:	4298      	cmp	r0, r3
 8002ce6:	d302      	bcc.n	8002cee <BSP_LCD_DisplayStringAt+0x6a>
 8002ce8:	f1ba 0f00 	cmp.w	sl, #0
 8002cec:	d10e      	bne.n	8002d0c <BSP_LCD_DisplayStringAt+0x88>
 8002cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 8002cf2:	eba0 0008 	sub.w	r0, r0, r8
 8002cf6:	4350      	muls	r0, r2
 8002cf8:	eb04 0450 	add.w	r4, r4, r0, lsr #1
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 8002cfc:	b2a4      	uxth	r4, r4
      break;
 8002cfe:	e7da      	b.n	8002cb6 <BSP_LCD_DisplayStringAt+0x32>
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 8002d00:	eba0 0008 	sub.w	r0, r0, r8
 8002d04:	fb10 f002 	smulbb	r0, r0, r2
 8002d08:	1b04      	subs	r4, r0, r4
 8002d0a:	e7f7      	b.n	8002cfc <BSP_LCD_DisplayStringAt+0x78>
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8002d0c:	4620      	mov	r0, r4
 8002d0e:	f819 2b01 	ldrb.w	r2, [r9], #1
 8002d12:	4631      	mov	r1, r6
 8002d14:	f7ff ff62 	bl	8002bdc <BSP_LCD_DisplayChar>
    refcolumn += DrawProp.pFont->Width;
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	889b      	ldrh	r3, [r3, #4]
 8002d1c:	441c      	add	r4, r3
 8002d1e:	b2a4      	uxth	r4, r4
 8002d20:	e7ce      	b.n	8002cc0 <BSP_LCD_DisplayStringAt+0x3c>
 8002d22:	bf00      	nop
 8002d24:	200002e0 	.word	0x200002e0

08002d28 <BSP_LCD_DrawHLine>:
  if(LcdDrv->DrawHLine != NULL)
 8002d28:	4b10      	ldr	r3, [pc, #64]	; (8002d6c <BSP_LCD_DrawHLine+0x44>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
{
 8002d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(LcdDrv->DrawHLine != NULL)
 8002d30:	6a1c      	ldr	r4, [r3, #32]
{
 8002d32:	4605      	mov	r5, r0
 8002d34:	460e      	mov	r6, r1
 8002d36:	4617      	mov	r7, r2
  if(LcdDrv->DrawHLine != NULL)
 8002d38:	b974      	cbnz	r4, 8002d58 <BSP_LCD_DrawHLine+0x30>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8002d3a:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8002d70 <BSP_LCD_DrawHLine+0x48>
    for(index = 0; index < Length; index++)
 8002d3e:	42bc      	cmp	r4, r7
 8002d40:	d301      	bcc.n	8002d46 <BSP_LCD_DrawHLine+0x1e>
 8002d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8002d46:	1928      	adds	r0, r5, r4
 8002d48:	f8b8 2000 	ldrh.w	r2, [r8]
 8002d4c:	4631      	mov	r1, r6
 8002d4e:	b280      	uxth	r0, r0
 8002d50:	f7ff ff3c 	bl	8002bcc <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8002d54:	3401      	adds	r4, #1
 8002d56:	e7f2      	b.n	8002d3e <BSP_LCD_DrawHLine+0x16>
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8002d58:	4613      	mov	r3, r2
 8002d5a:	460a      	mov	r2, r1
 8002d5c:	4601      	mov	r1, r0
 8002d5e:	4804      	ldr	r0, [pc, #16]	; (8002d70 <BSP_LCD_DrawHLine+0x48>)
 8002d60:	46a4      	mov	ip, r4
 8002d62:	8800      	ldrh	r0, [r0, #0]
}
 8002d64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8002d68:	4760      	bx	ip
 8002d6a:	bf00      	nop
 8002d6c:	200001c4 	.word	0x200001c4
 8002d70:	200002e0 	.word	0x200002e0

08002d74 <BSP_LCD_Clear>:
{ 
 8002d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t color_backup = DrawProp.TextColor; 
 8002d76:	4c0a      	ldr	r4, [pc, #40]	; (8002da0 <BSP_LCD_Clear+0x2c>)
 8002d78:	6826      	ldr	r6, [r4, #0]
  DrawProp.TextColor = Color;
 8002d7a:	6020      	str	r0, [r4, #0]
  y_size =  BSP_LCD_GetYSize();
 8002d7c:	f7ff ff0c 	bl	8002b98 <BSP_LCD_GetYSize>
  for(counter = 0; counter < y_size; counter++)
 8002d80:	2500      	movs	r5, #0
  y_size =  BSP_LCD_GetYSize();
 8002d82:	4607      	mov	r7, r0
  for(counter = 0; counter < y_size; counter++)
 8002d84:	42bd      	cmp	r5, r7
 8002d86:	d102      	bne.n	8002d8e <BSP_LCD_Clear+0x1a>
  DrawProp.TextColor = Color;
 8002d88:	b2b6      	uxth	r6, r6
 8002d8a:	6026      	str	r6, [r4, #0]
 8002d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 8002d8e:	f7ff fefb 	bl	8002b88 <BSP_LCD_GetXSize>
 8002d92:	b2a9      	uxth	r1, r5
 8002d94:	b282      	uxth	r2, r0
 8002d96:	2000      	movs	r0, #0
 8002d98:	f7ff ffc6 	bl	8002d28 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < y_size; counter++)
 8002d9c:	3501      	adds	r5, #1
 8002d9e:	e7f1      	b.n	8002d84 <BSP_LCD_Clear+0x10>
 8002da0:	200002e0 	.word	0x200002e0

08002da4 <BSP_LCD_FillRect>:
{
 8002da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002da8:	4617      	mov	r7, r2
  DrawProp.TextColor = Color;
 8002daa:	4a09      	ldr	r2, [pc, #36]	; (8002dd0 <BSP_LCD_FillRect+0x2c>)
{
 8002dac:	4688      	mov	r8, r1
  DrawProp.TextColor = Color;
 8002dae:	8811      	ldrh	r1, [r2, #0]
 8002db0:	6011      	str	r1, [r2, #0]
{
 8002db2:	4606      	mov	r6, r0
 8002db4:	1c5d      	adds	r5, r3, #1
  DrawProp.TextColor = Color;
 8002db6:	2400      	movs	r4, #0
    BSP_LCD_DrawHLine(Xpos, Ypos++, Width);    
 8002db8:	eb08 0104 	add.w	r1, r8, r4
 8002dbc:	463a      	mov	r2, r7
 8002dbe:	b289      	uxth	r1, r1
 8002dc0:	4630      	mov	r0, r6
 8002dc2:	3401      	adds	r4, #1
 8002dc4:	f7ff ffb0 	bl	8002d28 <BSP_LCD_DrawHLine>
  while(Height--);
 8002dc8:	42ac      	cmp	r4, r5
 8002dca:	d1f5      	bne.n	8002db8 <BSP_LCD_FillRect+0x14>
}
 8002dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002dd0:	200002e0 	.word	0x200002e0

08002dd4 <BSP_LCD_MspInit>:
{
 8002dd4:	b570      	push	{r4, r5, r6, lr}
 8002dd6:	b088      	sub	sp, #32
  LCD_RESET_GPIO_CLK_ENABLE();
 8002dd8:	4b1e      	ldr	r3, [pc, #120]	; (8002e54 <BSP_LCD_MspInit+0x80>)
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 8002dda:	4e1f      	ldr	r6, [pc, #124]	; (8002e58 <BSP_LCD_MspInit+0x84>)
  LCD_RESET_GPIO_CLK_ENABLE();
 8002ddc:	2400      	movs	r4, #0
 8002dde:	9400      	str	r4, [sp, #0]
 8002de0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002de2:	f042 0202 	orr.w	r2, r2, #2
 8002de6:	631a      	str	r2, [r3, #48]	; 0x30
 8002de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dea:	f002 0202 	and.w	r2, r2, #2
 8002dee:	9200      	str	r2, [sp, #0]
 8002df0:	9a00      	ldr	r2, [sp, #0]
  LCD_TE_GPIO_CLK_ENABLE();
 8002df2:	9401      	str	r4, [sp, #4]
 8002df4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002df6:	f042 0202 	orr.w	r2, r2, #2
 8002dfa:	631a      	str	r2, [r3, #48]	; 0x30
 8002dfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dfe:	f002 0202 	and.w	r2, r2, #2
 8002e02:	9201      	str	r2, [sp, #4]
 8002e04:	9a01      	ldr	r2, [sp, #4]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002e06:	9402      	str	r4, [sp, #8]
 8002e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e0a:	f042 0210 	orr.w	r2, r2, #16
 8002e0e:	631a      	str	r2, [r3, #48]	; 0x30
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002e12:	9405      	str	r4, [sp, #20]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002e14:	f003 0310 	and.w	r3, r3, #16
 8002e18:	9302      	str	r3, [sp, #8]
 8002e1a:	9b02      	ldr	r3, [sp, #8]
  gpio_init_structure.Pin       = LCD_RESET_PIN;     /* LCD_RESET pin has to be manually controlled */
 8002e1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e20:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002e22:	2501      	movs	r5, #1
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002e24:	2302      	movs	r3, #2
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 8002e26:	a903      	add	r1, sp, #12
 8002e28:	4630      	mov	r0, r6
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002e2a:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002e2c:	9504      	str	r5, [sp, #16]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 8002e2e:	f000 fbf7 	bl	8003620 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_TE_PIN;        /* LCD_TE pin has to be manually managed */
 8002e32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8002e36:	a903      	add	r1, sp, #12
 8002e38:	4630      	mov	r0, r6
  gpio_init_structure.Pin       = LCD_TE_PIN;        /* LCD_TE pin has to be manually managed */
 8002e3a:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8002e3c:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8002e3e:	f000 fbef 	bl	8003620 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 8002e42:	2320      	movs	r3, #32
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002e44:	a903      	add	r1, sp, #12
 8002e46:	4805      	ldr	r0, [pc, #20]	; (8002e5c <BSP_LCD_MspInit+0x88>)
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 8002e48:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002e4a:	9504      	str	r5, [sp, #16]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002e4c:	f000 fbe8 	bl	8003620 <HAL_GPIO_Init>
}
 8002e50:	b008      	add	sp, #32
 8002e52:	bd70      	pop	{r4, r5, r6, pc}
 8002e54:	40023800 	.word	0x40023800
 8002e58:	40020400 	.word	0x40020400
 8002e5c:	40021000 	.word	0x40021000

08002e60 <BSP_LCD_InitEx>:
{ 
 8002e60:	b570      	push	{r4, r5, r6, lr}
  DrawProp.BackColor = 0xFFFF;
 8002e62:	4c25      	ldr	r4, [pc, #148]	; (8002ef8 <BSP_LCD_InitEx+0x98>)
 8002e64:	f64f 73ff 	movw	r3, #65535	; 0xffff
  DrawProp.TextColor = 0x0000;
 8002e68:	2600      	movs	r6, #0
  DrawProp.BackColor = 0xFFFF;
 8002e6a:	6063      	str	r3, [r4, #4]
  DrawProp.pFont     = &Font24;
 8002e6c:	4b23      	ldr	r3, [pc, #140]	; (8002efc <BSP_LCD_InitEx+0x9c>)
 8002e6e:	60a3      	str	r3, [r4, #8]
{ 
 8002e70:	4605      	mov	r5, r0
  DrawProp.TextColor = 0x0000;
 8002e72:	6026      	str	r6, [r4, #0]
  BSP_LCD_MspInit();
 8002e74:	f7ff ffae 	bl	8002dd4 <BSP_LCD_MspInit>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002e78:	2201      	movs	r2, #1
 8002e7a:	2120      	movs	r1, #32
 8002e7c:	4820      	ldr	r0, [pc, #128]	; (8002f00 <BSP_LCD_InitEx+0xa0>)
 8002e7e:	f000 fd3d 	bl	80038fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8002e82:	4632      	mov	r2, r6
 8002e84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e88:	481e      	ldr	r0, [pc, #120]	; (8002f04 <BSP_LCD_InitEx+0xa4>)
 8002e8a:	f000 fd37 	bl	80038fc <HAL_GPIO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 8002e8e:	2005      	movs	r0, #5
 8002e90:	f000 f894 	bl	8002fbc <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8002e94:	2201      	movs	r2, #1
 8002e96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e9a:	481a      	ldr	r0, [pc, #104]	; (8002f04 <BSP_LCD_InitEx+0xa4>)
 8002e9c:	f000 fd2e 	bl	80038fc <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8002ea0:	200a      	movs	r0, #10
 8002ea2:	f000 f88b 	bl	8002fbc <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8002ea6:	4632      	mov	r2, r6
 8002ea8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002eac:	4815      	ldr	r0, [pc, #84]	; (8002f04 <BSP_LCD_InitEx+0xa4>)
  if(ST7789H2_drv.ReadID() == ST7789H2_ID)
 8002eae:	4e16      	ldr	r6, [pc, #88]	; (8002f08 <BSP_LCD_InitEx+0xa8>)
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8002eb0:	f000 fd24 	bl	80038fc <HAL_GPIO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 8002eb4:	2014      	movs	r0, #20
 8002eb6:	f000 f881 	bl	8002fbc <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ec0:	4810      	ldr	r0, [pc, #64]	; (8002f04 <BSP_LCD_InitEx+0xa4>)
 8002ec2:	f000 fd1b 	bl	80038fc <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8002ec6:	200a      	movs	r0, #10
 8002ec8:	f000 f878 	bl	8002fbc <HAL_Delay>
  if(ST7789H2_drv.ReadID() == ST7789H2_ID)
 8002ecc:	6873      	ldr	r3, [r6, #4]
 8002ece:	4798      	blx	r3
 8002ed0:	2885      	cmp	r0, #133	; 0x85
 8002ed2:	d10e      	bne.n	8002ef2 <BSP_LCD_InitEx+0x92>
    LcdDrv = &ST7789H2_drv;
 8002ed4:	4b0d      	ldr	r3, [pc, #52]	; (8002f0c <BSP_LCD_InitEx+0xac>)
 8002ed6:	601e      	str	r6, [r3, #0]
    LcdDrv->Init();
 8002ed8:	6833      	ldr	r3, [r6, #0]
 8002eda:	4798      	blx	r3
    if(orientation == LCD_ORIENTATION_PORTRAIT)
 8002edc:	b91d      	cbnz	r5, 8002ee6 <BSP_LCD_InitEx+0x86>
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_LANDSCAPE_ROT180);
 8002ede:	4628      	mov	r0, r5
 8002ee0:	f7ff fad6 	bl	8002490 <ST7789H2_SetOrientation>
 8002ee4:	e001      	b.n	8002eea <BSP_LCD_InitEx+0x8a>
    else if(orientation == LCD_ORIENTATION_LANDSCAPE_ROT180)
 8002ee6:	2d02      	cmp	r5, #2
 8002ee8:	d0f9      	beq.n	8002ede <BSP_LCD_InitEx+0x7e>
  DrawProp.pFont = fonts;
 8002eea:	4b09      	ldr	r3, [pc, #36]	; (8002f10 <BSP_LCD_InitEx+0xb0>)
 8002eec:	60a3      	str	r3, [r4, #8]
    ret = LCD_OK;   
 8002eee:	2000      	movs	r0, #0
 8002ef0:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t ret = LCD_ERROR;
 8002ef2:	2001      	movs	r0, #1
}
 8002ef4:	bd70      	pop	{r4, r5, r6, pc}
 8002ef6:	bf00      	nop
 8002ef8:	200002e0 	.word	0x200002e0
 8002efc:	2000010c 	.word	0x2000010c
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40020400 	.word	0x40020400
 8002f08:	200000c0 	.word	0x200000c0
 8002f0c:	200001c4 	.word	0x200001c4
 8002f10:	20000104 	.word	0x20000104

08002f14 <BSP_LCD_Init>:
 return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8002f14:	2001      	movs	r0, #1
 8002f16:	f7ff bfa3 	b.w	8002e60 <BSP_LCD_InitEx>
	...

08002f1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f1c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f1e:	4a0e      	ldr	r2, [pc, #56]	; (8002f58 <HAL_InitTick+0x3c>)
 8002f20:	4b0e      	ldr	r3, [pc, #56]	; (8002f5c <HAL_InitTick+0x40>)
{
 8002f22:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f24:	7818      	ldrb	r0, [r3, #0]
 8002f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f2a:	fbb3 f3f0 	udiv	r3, r3, r0
 8002f2e:	6810      	ldr	r0, [r2, #0]
 8002f30:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f34:	f000 f9e2 	bl	80032fc <HAL_SYSTICK_Config>
 8002f38:	4604      	mov	r4, r0
 8002f3a:	b958      	cbnz	r0, 8002f54 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f3c:	2d0f      	cmp	r5, #15
 8002f3e:	d809      	bhi.n	8002f54 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f40:	4602      	mov	r2, r0
 8002f42:	4629      	mov	r1, r5
 8002f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f48:	f000 f998 	bl	800327c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f4c:	4b04      	ldr	r3, [pc, #16]	; (8002f60 <HAL_InitTick+0x44>)
 8002f4e:	4620      	mov	r0, r4
 8002f50:	601d      	str	r5, [r3, #0]
 8002f52:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002f54:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002f56:	bd38      	pop	{r3, r4, r5, pc}
 8002f58:	2000013c 	.word	0x2000013c
 8002f5c:	20000114 	.word	0x20000114
 8002f60:	20000118 	.word	0x20000118

08002f64 <HAL_Init>:
{
 8002f64:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f66:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <HAL_Init+0x30>)
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f6e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f76:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f7e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f80:	2003      	movs	r0, #3
 8002f82:	f000 f969 	bl	8003258 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f86:	2000      	movs	r0, #0
 8002f88:	f7ff ffc8 	bl	8002f1c <HAL_InitTick>
  HAL_MspInit();
 8002f8c:	f005 f8f6 	bl	800817c <HAL_MspInit>
}
 8002f90:	2000      	movs	r0, #0
 8002f92:	bd08      	pop	{r3, pc}
 8002f94:	40023c00 	.word	0x40023c00

08002f98 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002f98:	4a03      	ldr	r2, [pc, #12]	; (8002fa8 <HAL_IncTick+0x10>)
 8002f9a:	4b04      	ldr	r3, [pc, #16]	; (8002fac <HAL_IncTick+0x14>)
 8002f9c:	6811      	ldr	r1, [r2, #0]
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	440b      	add	r3, r1
 8002fa2:	6013      	str	r3, [r2, #0]
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	200002ec 	.word	0x200002ec
 8002fac:	20000114 	.word	0x20000114

08002fb0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002fb0:	4b01      	ldr	r3, [pc, #4]	; (8002fb8 <HAL_GetTick+0x8>)
 8002fb2:	6818      	ldr	r0, [r3, #0]
}
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	200002ec 	.word	0x200002ec

08002fbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fbc:	b538      	push	{r3, r4, r5, lr}
 8002fbe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002fc0:	f7ff fff6 	bl	8002fb0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fc4:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002fc6:	bf1c      	itt	ne
 8002fc8:	4b05      	ldrne	r3, [pc, #20]	; (8002fe0 <HAL_Delay+0x24>)
 8002fca:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8002fcc:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8002fce:	bf18      	it	ne
 8002fd0:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fd2:	f7ff ffed 	bl	8002fb0 <HAL_GetTick>
 8002fd6:	1b40      	subs	r0, r0, r5
 8002fd8:	4284      	cmp	r4, r0
 8002fda:	d8fa      	bhi.n	8002fd2 <HAL_Delay+0x16>
  {
  }
}
 8002fdc:	bd38      	pop	{r3, r4, r5, pc}
 8002fde:	bf00      	nop
 8002fe0:	20000114 	.word	0x20000114

08002fe4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fe4:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002fe6:	4604      	mov	r4, r0
 8002fe8:	2800      	cmp	r0, #0
 8002fea:	f000 8099 	beq.w	8003120 <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002fee:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002ff0:	b923      	cbnz	r3, 8002ffc <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ff2:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ff4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ff8:	f005 f8dc 	bl	80081b4 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ffc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ffe:	06db      	lsls	r3, r3, #27
 8003000:	f100 808c 	bmi.w	800311c <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003004:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003006:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800300a:	f023 0302 	bic.w	r3, r3, #2
 800300e:	f043 0302 	orr.w	r3, r3, #2
 8003012:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003014:	4b43      	ldr	r3, [pc, #268]	; (8003124 <HAL_ADC_Init+0x140>)
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800301c:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	6861      	ldr	r1, [r4, #4]
 8003022:	430a      	orrs	r2, r1
 8003024:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003026:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003028:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003030:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003038:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800303a:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800303c:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800303e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003042:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	430a      	orrs	r2, r1
 8003048:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800304a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800304c:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800304e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003052:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	430a      	orrs	r2, r1
 8003058:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800305a:	4933      	ldr	r1, [pc, #204]	; (8003128 <HAL_ADC_Init+0x144>)
 800305c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800305e:	428a      	cmp	r2, r1
 8003060:	d050      	beq.n	8003104 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003062:	6899      	ldr	r1, [r3, #8]
 8003064:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8003068:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800306a:	6899      	ldr	r1, [r3, #8]
 800306c:	430a      	orrs	r2, r1
 800306e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003070:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003072:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003074:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003078:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800307e:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003080:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8003082:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003084:	f022 0202 	bic.w	r2, r2, #2
 8003088:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8003090:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003092:	6a22      	ldr	r2, [r4, #32]
 8003094:	2a00      	cmp	r2, #0
 8003096:	d03d      	beq.n	8003114 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003098:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800309a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800309c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030a0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80030a8:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	3901      	subs	r1, #1
 80030ae:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80030b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80030b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80030b6:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80030b8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80030bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80030be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c0:	3901      	subs	r1, #1
 80030c2:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80030c6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030c8:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80030ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80030d8:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030da:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030dc:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030e4:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80030e6:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030e8:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80030ec:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80030ee:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80030f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030f2:	f023 0303 	bic.w	r3, r3, #3
 80030f6:	f043 0301 	orr.w	r3, r3, #1
 80030fa:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80030fc:	2300      	movs	r3, #0
 80030fe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8003102:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800310a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003112:	e7b4      	b.n	800307e <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800311a:	e7ca      	b.n	80030b2 <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 800311c:	2001      	movs	r0, #1
 800311e:	e7ed      	b.n	80030fc <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 8003120:	2001      	movs	r0, #1
}
 8003122:	bd10      	pop	{r4, pc}
 8003124:	40012300 	.word	0x40012300
 8003128:	0f000001 	.word	0x0f000001

0800312c <HAL_ADC_ConfigChannel>:
{
 800312c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 800312e:	2300      	movs	r3, #0
 8003130:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8003132:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003136:	2b01      	cmp	r3, #1
 8003138:	f000 8083 	beq.w	8003242 <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 800313c:	680d      	ldr	r5, [r1, #0]
 800313e:	6804      	ldr	r4, [r0, #0]
 8003140:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 8003142:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003144:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8003146:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 800314a:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 800314c:	d92a      	bls.n	80031a4 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800314e:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8003152:	68e7      	ldr	r7, [r4, #12]
 8003154:	3b1e      	subs	r3, #30
 8003156:	f04f 0e07 	mov.w	lr, #7
 800315a:	fa0e fe03 	lsl.w	lr, lr, r3
 800315e:	ea27 070e 	bic.w	r7, r7, lr
 8003162:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003164:	68e7      	ldr	r7, [r4, #12]
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	433b      	orrs	r3, r7
 800316c:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 800316e:	684a      	ldr	r2, [r1, #4]
 8003170:	2a06      	cmp	r2, #6
 8003172:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8003176:	d825      	bhi.n	80031c4 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003178:	4413      	add	r3, r2
 800317a:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800317c:	1f59      	subs	r1, r3, #5
 800317e:	231f      	movs	r3, #31
 8003180:	408b      	lsls	r3, r1
 8003182:	ea27 0303 	bic.w	r3, r7, r3
 8003186:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003188:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800318a:	fa06 f101 	lsl.w	r1, r6, r1
 800318e:	4311      	orrs	r1, r2
 8003190:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003192:	4b2d      	ldr	r3, [pc, #180]	; (8003248 <HAL_ADC_ConfigChannel+0x11c>)
 8003194:	429c      	cmp	r4, r3
 8003196:	d034      	beq.n	8003202 <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 8003198:	2300      	movs	r3, #0
 800319a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800319e:	4618      	mov	r0, r3
}
 80031a0:	b003      	add	sp, #12
 80031a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031a4:	6927      	ldr	r7, [r4, #16]
 80031a6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80031aa:	f04f 0e07 	mov.w	lr, #7
 80031ae:	fa0e fe03 	lsl.w	lr, lr, r3
 80031b2:	ea27 070e 	bic.w	r7, r7, lr
 80031b6:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031b8:	6927      	ldr	r7, [r4, #16]
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	433b      	orrs	r3, r7
 80031c0:	6123      	str	r3, [r4, #16]
 80031c2:	e7d4      	b.n	800316e <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 80031c4:	2a0c      	cmp	r2, #12
 80031c6:	d80e      	bhi.n	80031e6 <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80031c8:	4413      	add	r3, r2
 80031ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80031cc:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 80031d0:	231f      	movs	r3, #31
 80031d2:	4093      	lsls	r3, r2
 80031d4:	ea21 0303 	bic.w	r3, r1, r3
 80031d8:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80031da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80031dc:	fa06 f202 	lsl.w	r2, r6, r2
 80031e0:	431a      	orrs	r2, r3
 80031e2:	6322      	str	r2, [r4, #48]	; 0x30
 80031e4:	e7d5      	b.n	8003192 <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80031e6:	4413      	add	r3, r2
 80031e8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80031ea:	3b41      	subs	r3, #65	; 0x41
 80031ec:	221f      	movs	r2, #31
 80031ee:	409a      	lsls	r2, r3
 80031f0:	ea21 0202 	bic.w	r2, r1, r2
 80031f4:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80031f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80031f8:	fa06 f103 	lsl.w	r1, r6, r3
 80031fc:	4311      	orrs	r1, r2
 80031fe:	62e1      	str	r1, [r4, #44]	; 0x2c
 8003200:	e7c7      	b.n	8003192 <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003202:	2d12      	cmp	r5, #18
 8003204:	d104      	bne.n	8003210 <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003206:	4a11      	ldr	r2, [pc, #68]	; (800324c <HAL_ADC_ConfigChannel+0x120>)
 8003208:	6853      	ldr	r3, [r2, #4]
 800320a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800320e:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003210:	f1a5 0311 	sub.w	r3, r5, #17
 8003214:	2b01      	cmp	r3, #1
 8003216:	d8bf      	bhi.n	8003198 <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003218:	4a0c      	ldr	r2, [pc, #48]	; (800324c <HAL_ADC_ConfigChannel+0x120>)
 800321a:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800321c:	2d12      	cmp	r5, #18
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800321e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003222:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003224:	d1b8      	bne.n	8003198 <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003226:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <HAL_ADC_ConfigChannel+0x124>)
 8003228:	4a0a      	ldr	r2, [pc, #40]	; (8003254 <HAL_ADC_ConfigChannel+0x128>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	fbb3 f2f2 	udiv	r2, r3, r2
 8003230:	230a      	movs	r3, #10
 8003232:	4353      	muls	r3, r2
        counter--;
 8003234:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8003236:	9b01      	ldr	r3, [sp, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0ad      	beq.n	8003198 <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 800323c:	9b01      	ldr	r3, [sp, #4]
 800323e:	3b01      	subs	r3, #1
 8003240:	e7f8      	b.n	8003234 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 8003242:	2002      	movs	r0, #2
 8003244:	e7ac      	b.n	80031a0 <HAL_ADC_ConfigChannel+0x74>
 8003246:	bf00      	nop
 8003248:	40012000 	.word	0x40012000
 800324c:	40012300 	.word	0x40012300
 8003250:	2000013c 	.word	0x2000013c
 8003254:	000f4240 	.word	0x000f4240

08003258 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003258:	4a07      	ldr	r2, [pc, #28]	; (8003278 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800325a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800325c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003260:	041b      	lsls	r3, r3, #16
 8003262:	0c1b      	lsrs	r3, r3, #16
 8003264:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003268:	0200      	lsls	r0, r0, #8
 800326a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800326e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8003272:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8003274:	60d3      	str	r3, [r2, #12]
 8003276:	4770      	bx	lr
 8003278:	e000ed00 	.word	0xe000ed00

0800327c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800327c:	4b17      	ldr	r3, [pc, #92]	; (80032dc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800327e:	b530      	push	{r4, r5, lr}
 8003280:	68dc      	ldr	r4, [r3, #12]
 8003282:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003286:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800328a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800328c:	2b04      	cmp	r3, #4
 800328e:	bf28      	it	cs
 8003290:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003292:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003294:	f04f 0501 	mov.w	r5, #1
 8003298:	fa05 f303 	lsl.w	r3, r5, r3
 800329c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032a0:	bf8c      	ite	hi
 80032a2:	3c03      	subhi	r4, #3
 80032a4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032a6:	4019      	ands	r1, r3
 80032a8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032aa:	fa05 f404 	lsl.w	r4, r5, r4
 80032ae:	3c01      	subs	r4, #1
 80032b0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80032b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b4:	ea42 0201 	orr.w	r2, r2, r1
 80032b8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032bc:	bfaf      	iteee	ge
 80032be:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c2:	f000 000f 	andlt.w	r0, r0, #15
 80032c6:	4b06      	ldrlt	r3, [pc, #24]	; (80032e0 <HAL_NVIC_SetPriority+0x64>)
 80032c8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ca:	bfa5      	ittet	ge
 80032cc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80032d0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032d2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032d4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80032d8:	bd30      	pop	{r4, r5, pc}
 80032da:	bf00      	nop
 80032dc:	e000ed00 	.word	0xe000ed00
 80032e0:	e000ed14 	.word	0xe000ed14

080032e4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80032e4:	0942      	lsrs	r2, r0, #5
 80032e6:	2301      	movs	r3, #1
 80032e8:	f000 001f 	and.w	r0, r0, #31
 80032ec:	fa03 f000 	lsl.w	r0, r3, r0
 80032f0:	4b01      	ldr	r3, [pc, #4]	; (80032f8 <HAL_NVIC_EnableIRQ+0x14>)
 80032f2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80032f6:	4770      	bx	lr
 80032f8:	e000e100 	.word	0xe000e100

080032fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032fc:	3801      	subs	r0, #1
 80032fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003302:	d20a      	bcs.n	800331a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003304:	4b06      	ldr	r3, [pc, #24]	; (8003320 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003306:	4a07      	ldr	r2, [pc, #28]	; (8003324 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003308:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800330a:	21f0      	movs	r1, #240	; 0xf0
 800330c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003310:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003312:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003314:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800331a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	e000e010 	.word	0xe000e010
 8003324:	e000ed00 	.word	0xe000ed00

08003328 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003328:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 800332a:	4604      	mov	r4, r0
 800332c:	b168      	cbz	r0, 800334a <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800332e:	7903      	ldrb	r3, [r0, #4]
 8003330:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003334:	b913      	cbnz	r3, 800333c <HAL_DAC_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003336:	7142      	strb	r2, [r0, #5]
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003338:	f004 ff96 	bl	8008268 <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800333c:	2302      	movs	r3, #2
 800333e:	7123      	strb	r3, [r4, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003340:	2000      	movs	r0, #0
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003342:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003344:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8003346:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 8003348:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 800334a:	2001      	movs	r0, #1
}
 800334c:	bd10      	pop	{r4, pc}

0800334e <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800334e:	7943      	ldrb	r3, [r0, #5]
 8003350:	2b01      	cmp	r3, #1
{
 8003352:	b530      	push	{r4, r5, lr}
 8003354:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 8003358:	d017      	beq.n	800338a <HAL_DAC_ConfigChannel+0x3c>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800335a:	6804      	ldr	r4, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 800335c:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 800335e:	6823      	ldr	r3, [r4, #0]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003360:	f640 75fe 	movw	r5, #4094	; 0xffe
 8003364:	4095      	lsls	r5, r2
 8003366:	ea23 0505 	bic.w	r5, r3, r5
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800336a:	c90a      	ldmia	r1, {r1, r3}
 800336c:	430b      	orrs	r3, r1
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800336e:	4093      	lsls	r3, r2
 8003370:	432b      	orrs	r3, r5
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003372:	6023      	str	r3, [r4, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003374:	6823      	ldr	r3, [r4, #0]
 8003376:	21c0      	movs	r1, #192	; 0xc0
 8003378:	fa01 f202 	lsl.w	r2, r1, r2
 800337c:	ea23 0202 	bic.w	r2, r3, r2
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003380:	2301      	movs	r3, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003382:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8003384:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003386:	2300      	movs	r3, #0
 8003388:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 800338a:	4618      	mov	r0, r3
  
  /* Return function status */
  return HAL_OK;
}
 800338c:	bd30      	pop	{r4, r5, pc}
	...

08003390 <DFSDM_GetChannelFromInstance>:
{
  uint32_t channel = 0xFFU;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 8003390:	4b1d      	ldr	r3, [pc, #116]	; (8003408 <DFSDM_GetChannelFromInstance+0x78>)
 8003392:	4298      	cmp	r0, r3
 8003394:	d02a      	beq.n	80033ec <DFSDM_GetChannelFromInstance+0x5c>
 8003396:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800339a:	4298      	cmp	r0, r3
 800339c:	d026      	beq.n	80033ec <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 0U;
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 800339e:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80033a2:	4298      	cmp	r0, r3
 80033a4:	d024      	beq.n	80033f0 <DFSDM_GetChannelFromInstance+0x60>
 80033a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033aa:	4298      	cmp	r0, r3
 80033ac:	d020      	beq.n	80033f0 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 1U;
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 80033ae:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80033b2:	4298      	cmp	r0, r3
 80033b4:	d01e      	beq.n	80033f4 <DFSDM_GetChannelFromInstance+0x64>
 80033b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033ba:	4298      	cmp	r0, r3
 80033bc:	d01a      	beq.n	80033f4 <DFSDM_GetChannelFromInstance+0x64>
  {
    channel = 2U;
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 80033be:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80033c2:	4298      	cmp	r0, r3
 80033c4:	d018      	beq.n	80033f8 <DFSDM_GetChannelFromInstance+0x68>
 80033c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033ca:	4298      	cmp	r0, r3
 80033cc:	d014      	beq.n	80033f8 <DFSDM_GetChannelFromInstance+0x68>
  {
    channel = 3U;
  }
  else if(Instance == DFSDM2_Channel4)
 80033ce:	3320      	adds	r3, #32
 80033d0:	4298      	cmp	r0, r3
 80033d2:	d013      	beq.n	80033fc <DFSDM_GetChannelFromInstance+0x6c>
  {
    channel = 4U;
  }
  else if(Instance == DFSDM2_Channel5)
 80033d4:	3320      	adds	r3, #32
 80033d6:	4298      	cmp	r0, r3
 80033d8:	d012      	beq.n	8003400 <DFSDM_GetChannelFromInstance+0x70>
  {
    channel = 5U;
  }
  else if(Instance == DFSDM2_Channel6)
 80033da:	3320      	adds	r3, #32
 80033dc:	4298      	cmp	r0, r3
 80033de:	d011      	beq.n	8003404 <DFSDM_GetChannelFromInstance+0x74>
  {
    channel = 6U;
  }
  else if(Instance == DFSDM2_Channel7)
  {
    channel = 7U;
 80033e0:	3320      	adds	r3, #32
 80033e2:	4298      	cmp	r0, r3
 80033e4:	bf14      	ite	ne
 80033e6:	20ff      	movne	r0, #255	; 0xff
 80033e8:	2007      	moveq	r0, #7
 80033ea:	4770      	bx	lr
    channel = 0U;
 80033ec:	2000      	movs	r0, #0
 80033ee:	4770      	bx	lr
    channel = 1U;
 80033f0:	2001      	movs	r0, #1
 80033f2:	4770      	bx	lr
    channel = 2U;
 80033f4:	2002      	movs	r0, #2
 80033f6:	4770      	bx	lr
    channel = 3U;
 80033f8:	2003      	movs	r0, #3
 80033fa:	4770      	bx	lr
    channel = 4U;
 80033fc:	2004      	movs	r0, #4
 80033fe:	4770      	bx	lr
    channel = 5U;
 8003400:	2005      	movs	r0, #5
 8003402:	4770      	bx	lr
    channel = 6U;
 8003404:	2006      	movs	r0, #6
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
}
 8003406:	4770      	bx	lr
 8003408:	40016000 	.word	0x40016000

0800340c <HAL_DFSDM_ChannelInit>:
{
 800340c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hdfsdm_channel == NULL)
 800340e:	4604      	mov	r4, r0
 8003410:	2800      	cmp	r0, #0
 8003412:	d07f      	beq.n	8003514 <HAL_DFSDM_ChannelInit+0x108>
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 8003414:	6800      	ldr	r0, [r0, #0]
 8003416:	4d40      	ldr	r5, [pc, #256]	; (8003518 <HAL_DFSDM_ChannelInit+0x10c>)
 8003418:	42a8      	cmp	r0, r5
 800341a:	d077      	beq.n	800350c <HAL_DFSDM_ChannelInit+0x100>
 800341c:	4b3f      	ldr	r3, [pc, #252]	; (800351c <HAL_DFSDM_ChannelInit+0x110>)
 800341e:	4298      	cmp	r0, r3
 8003420:	d075      	beq.n	800350e <HAL_DFSDM_ChannelInit+0x102>
 8003422:	3320      	adds	r3, #32
 8003424:	4298      	cmp	r0, r3
 8003426:	d072      	beq.n	800350e <HAL_DFSDM_ChannelInit+0x102>
 8003428:	3320      	adds	r3, #32
 800342a:	4298      	cmp	r0, r3
    channel0Instance   = DFSDM1_Channel0;
 800342c:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8003430:	bf18      	it	ne
 8003432:	461d      	movne	r5, r3
 8003434:	4b3a      	ldr	r3, [pc, #232]	; (8003520 <HAL_DFSDM_ChannelInit+0x114>)
 8003436:	4f3b      	ldr	r7, [pc, #236]	; (8003524 <HAL_DFSDM_ChannelInit+0x118>)
 8003438:	4e3b      	ldr	r6, [pc, #236]	; (8003528 <HAL_DFSDM_ChannelInit+0x11c>)
 800343a:	bf08      	it	eq
 800343c:	461f      	moveq	r7, r3
 800343e:	4b3b      	ldr	r3, [pc, #236]	; (800352c <HAL_DFSDM_ChannelInit+0x120>)
 8003440:	bf08      	it	eq
 8003442:	461e      	moveq	r6, r3
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003444:	f7ff ffa4 	bl	8003390 <DFSDM_GetChannelFromInstance>
 8003448:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d161      	bne.n	8003514 <HAL_DFSDM_ChannelInit+0x108>
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003450:	4620      	mov	r0, r4
 8003452:	f004 ff3b 	bl	80082cc <HAL_DFSDM_ChannelMspInit>
  (*channelCounterPtr)++;
 8003456:	6833      	ldr	r3, [r6, #0]
 8003458:	3301      	adds	r3, #1
 800345a:	6033      	str	r3, [r6, #0]
  if(*channelCounterPtr == 1U)
 800345c:	6833      	ldr	r3, [r6, #0]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d118      	bne.n	8003494 <HAL_DFSDM_ChannelInit+0x88>
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003462:	682b      	ldr	r3, [r5, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003464:	68a2      	ldr	r2, [r4, #8]
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003466:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800346a:	602b      	str	r3, [r5, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800346c:	682b      	ldr	r3, [r5, #0]
 800346e:	4313      	orrs	r3, r2
 8003470:	602b      	str	r3, [r5, #0]
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003472:	682b      	ldr	r3, [r5, #0]
 8003474:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003478:	602b      	str	r3, [r5, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800347a:	7923      	ldrb	r3, [r4, #4]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d105      	bne.n	800348c <HAL_DFSDM_ChannelInit+0x80>
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 8003480:	68e2      	ldr	r2, [r4, #12]
 8003482:	682b      	ldr	r3, [r5, #0]
 8003484:	3a01      	subs	r2, #1
 8003486:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800348a:	602b      	str	r3, [r5, #0]
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800348c:	682b      	ldr	r3, [r5, #0]
 800348e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003492:	602b      	str	r3, [r5, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8003494:	6820      	ldr	r0, [r4, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8003496:	6961      	ldr	r1, [r4, #20]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8003498:	6803      	ldr	r3, [r0, #0]
 800349a:	f423 4371 	bic.w	r3, r3, #61696	; 0xf100
 800349e:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80034a0:	6923      	ldr	r3, [r4, #16]
 80034a2:	6802      	ldr	r2, [r0, #0]
 80034a4:	430b      	orrs	r3, r1
                                        hdfsdm_channel->Init.Input.DataPacking | 
 80034a6:	69a1      	ldr	r1, [r4, #24]
 80034a8:	430b      	orrs	r3, r1
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80034aa:	4313      	orrs	r3, r2
 80034ac:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80034ae:	6803      	ldr	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80034b0:	6a21      	ldr	r1, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80034b2:	f023 030f 	bic.w	r3, r3, #15
 80034b6:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80034b8:	69e3      	ldr	r3, [r4, #28]
 80034ba:	6802      	ldr	r2, [r0, #0]
 80034bc:	430b      	orrs	r3, r1
 80034be:	4313      	orrs	r3, r2
 80034c0:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80034c2:	6883      	ldr	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80034c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80034c6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80034c8:	f423 035f 	bic.w	r3, r3, #14614528	; 0xdf0000
 80034cc:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80034ce:	6883      	ldr	r3, [r0, #8]
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80034d0:	3a01      	subs	r2, #1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80034d2:	430b      	orrs	r3, r1
 80034d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80034d8:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80034da:	6843      	ldr	r3, [r0, #4]
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80034dc:	6b22      	ldr	r2, [r4, #48]	; 0x30
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80034e4:	6843      	ldr	r3, [r0, #4]
 80034e6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80034ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80034ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80034f0:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80034f2:	6803      	ldr	r3, [r0, #0]
 80034f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034f8:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80034fa:	2301      	movs	r3, #1
 80034fc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003500:	f7ff ff46 	bl	8003390 <DFSDM_GetChannelFromInstance>
 8003504:	f847 4020 	str.w	r4, [r7, r0, lsl #2]
  return HAL_OK;
 8003508:	2000      	movs	r0, #0
 800350a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    channel0Instance   = DFSDM1_Channel0;
 800350c:	4605      	mov	r5, r0
    channelHandleTable =  a_dfsdm1ChannelHandle;
 800350e:	4f04      	ldr	r7, [pc, #16]	; (8003520 <HAL_DFSDM_ChannelInit+0x114>)
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8003510:	4e06      	ldr	r6, [pc, #24]	; (800352c <HAL_DFSDM_ChannelInit+0x120>)
 8003512:	e797      	b.n	8003444 <HAL_DFSDM_ChannelInit+0x38>
    return HAL_ERROR;
 8003514:	2001      	movs	r0, #1
}
 8003516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003518:	40016000 	.word	0x40016000
 800351c:	40016020 	.word	0x40016020
 8003520:	200001c8 	.word	0x200001c8
 8003524:	200001d8 	.word	0x200001d8
 8003528:	200001fc 	.word	0x200001fc
 800352c:	200001f8 	.word	0x200001f8

08003530 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8003530:	b510      	push	{r4, lr}
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 8003532:	4604      	mov	r4, r0
 8003534:	2800      	cmp	r0, #0
 8003536:	d04a      	beq.n	80035ce <HAL_FMPI2C_Init+0x9e>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 8003538:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800353c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003540:	b91b      	cbnz	r3, 800354a <HAL_FMPI2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8003542:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 8003546:	f004 ff79 	bl	800843c <HAL_FMPI2C_MspInit>
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 800354a:	2324      	movs	r3, #36	; 0x24
 800354c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8003550:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8003552:	68e1      	ldr	r1, [r4, #12]
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	f022 0201 	bic.w	r2, r2, #1
 800355a:	601a      	str	r2, [r3, #0]
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 800355c:	6862      	ldr	r2, [r4, #4]
 800355e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003562:	611a      	str	r2, [r3, #16]
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8003564:	689a      	ldr	r2, [r3, #8]
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8003566:	2901      	cmp	r1, #1
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8003568:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800356c:	609a      	str	r2, [r3, #8]
 800356e:	68a2      	ldr	r2, [r4, #8]
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8003570:	d124      	bne.n	80035bc <HAL_FMPI2C_Init+0x8c>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 8003572:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003576:	609a      	str	r2, [r3, #8]
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 8003578:	685a      	ldr	r2, [r3, #4]
  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 800357a:	6961      	ldr	r1, [r4, #20]
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 800357c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003580:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003584:	605a      	str	r2, [r3, #4]
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8003586:	68da      	ldr	r2, [r3, #12]
 8003588:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800358c:	60da      	str	r2, [r3, #12]
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 800358e:	6922      	ldr	r2, [r4, #16]
 8003590:	430a      	orrs	r2, r1
 8003592:	69a1      	ldr	r1, [r4, #24]
 8003594:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003598:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 800359a:	6a21      	ldr	r1, [r4, #32]
 800359c:	69e2      	ldr	r2, [r4, #28]
 800359e:	430a      	orrs	r2, r1
 80035a0:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	f042 0201 	orr.w	r2, r2, #1
 80035a8:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 80035aa:	2000      	movs	r0, #0
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80035ac:	2320      	movs	r3, #32
  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 80035ae:	6460      	str	r0, [r4, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80035b0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 80035b4:	6320      	str	r0, [r4, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 80035b6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 80035ba:	bd10      	pop	{r4, pc}
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 80035bc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 80035c0:	2902      	cmp	r1, #2
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 80035c2:	609a      	str	r2, [r3, #8]
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 80035c4:	bf04      	itt	eq
 80035c6:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 80035ca:	605a      	streq	r2, [r3, #4]
 80035cc:	e7d4      	b.n	8003578 <HAL_FMPI2C_Init+0x48>
    return HAL_ERROR;
 80035ce:	2001      	movs	r0, #1
}
 80035d0:	bd10      	pop	{r4, pc}

080035d2 <HAL_FMPI2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 80035d2:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	2a20      	cmp	r2, #32
{
 80035da:	b510      	push	{r4, lr}
  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 80035dc:	d11d      	bne.n	800361a <HAL_FMPI2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 80035de:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d019      	beq.n	800361a <HAL_FMPI2CEx_ConfigAnalogFilter+0x48>

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 80035e6:	2324      	movs	r3, #36	; 0x24
 80035e8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 80035ec:	6803      	ldr	r3, [r0, #0]
 80035ee:	681c      	ldr	r4, [r3, #0]
 80035f0:	f024 0401 	bic.w	r4, r4, #1
 80035f4:	601c      	str	r4, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 80035f6:	681c      	ldr	r4, [r3, #0]
 80035f8:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80035fc:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 80035fe:	681c      	ldr	r4, [r3, #0]
 8003600:	4321      	orrs	r1, r4
 8003602:	6019      	str	r1, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8003604:	6819      	ldr	r1, [r3, #0]
 8003606:	f041 0101 	orr.w	r1, r1, #1
 800360a:	6019      	str	r1, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 800360c:	2300      	movs	r3, #0
    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 800360e:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hfmpi2c);
 8003612:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8003616:	4618      	mov	r0, r3
 8003618:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800361a:	2002      	movs	r0, #2
  }
}
 800361c:	bd10      	pop	{r4, pc}
	...

08003620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003624:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003626:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003628:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80037cc <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800362c:	4a65      	ldr	r2, [pc, #404]	; (80037c4 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800362e:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 80037d0 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003632:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003634:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8003636:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800363a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 800363c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003640:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8003644:	45b6      	cmp	lr, r6
 8003646:	f040 80aa 	bne.w	800379e <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800364a:	684c      	ldr	r4, [r1, #4]
 800364c:	f024 0710 	bic.w	r7, r4, #16
 8003650:	2f02      	cmp	r7, #2
 8003652:	d116      	bne.n	8003682 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8003654:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8003658:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800365c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8003660:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003664:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8003668:	f04f 0c0f 	mov.w	ip, #15
 800366c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8003670:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003674:	690d      	ldr	r5, [r1, #16]
 8003676:	fa05 f50b 	lsl.w	r5, r5, fp
 800367a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800367e:	f8ca 5020 	str.w	r5, [sl, #32]
 8003682:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003686:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8003688:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800368c:	fa05 f50a 	lsl.w	r5, r5, sl
 8003690:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003692:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003696:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800369a:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800369e:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036a0:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036a4:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80036a6:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036aa:	d811      	bhi.n	80036d0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80036ac:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036ae:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036b2:	68cf      	ldr	r7, [r1, #12]
 80036b4:	fa07 fc0a 	lsl.w	ip, r7, sl
 80036b8:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80036bc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80036be:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036c0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80036c4:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80036c8:	409f      	lsls	r7, r3
 80036ca:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80036ce:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80036d0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036d2:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036d4:	688f      	ldr	r7, [r1, #8]
 80036d6:	fa07 f70a 	lsl.w	r7, r7, sl
 80036da:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80036dc:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036de:	00e5      	lsls	r5, r4, #3
 80036e0:	d55d      	bpl.n	800379e <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036e2:	f04f 0b00 	mov.w	fp, #0
 80036e6:	f8cd b00c 	str.w	fp, [sp, #12]
 80036ea:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036ee:	4d36      	ldr	r5, [pc, #216]	; (80037c8 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036f0:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80036f4:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80036f8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80036fc:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8003700:	9703      	str	r7, [sp, #12]
 8003702:	9f03      	ldr	r7, [sp, #12]
 8003704:	f023 0703 	bic.w	r7, r3, #3
 8003708:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800370c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003710:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8003714:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003718:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800371c:	f04f 0e0f 	mov.w	lr, #15
 8003720:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003724:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003726:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800372a:	d03f      	beq.n	80037ac <HAL_GPIO_Init+0x18c>
 800372c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003730:	42a8      	cmp	r0, r5
 8003732:	d03d      	beq.n	80037b0 <HAL_GPIO_Init+0x190>
 8003734:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003738:	42a8      	cmp	r0, r5
 800373a:	d03b      	beq.n	80037b4 <HAL_GPIO_Init+0x194>
 800373c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003740:	42a8      	cmp	r0, r5
 8003742:	d039      	beq.n	80037b8 <HAL_GPIO_Init+0x198>
 8003744:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003748:	42a8      	cmp	r0, r5
 800374a:	d037      	beq.n	80037bc <HAL_GPIO_Init+0x19c>
 800374c:	4548      	cmp	r0, r9
 800374e:	d037      	beq.n	80037c0 <HAL_GPIO_Init+0x1a0>
 8003750:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003754:	42a8      	cmp	r0, r5
 8003756:	bf14      	ite	ne
 8003758:	2507      	movne	r5, #7
 800375a:	2506      	moveq	r5, #6
 800375c:	fa05 f50c 	lsl.w	r5, r5, ip
 8003760:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003764:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8003766:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8003768:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800376a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800376e:	bf0c      	ite	eq
 8003770:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8003772:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8003774:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8003776:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003778:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800377c:	bf0c      	ite	eq
 800377e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8003780:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8003782:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003784:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003786:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800378a:	bf0c      	ite	eq
 800378c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800378e:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8003790:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8003792:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003794:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8003796:	bf54      	ite	pl
 8003798:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800379a:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800379c:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800379e:	3301      	adds	r3, #1
 80037a0:	2b10      	cmp	r3, #16
 80037a2:	f47f af48 	bne.w	8003636 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80037a6:	b005      	add	sp, #20
 80037a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037ac:	465d      	mov	r5, fp
 80037ae:	e7d5      	b.n	800375c <HAL_GPIO_Init+0x13c>
 80037b0:	2501      	movs	r5, #1
 80037b2:	e7d3      	b.n	800375c <HAL_GPIO_Init+0x13c>
 80037b4:	2502      	movs	r5, #2
 80037b6:	e7d1      	b.n	800375c <HAL_GPIO_Init+0x13c>
 80037b8:	2503      	movs	r5, #3
 80037ba:	e7cf      	b.n	800375c <HAL_GPIO_Init+0x13c>
 80037bc:	2504      	movs	r5, #4
 80037be:	e7cd      	b.n	800375c <HAL_GPIO_Init+0x13c>
 80037c0:	2505      	movs	r5, #5
 80037c2:	e7cb      	b.n	800375c <HAL_GPIO_Init+0x13c>
 80037c4:	40013c00 	.word	0x40013c00
 80037c8:	40020000 	.word	0x40020000
 80037cc:	40023800 	.word	0x40023800
 80037d0:	40021400 	.word	0x40021400

080037d4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80037d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80037d8:	4e43      	ldr	r6, [pc, #268]	; (80038e8 <HAL_GPIO_DeInit+0x114>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80037da:	f8df 9114 	ldr.w	r9, [pc, #276]	; 80038f0 <HAL_GPIO_DeInit+0x11c>
 80037de:	f8df a114 	ldr.w	sl, [pc, #276]	; 80038f4 <HAL_GPIO_DeInit+0x120>
 80037e2:	f8df b114 	ldr.w	fp, [pc, #276]	; 80038f8 <HAL_GPIO_DeInit+0x124>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037e6:	2400      	movs	r4, #0
    ioposition = 0x01U << position;
 80037e8:	f04f 0801 	mov.w	r8, #1
 80037ec:	fa08 f204 	lsl.w	r2, r8, r4
    if(iocurrent == ioposition)
 80037f0:	ea32 0301 	bics.w	r3, r2, r1
 80037f4:	d166      	bne.n	80038c4 <HAL_GPIO_DeInit+0xf0>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037f6:	2303      	movs	r3, #3
 80037f8:	0065      	lsls	r5, r4, #1
 80037fa:	6807      	ldr	r7, [r0, #0]
 80037fc:	fa03 f505 	lsl.w	r5, r3, r5
 8003800:	43ed      	mvns	r5, r5
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003802:	fa24 fc03 	lsr.w	ip, r4, r3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003806:	402f      	ands	r7, r5
 8003808:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800380c:	6007      	str	r7, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800380e:	f8dc 7020 	ldr.w	r7, [ip, #32]
 8003812:	f004 0e07 	and.w	lr, r4, #7
 8003816:	463b      	mov	r3, r7
 8003818:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800381c:	270f      	movs	r7, #15
 800381e:	fa07 fe0e 	lsl.w	lr, r7, lr
 8003822:	ea23 0e0e 	bic.w	lr, r3, lr
 8003826:	f8cc e020 	str.w	lr, [ip, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800382a:	f8d0 e008 	ldr.w	lr, [r0, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800382e:	4b2f      	ldr	r3, [pc, #188]	; (80038ec <HAL_GPIO_DeInit+0x118>)
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003830:	ea05 0e0e 	and.w	lr, r5, lr
 8003834:	f8c0 e008 	str.w	lr, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003838:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800383c:	43d2      	mvns	r2, r2
 800383e:	ea02 0e0e 	and.w	lr, r2, lr
 8003842:	f8c0 e004 	str.w	lr, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003846:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800384a:	ea05 050e 	and.w	r5, r5, lr
 800384e:	60c5      	str	r5, [r0, #12]
 8003850:	f024 0503 	bic.w	r5, r4, #3
 8003854:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8003858:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800385c:	f004 0e03 	and.w	lr, r4, #3
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003860:	f8d5 c008 	ldr.w	ip, [r5, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003864:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8003868:	fa07 f70e 	lsl.w	r7, r7, lr
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800386c:	4298      	cmp	r0, r3
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800386e:	ea0c 0c07 	and.w	ip, ip, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003872:	d02c      	beq.n	80038ce <HAL_GPIO_DeInit+0xfa>
 8003874:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003878:	4298      	cmp	r0, r3
 800387a:	d02a      	beq.n	80038d2 <HAL_GPIO_DeInit+0xfe>
 800387c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003880:	4298      	cmp	r0, r3
 8003882:	d028      	beq.n	80038d6 <HAL_GPIO_DeInit+0x102>
 8003884:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003888:	4298      	cmp	r0, r3
 800388a:	d026      	beq.n	80038da <HAL_GPIO_DeInit+0x106>
 800388c:	4548      	cmp	r0, r9
 800388e:	d026      	beq.n	80038de <HAL_GPIO_DeInit+0x10a>
 8003890:	4550      	cmp	r0, sl
 8003892:	d026      	beq.n	80038e2 <HAL_GPIO_DeInit+0x10e>
 8003894:	4558      	cmp	r0, fp
 8003896:	bf0c      	ite	eq
 8003898:	2306      	moveq	r3, #6
 800389a:	2307      	movne	r3, #7
 800389c:	fa03 f30e 	lsl.w	r3, r3, lr
 80038a0:	459c      	cmp	ip, r3
 80038a2:	d10f      	bne.n	80038c4 <HAL_GPIO_DeInit+0xf0>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80038a4:	68ab      	ldr	r3, [r5, #8]
 80038a6:	ea23 0707 	bic.w	r7, r3, r7
 80038aa:	60af      	str	r7, [r5, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80038ac:	6833      	ldr	r3, [r6, #0]
 80038ae:	4013      	ands	r3, r2
 80038b0:	6033      	str	r3, [r6, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80038b2:	6873      	ldr	r3, [r6, #4]
 80038b4:	4013      	ands	r3, r2
 80038b6:	6073      	str	r3, [r6, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80038b8:	68b3      	ldr	r3, [r6, #8]
 80038ba:	4013      	ands	r3, r2
 80038bc:	60b3      	str	r3, [r6, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80038be:	68f3      	ldr	r3, [r6, #12]
 80038c0:	401a      	ands	r2, r3
 80038c2:	60f2      	str	r2, [r6, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038c4:	3401      	adds	r4, #1
 80038c6:	2c10      	cmp	r4, #16
 80038c8:	d190      	bne.n	80037ec <HAL_GPIO_DeInit+0x18>
      }
    }
  }
}
 80038ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80038ce:	2300      	movs	r3, #0
 80038d0:	e7e4      	b.n	800389c <HAL_GPIO_DeInit+0xc8>
 80038d2:	2301      	movs	r3, #1
 80038d4:	e7e2      	b.n	800389c <HAL_GPIO_DeInit+0xc8>
 80038d6:	2302      	movs	r3, #2
 80038d8:	e7e0      	b.n	800389c <HAL_GPIO_DeInit+0xc8>
 80038da:	2303      	movs	r3, #3
 80038dc:	e7de      	b.n	800389c <HAL_GPIO_DeInit+0xc8>
 80038de:	2304      	movs	r3, #4
 80038e0:	e7dc      	b.n	800389c <HAL_GPIO_DeInit+0xc8>
 80038e2:	2305      	movs	r3, #5
 80038e4:	e7da      	b.n	800389c <HAL_GPIO_DeInit+0xc8>
 80038e6:	bf00      	nop
 80038e8:	40013c00 	.word	0x40013c00
 80038ec:	40020000 	.word	0x40020000
 80038f0:	40021000 	.word	0x40021000
 80038f4:	40021400 	.word	0x40021400
 80038f8:	40021800 	.word	0x40021800

080038fc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038fc:	b10a      	cbz	r2, 8003902 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038fe:	6181      	str	r1, [r0, #24]
 8003900:	4770      	bx	lr
 8003902:	0409      	lsls	r1, r1, #16
 8003904:	e7fb      	b.n	80038fe <HAL_GPIO_WritePin+0x2>

08003906 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003906:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800390a:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  __HAL_LOCK(hhcd); 
 800390c:	f890 0290 	ldrb.w	r0, [r0, #656]	; 0x290
{
 8003910:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
 8003914:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 8003918:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd); 
 800391c:	2801      	cmp	r0, #1
 800391e:	d021      	beq.n	8003964 <HAL_HCD_HC_Init+0x5e>
 8003920:	2001      	movs	r0, #1
 8003922:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003926:	2028      	movs	r0, #40	; 0x28
 8003928:	fb00 4001 	mla	r0, r0, r1, r4
  hhcd->hc[ch_num].max_packet = mps;
  hhcd->hc[ch_num].ch_num = ch_num;
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7F;
 800392c:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
  hhcd->hc[ch_num].ep_is_in = ((epnum & 0x80) == 0x80);
 8003930:	09d5      	lsrs	r5, r2, #7
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003932:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 8003936:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 800393a:	f880 703f 	strb.w	r7, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7F;
 800393e:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
  hhcd->hc[ch_num].ep_is_in = ((epnum & 0x80) == 0x80);
 8003942:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
  hhcd->hc[ch_num].speed = speed;
 8003946:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
 800394a:	f8a0 e040 	strh.w	lr, [r0, #64]	; 0x40
  
  status =  USB_HC_Init(hhcd->Instance, 
 800394e:	e88d 40c0 	stmia.w	sp, {r6, r7, lr}
 8003952:	6820      	ldr	r0, [r4, #0]
 8003954:	f002 fda6 	bl	80064a4 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd); 
 8003958:	2300      	movs	r3, #0
 800395a:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
  
  return status;
}
 800395e:	b004      	add	sp, #16
 8003960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hhcd); 
 8003964:	2002      	movs	r0, #2
 8003966:	e7fa      	b.n	800395e <HAL_HCD_HC_Init+0x58>

08003968 <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  __HAL_LOCK(hhcd);   
 8003968:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 800396c:	2b01      	cmp	r3, #1
{
 800396e:	b510      	push	{r4, lr}
 8003970:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);   
 8003972:	d009      	beq.n	8003988 <HAL_HCD_HC_Halt+0x20>
 8003974:	2301      	movs	r3, #1
 8003976:	f880 3290 	strb.w	r3, [r0, #656]	; 0x290
  USB_HC_Halt(hhcd->Instance, ch_num);   
 800397a:	6800      	ldr	r0, [r0, #0]
 800397c:	f002 ff4b 	bl	8006816 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003980:	2000      	movs	r0, #0
 8003982:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  
  return status;
 8003986:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);   
 8003988:	2002      	movs	r0, #2
}
 800398a:	bd10      	pop	{r4, pc}

0800398c <HAL_HCD_Init>:
{ 
 800398c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(hhcd == NULL)
 8003990:	4607      	mov	r7, r0
{ 
 8003992:	b08a      	sub	sp, #40	; 0x28
  if(hhcd == NULL)
 8003994:	b3a0      	cbz	r0, 8003a00 <HAL_HCD_Init+0x74>
  hhcd->State = HAL_HCD_STATE_BUSY;
 8003996:	2303      	movs	r3, #3
  __HAL_HCD_DISABLE(hhcd);
 8003998:	463c      	mov	r4, r7
  hhcd->State = HAL_HCD_STATE_BUSY;
 800399a:	f880 3291 	strb.w	r3, [r0, #657]	; 0x291
  HAL_HCD_MspInit(hhcd);
 800399e:	f004 ffc9 	bl	8008934 <HAL_HCD_MspInit>
  __HAL_HCD_DISABLE(hhcd);
 80039a2:	f854 0b10 	ldr.w	r0, [r4], #16
 80039a6:	f002 fc51 	bl	800624c <USB_DisableGlobalInt>
  USB_CoreInit(hhcd->Instance, hhcd->Init);
 80039aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039ac:	466d      	mov	r5, sp
 80039ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80039bc:	f107 0804 	add.w	r8, r7, #4
  USB_SetCurrentMode(hhcd->Instance , USB_OTG_HOST_MODE);
 80039c0:	463e      	mov	r6, r7
  USB_CoreInit(hhcd->Instance, hhcd->Init);
 80039c2:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80039c6:	6838      	ldr	r0, [r7, #0]
 80039c8:	f002 fc00 	bl	80061cc <USB_CoreInit>
  USB_SetCurrentMode(hhcd->Instance , USB_OTG_HOST_MODE);
 80039cc:	f856 0b10 	ldr.w	r0, [r6], #16
 80039d0:	2101      	movs	r1, #1
 80039d2:	f002 fc41 	bl	8006258 <USB_SetCurrentMode>
  USB_HostInit(hhcd->Instance, hhcd->Init);
 80039d6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80039d8:	466d      	mov	r5, sp
 80039da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039dc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80039de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80039e8:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80039ec:	6838      	ldr	r0, [r7, #0]
 80039ee:	f002 fcaf 	bl	8006350 <USB_HostInit>
  hhcd->State= HAL_HCD_STATE_READY;
 80039f2:	2301      	movs	r3, #1
 80039f4:	f887 3291 	strb.w	r3, [r7, #657]	; 0x291
  return HAL_OK;
 80039f8:	2000      	movs	r0, #0
}
 80039fa:	b00a      	add	sp, #40	; 0x28
 80039fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8003a00:	2001      	movs	r0, #1
 8003a02:	e7fa      	b.n	80039fa <HAL_HCD_Init+0x6e>

08003a04 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,  
                                           uint8_t token, 
                                           uint8_t* pbuff, 
                                           uint16_t length,
                                           uint8_t do_ping) 
{
 8003a04:	b5f0      	push	{r4, r5, r6, r7, lr}
  hhcd->hc[ch_num].ep_is_in = direction;
 8003a06:	2628      	movs	r6, #40	; 0x28
 8003a08:	fb06 0601 	mla	r6, r6, r1, r0
{
 8003a0c:	f89d e014 	ldrb.w	lr, [sp, #20]
 8003a10:	9d06      	ldr	r5, [sp, #24]
 8003a12:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8003a16:	f89d 7020 	ldrb.w	r7, [sp, #32]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003a1a:	f886 203b 	strb.w	r2, [r6, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type; 
 8003a1e:	f886 303f 	strb.w	r3, [r6, #63]	; 0x3f
  
  if(token == 0)
 8003a22:	f1be 0f00 	cmp.w	lr, #0
 8003a26:	d10e      	bne.n	8003a46 <HAL_HCD_HC_SubmitRequest+0x42>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003a28:	f04f 0e03 	mov.w	lr, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }
  
  /* Manage Data Toggle */
  switch(ep_type)
 8003a2c:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003a2e:	f886 e042 	strb.w	lr, [r6, #66]	; 0x42
  switch(ep_type)
 8003a32:	d04a      	beq.n	8003aca <HAL_HCD_HC_SubmitRequest+0xc6>
 8003a34:	4573      	cmp	r3, lr
 8003a36:	d055      	beq.n	8003ae4 <HAL_HCD_HC_SubmitRequest+0xe0>
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d12f      	bne.n	8003a9c <HAL_HCD_HC_SubmitRequest+0x98>
      }
    }
    break;
    
  case EP_TYPE_ISOC: 
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a3c:	2328      	movs	r3, #40	; 0x28
 8003a3e:	fb03 0301 	mla	r3, r3, r1, r0
 8003a42:	2200      	movs	r2, #0
 8003a44:	e055      	b.n	8003af2 <HAL_HCD_HC_SubmitRequest+0xee>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a46:	f04f 0c02 	mov.w	ip, #2
 8003a4a:	f886 c042 	strb.w	ip, [r6, #66]	; 0x42
  switch(ep_type)
 8003a4e:	2b03      	cmp	r3, #3
 8003a50:	d824      	bhi.n	8003a9c <HAL_HCD_HC_SubmitRequest+0x98>
 8003a52:	a601      	add	r6, pc, #4	; (adr r6, 8003a58 <HAL_HCD_HC_SubmitRequest+0x54>)
 8003a54:	f856 f023 	ldr.w	pc, [r6, r3, lsl #2]
 8003a58:	08003a69 	.word	0x08003a69
 8003a5c:	08003a3d 	.word	0x08003a3d
 8003a60:	08003acb 	.word	0x08003acb
 8003a64:	08003ae5 	.word	0x08003ae5
    if((token == 1) && (direction == 0)) /*send data */
 8003a68:	f1be 0f01 	cmp.w	lr, #1
 8003a6c:	d116      	bne.n	8003a9c <HAL_HCD_HC_SubmitRequest+0x98>
 8003a6e:	b9aa      	cbnz	r2, 8003a9c <HAL_HCD_HC_SubmitRequest+0x98>
      if (length == 0)
 8003a70:	b924      	cbnz	r4, 8003a7c <HAL_HCD_HC_SubmitRequest+0x78>
        hhcd->hc[ch_num].toggle_out = 1;
 8003a72:	2328      	movs	r3, #40	; 0x28
 8003a74:	fb03 0301 	mla	r3, r3, r1, r0
 8003a78:	f883 e051 	strb.w	lr, [r3, #81]	; 0x51
      if (hhcd->hc[ch_num].toggle_out == 0)
 8003a7c:	2328      	movs	r3, #40	; 0x28
 8003a7e:	fb03 0201 	mla	r2, r3, r1, r0
 8003a82:	f892 6051 	ldrb.w	r6, [r2, #81]	; 0x51
 8003a86:	b9f6      	cbnz	r6, 8003ac6 <HAL_HCD_HC_SubmitRequest+0xc2>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a88:	f882 6042 	strb.w	r6, [r2, #66]	; 0x42
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 8003a8c:	fb03 0301 	mla	r3, r3, r1, r0
 8003a90:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8003a94:	2a02      	cmp	r2, #2
 8003a96:	d001      	beq.n	8003a9c <HAL_HCD_HC_SubmitRequest+0x98>
        hhcd->hc[ch_num].do_ping = do_ping;
 8003a98:	f883 703d 	strb.w	r7, [r3, #61]	; 0x3d
    break;  
  }
  
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003a9c:	2628      	movs	r6, #40	; 0x28
 8003a9e:	fb06 0301 	mla	r3, r6, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;  
 8003aa2:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_count = 0;
  hhcd->hc[ch_num].ch_num = ch_num;
 8003aa4:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;
  
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8003aa8:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003aaa:	645d      	str	r5, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 8003aac:	649c      	str	r4, [r3, #72]	; 0x48
  hhcd->hc[ch_num].urb_state = URB_IDLE;  
 8003aae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0;
 8003ab2:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 8003ab4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8003ab8:	3138      	adds	r1, #56	; 0x38
 8003aba:	7c02      	ldrb	r2, [r0, #16]
 8003abc:	6800      	ldr	r0, [r0, #0]
}
 8003abe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8003ac2:	f002 bd5b 	b.w	800657c <USB_HC_StartXfer>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ac6:	2602      	movs	r6, #2
 8003ac8:	e7de      	b.n	8003a88 <HAL_HCD_HC_SubmitRequest+0x84>
 8003aca:	2328      	movs	r3, #40	; 0x28
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8003acc:	fb03 0301 	mla	r3, r3, r1, r0
    if(direction == 0)
 8003ad0:	b992      	cbnz	r2, 8003af8 <HAL_HCD_HC_SubmitRequest+0xf4>
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8003ad2:	f893 6051 	ldrb.w	r6, [r3, #81]	; 0x51
 8003ad6:	b91e      	cbnz	r6, 8003ae0 <HAL_HCD_HC_SubmitRequest+0xdc>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 8003adc:	2328      	movs	r3, #40	; 0x28
 8003ade:	e7d5      	b.n	8003a8c <HAL_HCD_HC_SubmitRequest+0x88>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	e7f9      	b.n	8003ad8 <HAL_HCD_HC_SubmitRequest+0xd4>
 8003ae4:	2328      	movs	r3, #40	; 0x28
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8003ae6:	fb03 0301 	mla	r3, r3, r1, r0
    if(direction == 0)
 8003aea:	b92a      	cbnz	r2, 8003af8 <HAL_HCD_HC_SubmitRequest+0xf4>
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8003aec:	f893 6051 	ldrb.w	r6, [r3, #81]	; 0x51
 8003af0:	b936      	cbnz	r6, 8003b00 <HAL_HCD_HC_SubmitRequest+0xfc>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003af2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    break;  
 8003af6:	e7d1      	b.n	8003a9c <HAL_HCD_HC_SubmitRequest+0x98>
      if( hhcd->hc[ch_num].toggle_in == 0)
 8003af8:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8003afc:	2a00      	cmp	r2, #0
 8003afe:	d0f8      	beq.n	8003af2 <HAL_HCD_HC_SubmitRequest+0xee>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b00:	2202      	movs	r2, #2
 8003b02:	e7f6      	b.n	8003af2 <HAL_HCD_HC_SubmitRequest+0xee>

08003b04 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b08:	6806      	ldr	r6, [r0, #0]
{
 8003b0a:	b087      	sub	sp, #28
 8003b0c:	4604      	mov	r4, r0
  uint32_t i = 0U , interrupt = 0U;
  
  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003b0e:	4630      	mov	r0, r6
 8003b10:	f002 fc02 	bl	8006318 <USB_GetMode>
 8003b14:	2801      	cmp	r0, #1
 8003b16:	f040 80ec 	bne.w	8003cf2 <HAL_HCD_IRQHandler+0x1ee>
  {
    /* Avoid spurious interrupt */
    if(__HAL_HCD_IS_INVALID_INTERRUPT(hhcd)) 
 8003b1a:	6820      	ldr	r0, [r4, #0]
 8003b1c:	f002 fbf8 	bl	8006310 <USB_ReadInterrupts>
 8003b20:	2800      	cmp	r0, #0
 8003b22:	f000 80e6 	beq.w	8003cf2 <HAL_HCD_IRQHandler+0x1ee>
    {
      return;
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b26:	6820      	ldr	r0, [r4, #0]
 8003b28:	f002 fbf2 	bl	8006310 <USB_ReadInterrupts>
 8003b2c:	0281      	lsls	r1, r0, #10
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b2e:	bf48      	it	mi
 8003b30:	6823      	ldrmi	r3, [r4, #0]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b32:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b34:	bf44      	itt	mi
 8003b36:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
 8003b3a:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b3c:	f002 fbe8 	bl	8006310 <USB_ReadInterrupts>
 8003b40:	02c2      	lsls	r2, r0, #11
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b42:	bf48      	it	mi
 8003b44:	6823      	ldrmi	r3, [r4, #0]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003b46:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b48:	bf44      	itt	mi
 8003b4a:	f44f 1280 	movmi.w	r2, #1048576	; 0x100000
 8003b4e:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003b50:	f002 fbde 	bl	8006310 <USB_ReadInterrupts>
 8003b54:	0143      	lsls	r3, r0, #5
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003b56:	bf48      	it	mi
 8003b58:	6823      	ldrmi	r3, [r4, #0]
    }   
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003b5a:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003b5c:	bf44      	itt	mi
 8003b5e:	f04f 6280 	movmi.w	r2, #67108864	; 0x4000000
 8003b62:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003b64:	f002 fbd4 	bl	8006310 <USB_ReadInterrupts>
 8003b68:	0787      	lsls	r7, r0, #30
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003b6a:	bf48      	it	mi
 8003b6c:	6823      	ldrmi	r3, [r4, #0]
    }     
    
    /* Handle Host Disconnect Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003b6e:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003b70:	bf44      	itt	mi
 8003b72:	2202      	movmi	r2, #2
 8003b74:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003b76:	f002 fbcb 	bl	8006310 <USB_ReadInterrupts>
 8003b7a:	0085      	lsls	r5, r0, #2
 8003b7c:	d510      	bpl.n	8003ba0 <HAL_HCD_IRQHandler+0x9c>
    {
      
      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8003b7e:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8003b82:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003b86:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
      
      /* Handle Host Port Interrupts */
      HAL_HCD_Disconnect_Callback(hhcd);
 8003b8a:	4620      	mov	r0, r4
 8003b8c:	f004 ff16 	bl	80089bc <HAL_HCD_Disconnect_Callback>
      USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8003b90:	2101      	movs	r1, #1
 8003b92:	6820      	ldr	r0, [r4, #0]
 8003b94:	f002 fc46 	bl	8006424 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003b98:	6823      	ldr	r3, [r4, #0]
 8003b9a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003b9e:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Host Port Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003ba0:	6820      	ldr	r0, [r4, #0]
 8003ba2:	f002 fbb5 	bl	8006310 <USB_ReadInterrupts>
 8003ba6:	01c0      	lsls	r0, r0, #7
 8003ba8:	d540      	bpl.n	8003c2c <HAL_HCD_IRQHandler+0x128>
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler  (HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;  
 8003baa:	6825      	ldr	r5, [r4, #0]
  __IO uint32_t hprt0, hprt0_dup;
  
  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003bac:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8003bb0:	9304      	str	r3, [sp, #16]
  hprt0_dup = USBx_HPRT0;
 8003bb2:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8003bb6:	9305      	str	r3, [sp, #20]
  
  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8003bb8:	9b05      	ldr	r3, [sp, #20]
 8003bba:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003bbe:	9305      	str	r3, [sp, #20]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  /* Check whether Port Connect Detected */
  if((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003bc0:	9b04      	ldr	r3, [sp, #16]
 8003bc2:	0799      	lsls	r1, r3, #30
 8003bc4:	d50d      	bpl.n	8003be2 <HAL_HCD_IRQHandler+0xde>
  {  
    if((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003bc6:	9b04      	ldr	r3, [sp, #16]
 8003bc8:	07da      	lsls	r2, r3, #31
 8003bca:	d506      	bpl.n	8003bda <HAL_HCD_IRQHandler+0xd6>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003bcc:	69ab      	ldr	r3, [r5, #24]
 8003bce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003bd2:	61ab      	str	r3, [r5, #24]
      HAL_HCD_Connect_Callback(hhcd);
 8003bd4:	4620      	mov	r0, r4
 8003bd6:	f004 feed 	bl	80089b4 <HAL_HCD_Connect_Callback>
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003bda:	9b05      	ldr	r3, [sp, #20]
 8003bdc:	f043 0302 	orr.w	r3, r3, #2
 8003be0:	9305      	str	r3, [sp, #20]
    
  }
  
  /* Check whether Port Enable Changed */
  if((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003be2:	9b04      	ldr	r3, [sp, #16]
 8003be4:	071b      	lsls	r3, r3, #28
 8003be6:	d517      	bpl.n	8003c18 <HAL_HCD_IRQHandler+0x114>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003be8:	9b05      	ldr	r3, [sp, #20]
 8003bea:	f043 0308 	orr.w	r3, r3, #8
 8003bee:	9305      	str	r3, [sp, #20]
    
    if((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003bf0:	9b04      	ldr	r3, [sp, #16]
 8003bf2:	075f      	lsls	r7, r3, #29
 8003bf4:	f140 8088 	bpl.w	8003d08 <HAL_HCD_IRQHandler+0x204>
    {    
      if(hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003bf8:	69a1      	ldr	r1, [r4, #24]
 8003bfa:	2902      	cmp	r1, #2
 8003bfc:	d17c      	bne.n	8003cf8 <HAL_HCD_IRQHandler+0x1f4>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17U))
 8003bfe:	9b04      	ldr	r3, [sp, #16]
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_6_MHZ );
        }
        else
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8003c00:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17U))
 8003c02:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003c06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8003c0a:	bf18      	it	ne
 8003c0c:	2101      	movne	r1, #1
 8003c0e:	f002 fc09 	bl	8006424 <USB_InitFSLSPClkSel>
        {
          USBx_HOST->HFIR = 60000U;
        }
      }
      
      HAL_HCD_Connect_Callback(hhcd);
 8003c12:	4620      	mov	r0, r4
 8003c14:	f004 fece 	bl	80089b4 <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
    }    
  }
  
  /* Check for an over current */
  if((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003c18:	9b04      	ldr	r3, [sp, #16]
 8003c1a:	0698      	lsls	r0, r3, #26
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003c1c:	bf42      	ittt	mi
 8003c1e:	9b05      	ldrmi	r3, [sp, #20]
 8003c20:	f043 0320 	orrmi.w	r3, r3, #32
 8003c24:	9305      	strmi	r3, [sp, #20]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003c26:	9b05      	ldr	r3, [sp, #20]
 8003c28:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003c2c:	6820      	ldr	r0, [r4, #0]
 8003c2e:	f002 fb6f 	bl	8006310 <USB_ReadInterrupts>
 8003c32:	0701      	lsls	r1, r0, #28
 8003c34:	d505      	bpl.n	8003c42 <HAL_HCD_IRQHandler+0x13e>
      HAL_HCD_SOF_Callback(hhcd);
 8003c36:	4620      	mov	r0, r4
 8003c38:	f004 feb8 	bl	80089ac <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003c3c:	6823      	ldr	r3, [r4, #0]
 8003c3e:	2208      	movs	r2, #8
 8003c40:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003c42:	6820      	ldr	r0, [r4, #0]
 8003c44:	f002 fb64 	bl	8006310 <USB_ReadInterrupts>
 8003c48:	0182      	lsls	r2, r0, #6
 8003c4a:	d514      	bpl.n	8003c76 <HAL_HCD_IRQHandler+0x172>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003c4c:	6820      	ldr	r0, [r4, #0]
 8003c4e:	f002 fdd3 	bl	80067f8 <USB_HC_ReadInterrupt>
 8003c52:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 8003c56:	9002      	str	r0, [sp, #8]
 8003c58:	9301      	str	r3, [sp, #4]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003c5a:	f04f 0b00 	mov.w	fp, #0
        if (interrupt & (1U << i))
 8003c5e:	f04f 0a01 	mov.w	sl, #1
    if(hhcd->hc[chnum].state == HC_XFRC)
 8003c62:	2728      	movs	r7, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003c64:	f04f 0902 	mov.w	r9, #2
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003c68:	68a3      	ldr	r3, [r4, #8]
 8003c6a:	459b      	cmp	fp, r3
 8003c6c:	d358      	bcc.n	8003d20 <HAL_HCD_IRQHandler+0x21c>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003c6e:	6823      	ldr	r3, [r4, #0]
 8003c70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c74:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL))
 8003c76:	6820      	ldr	r0, [r4, #0]
 8003c78:	f002 fb4a 	bl	8006310 <USB_ReadInterrupts>
 8003c7c:	06c3      	lsls	r3, r0, #27
 8003c7e:	d538      	bpl.n	8003cf2 <HAL_HCD_IRQHandler+0x1ee>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c80:	6825      	ldr	r5, [r4, #0]
 8003c82:	69ab      	ldr	r3, [r5, #24]
 8003c84:	f023 0310 	bic.w	r3, r3, #16
 8003c88:	61ab      	str	r3, [r5, #24]
  temp = hhcd->Instance->GRXSTSP;
 8003c8a:	6a2f      	ldr	r7, [r5, #32]
  pktsts = (temp &  USB_OTG_GRXSTSP_PKTSTS) >> 17U;
 8003c8c:	f3c7 4343 	ubfx	r3, r7, #17, #4
  switch (pktsts)
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d129      	bne.n	8003ce8 <HAL_HCD_IRQHandler+0x1e4>
  pktcnt = (temp &  USB_OTG_GRXSTSP_BCNT) >> 4U;
 8003c94:	f3c7 180a 	ubfx	r8, r7, #4, #11
    if ((pktcnt > 0U) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 8003c98:	f1b8 0f00 	cmp.w	r8, #0
 8003c9c:	d024      	beq.n	8003ce8 <HAL_HCD_IRQHandler+0x1e4>
  channelnum = temp &  USB_OTG_GRXSTSP_EPNUM;  
 8003c9e:	f007 070f 	and.w	r7, r7, #15
    if ((pktcnt > 0U) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 8003ca2:	2628      	movs	r6, #40	; 0x28
 8003ca4:	fb06 4607 	mla	r6, r6, r7, r4
 8003ca8:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8003caa:	b1e9      	cbz	r1, 8003ce8 <HAL_HCD_IRQHandler+0x1e4>
      USB_ReadPacket(hhcd->Instance, hhcd->hc[channelnum].xfer_buff, pktcnt);
 8003cac:	4642      	mov	r2, r8
 8003cae:	4628      	mov	r0, r5
 8003cb0:	f002 fb20 	bl	80062f4 <USB_ReadPacket>
      hhcd->hc[channelnum].xfer_buff += pktcnt;           
 8003cb4:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8003cb6:	4443      	add	r3, r8
 8003cb8:	6473      	str	r3, [r6, #68]	; 0x44
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8003cba:	f505 65a0 	add.w	r5, r5, #1280	; 0x500
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 8003cbe:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8003cc0:	eb05 1547 	add.w	r5, r5, r7, lsl #5
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 8003cc4:	4443      	add	r3, r8
 8003cc6:	64f3      	str	r3, [r6, #76]	; 0x4c
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8003cc8:	692a      	ldr	r2, [r5, #16]
 8003cca:	4bb7      	ldr	r3, [pc, #732]	; (8003fa8 <HAL_HCD_IRQHandler+0x4a4>)
 8003ccc:	4013      	ands	r3, r2
 8003cce:	b15b      	cbz	r3, 8003ce8 <HAL_HCD_IRQHandler+0x1e4>
        tmpreg = USBx_HC(channelnum)->HCCHAR;
 8003cd0:	682b      	ldr	r3, [r5, #0]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003cd2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003cd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(channelnum)->HCCHAR = tmpreg;
 8003cda:	602b      	str	r3, [r5, #0]
        hhcd->hc[channelnum].toggle_in ^= 1;
 8003cdc:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
 8003ce0:	f083 0301 	eor.w	r3, r3, #1
 8003ce4:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ce8:	6822      	ldr	r2, [r4, #0]
 8003cea:	6993      	ldr	r3, [r2, #24]
 8003cec:	f043 0310 	orr.w	r3, r3, #16
 8003cf0:	6193      	str	r3, [r2, #24]
}
 8003cf2:	b007      	add	sp, #28
 8003cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(hhcd->Init.speed == HCD_SPEED_FULL)
 8003cf8:	68e3      	ldr	r3, [r4, #12]
 8003cfa:	2b03      	cmp	r3, #3
          USBx_HOST->HFIR = 60000U;
 8003cfc:	bf04      	itt	eq
 8003cfe:	f64e 2260 	movweq	r2, #60000	; 0xea60
 8003d02:	f8c5 2404 	streq.w	r2, [r5, #1028]	; 0x404
 8003d06:	e784      	b.n	8003c12 <HAL_HCD_IRQHandler+0x10e>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8003d08:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
 8003d0c:	6822      	ldr	r2, [r4, #0]
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8003d0e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003d12:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
 8003d16:	6993      	ldr	r3, [r2, #24]
 8003d18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d1c:	6193      	str	r3, [r2, #24]
 8003d1e:	e77b      	b.n	8003c18 <HAL_HCD_IRQHandler+0x114>
        if (interrupt & (1U << i))
 8003d20:	9a02      	ldr	r2, [sp, #8]
 8003d22:	fa0a f30b 	lsl.w	r3, sl, fp
 8003d26:	4213      	tst	r3, r2
 8003d28:	f000 8086 	beq.w	8003e38 <HAL_HCD_IRQHandler+0x334>
          if ((USBx_HC(i)->HCCHAR) &  USB_OTG_HCCHAR_EPDIR)
 8003d2c:	9b01      	ldr	r3, [sp, #4]
 8003d2e:	6820      	ldr	r0, [r4, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003d36:	fa5f f58b 	uxtb.w	r5, fp
 8003d3a:	f000 810a 	beq.w	8003f52 <HAL_HCD_IRQHandler+0x44e>
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8003d3e:	016a      	lsls	r2, r5, #5
 8003d40:	f500 68a0 	add.w	r8, r0, #1280	; 0x500
 8003d44:	eb02 0608 	add.w	r6, r2, r8
 8003d48:	68b1      	ldr	r1, [r6, #8]
 8003d4a:	074b      	lsls	r3, r1, #29
 8003d4c:	d513      	bpl.n	8003d76 <HAL_HCD_IRQHandler+0x272>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003d4e:	2104      	movs	r1, #4
 8003d50:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8003d52:	68f1      	ldr	r1, [r6, #12]
 8003d54:	f041 0102 	orr.w	r1, r1, #2
 8003d58:	60f1      	str	r1, [r6, #12]
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 8003d5a:	68b1      	ldr	r1, [r6, #8]
 8003d5c:	058b      	lsls	r3, r1, #22
 8003d5e:	d53d      	bpl.n	8003ddc <HAL_HCD_IRQHandler+0x2d8>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8003d60:	68f3      	ldr	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8003d62:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8003d64:	f043 0302 	orr.w	r3, r3, #2
 8003d68:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8003d6a:	4629      	mov	r1, r5
    USB_HC_Halt(hhcd->Instance, chnum);  
 8003d6c:	f002 fd53 	bl	8006816 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003d70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d74:	e12b      	b.n	8003fce <HAL_HCD_IRQHandler+0x4ca>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8003d76:	68b1      	ldr	r1, [r6, #8]
 8003d78:	0689      	lsls	r1, r1, #26
 8003d7a:	d502      	bpl.n	8003d82 <HAL_HCD_IRQHandler+0x27e>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003d7c:	2120      	movs	r1, #32
 8003d7e:	60b1      	str	r1, [r6, #8]
 8003d80:	e7eb      	b.n	8003d5a <HAL_HCD_IRQHandler+0x256>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 8003d82:	68b1      	ldr	r1, [r6, #8]
 8003d84:	070b      	lsls	r3, r1, #28
 8003d86:	d513      	bpl.n	8003db0 <HAL_HCD_IRQHandler+0x2ac>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8003d88:	68f1      	ldr	r1, [r6, #12]
 8003d8a:	9203      	str	r2, [sp, #12]
 8003d8c:	f041 0102 	orr.w	r1, r1, #2
 8003d90:	60f1      	str	r1, [r6, #12]
    hhcd->hc[chnum].state = HC_STALL;
 8003d92:	fb07 4105 	mla	r1, r7, r5, r4
 8003d96:	f04f 0e05 	mov.w	lr, #5
 8003d9a:	f881 e05d 	strb.w	lr, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003d9e:	2110      	movs	r1, #16
 8003da0:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);    
 8003da2:	2108      	movs	r1, #8
 8003da4:	60b1      	str	r1, [r6, #8]
    USB_HC_Halt(hhcd->Instance, chnum);    
 8003da6:	4629      	mov	r1, r5
 8003da8:	f002 fd35 	bl	8006816 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003dac:	9a03      	ldr	r2, [sp, #12]
 8003dae:	e7d4      	b.n	8003d5a <HAL_HCD_IRQHandler+0x256>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8003db0:	68b1      	ldr	r1, [r6, #8]
 8003db2:	0549      	lsls	r1, r1, #21
 8003db4:	d5d1      	bpl.n	8003d5a <HAL_HCD_IRQHandler+0x256>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8003db6:	68f1      	ldr	r1, [r6, #12]
 8003db8:	9203      	str	r2, [sp, #12]
 8003dba:	f041 0102 	orr.w	r1, r1, #2
 8003dbe:	60f1      	str	r1, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8003dc0:	4629      	mov	r1, r5
 8003dc2:	f002 fd28 	bl	8006816 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);    
 8003dc6:	2110      	movs	r1, #16
 8003dc8:	60b1      	str	r1, [r6, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003dca:	fb07 4105 	mla	r1, r7, r5, r4
 8003dce:	2008      	movs	r0, #8
 8003dd0:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003dd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003dd8:	60b1      	str	r1, [r6, #8]
 8003dda:	e7e7      	b.n	8003dac <HAL_HCD_IRQHandler+0x2a8>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8003ddc:	68b1      	ldr	r1, [r6, #8]
 8003dde:	07c8      	lsls	r0, r1, #31
 8003de0:	d540      	bpl.n	8003e64 <HAL_HCD_IRQHandler+0x360>
    if (hhcd->Init.dma_enable)
 8003de2:	6921      	ldr	r1, [r4, #16]
 8003de4:	b149      	cbz	r1, 8003dfa <HAL_HCD_IRQHandler+0x2f6>
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8003de6:	fb07 4e05 	mla	lr, r7, r5, r4
        (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003dea:	6930      	ldr	r0, [r6, #16]
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8003dec:	f8de 1048 	ldr.w	r1, [lr, #72]	; 0x48
        (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003df0:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8003df4:	1a09      	subs	r1, r1, r0
 8003df6:	f8ce 104c 	str.w	r1, [lr, #76]	; 0x4c
    hhcd->hc[chnum].state = HC_XFRC;
 8003dfa:	fb07 4105 	mla	r1, r7, r5, r4
    hhcd->hc[chnum].ErrCnt = 0U;
 8003dfe:	2000      	movs	r0, #0
 8003e00:	6588      	str	r0, [r1, #88]	; 0x58
    hhcd->hc[chnum].state = HC_XFRC;
 8003e02:	f881 a05d 	strb.w	sl, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003e06:	f8c6 a008 	str.w	sl, [r6, #8]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8003e0a:	f891 003f 	ldrb.w	r0, [r1, #63]	; 0x3f
 8003e0e:	f010 0ffd 	tst.w	r0, #253	; 0xfd
 8003e12:	d117      	bne.n	8003e44 <HAL_HCD_IRQHandler+0x340>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8003e14:	68f3      	ldr	r3, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8003e16:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8003e18:	f043 0302 	orr.w	r3, r3, #2
 8003e1c:	60f3      	str	r3, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8003e1e:	4629      	mov	r1, r5
 8003e20:	f002 fcf9 	bl	8006816 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003e24:	2310      	movs	r3, #16
 8003e26:	60b3      	str	r3, [r6, #8]
    hhcd->hc[chnum].toggle_in ^= 1U;
 8003e28:	fb07 4505 	mla	r5, r7, r5, r4
 8003e2c:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 8003e30:	f083 0301 	eor.w	r3, r3, #1
 8003e34:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
 8003e38:	9b01      	ldr	r3, [sp, #4]
 8003e3a:	3320      	adds	r3, #32
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003e3c:	f10b 0b01 	add.w	fp, fp, #1
 8003e40:	9301      	str	r3, [sp, #4]
 8003e42:	e711      	b.n	8003c68 <HAL_HCD_IRQHandler+0x164>
    else if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003e44:	2803      	cmp	r0, #3
 8003e46:	d1ef      	bne.n	8003e28 <HAL_HCD_IRQHandler+0x324>
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003e48:	f852 0008 	ldr.w	r0, [r2, r8]
 8003e4c:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8003e50:	f842 0008 	str.w	r0, [r2, r8]
      hhcd->hc[chnum].urb_state = URB_DONE; 
 8003e54:	f881 a05c 	strb.w	sl, [r1, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003e58:	2201      	movs	r2, #1
 8003e5a:	4629      	mov	r1, r5
 8003e5c:	4620      	mov	r0, r4
 8003e5e:	f004 fdb1 	bl	80089c4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003e62:	e7e1      	b.n	8003e28 <HAL_HCD_IRQHandler+0x324>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 8003e64:	68b1      	ldr	r1, [r6, #8]
 8003e66:	0789      	lsls	r1, r1, #30
 8003e68:	d535      	bpl.n	8003ed6 <HAL_HCD_IRQHandler+0x3d2>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8003e6a:	68f1      	ldr	r1, [r6, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8003e6c:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8003e70:	f021 0102 	bic.w	r1, r1, #2
 8003e74:	60f1      	str	r1, [r6, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8003e76:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 8003e7a:	2901      	cmp	r1, #1
 8003e7c:	d10c      	bne.n	8003e98 <HAL_HCD_IRQHandler+0x394>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003e7e:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
 8003e82:	fb07 4305 	mla	r3, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003e86:	f8c6 9008 	str.w	r9, [r6, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
 8003e8a:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8003e8e:	4629      	mov	r1, r5
 8003e90:	4620      	mov	r0, r4
 8003e92:	f004 fd97 	bl	80089c4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003e96:	e7cf      	b.n	8003e38 <HAL_HCD_IRQHandler+0x334>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 8003e98:	2905      	cmp	r1, #5
 8003e9a:	d0f0      	beq.n	8003e7e <HAL_HCD_IRQHandler+0x37a>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003e9c:	2906      	cmp	r1, #6
 8003e9e:	d001      	beq.n	8003ea4 <HAL_HCD_IRQHandler+0x3a0>
 8003ea0:	2908      	cmp	r1, #8
 8003ea2:	d1ee      	bne.n	8003e82 <HAL_HCD_IRQHandler+0x37e>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 8003ea4:	fb07 4105 	mla	r1, r7, r5, r4
 8003ea8:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8003eaa:	2803      	cmp	r0, #3
 8003eac:	f100 0301 	add.w	r3, r0, #1
        hhcd->hc[chnum].ErrCnt = 0U;
 8003eb0:	bf88      	it	hi
 8003eb2:	2000      	movhi	r0, #0
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 8003eb4:	658b      	str	r3, [r1, #88]	; 0x58
        hhcd->hc[chnum].ErrCnt = 0U;
 8003eb6:	bf83      	ittte	hi
 8003eb8:	6588      	strhi	r0, [r1, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003eba:	2004      	movhi	r0, #4
 8003ebc:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ec0:	f881 905c 	strbls.w	r9, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8003ec4:	f852 1008 	ldr.w	r1, [r2, r8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ec8:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ecc:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8003ed0:	f842 1008 	str.w	r1, [r2, r8]
 8003ed4:	e7d5      	b.n	8003e82 <HAL_HCD_IRQHandler+0x37e>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8003ed6:	68b1      	ldr	r1, [r6, #8]
 8003ed8:	060b      	lsls	r3, r1, #24
 8003eda:	d511      	bpl.n	8003f00 <HAL_HCD_IRQHandler+0x3fc>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8003edc:	68f3      	ldr	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);     
 8003ede:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8003ee0:	f043 0302 	orr.w	r3, r3, #2
 8003ee4:	60f3      	str	r3, [r6, #12]
    hhcd->hc[chnum].ErrCnt++;
 8003ee6:	fb07 4305 	mla	r3, r7, r5, r4
    USB_HC_Halt(hhcd->Instance, chnum);     
 8003eea:	4629      	mov	r1, r5
    hhcd->hc[chnum].ErrCnt++;
 8003eec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003eee:	3201      	adds	r2, #1
 8003ef0:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[chnum].state = HC_XACTERR;
 8003ef2:	2206      	movs	r2, #6
 8003ef4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    USB_HC_Halt(hhcd->Instance, chnum);     
 8003ef8:	f002 fc8d 	bl	8006816 <USB_HC_Halt>
     __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003efc:	2380      	movs	r3, #128	; 0x80
 8003efe:	e066      	b.n	8003fce <HAL_HCD_IRQHandler+0x4ca>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8003f00:	68b1      	ldr	r1, [r6, #8]
 8003f02:	06c8      	lsls	r0, r1, #27
 8003f04:	d598      	bpl.n	8003e38 <HAL_HCD_IRQHandler+0x334>
    if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003f06:	fb07 4105 	mla	r1, r7, r5, r4
 8003f0a:	f891 103f 	ldrb.w	r1, [r1, #63]	; 0x3f
 8003f0e:	2903      	cmp	r1, #3
 8003f10:	d109      	bne.n	8003f26 <HAL_HCD_IRQHandler+0x422>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8003f12:	68f1      	ldr	r1, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum);  
 8003f14:	6820      	ldr	r0, [r4, #0]
 8003f16:	9203      	str	r2, [sp, #12]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8003f18:	f041 0102 	orr.w	r1, r1, #2
 8003f1c:	60f1      	str	r1, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum);  
 8003f1e:	4629      	mov	r1, r5
 8003f20:	f002 fc79 	bl	8006816 <USB_HC_Halt>
 8003f24:	9a03      	ldr	r2, [sp, #12]
    hhcd->hc[chnum].state = HC_NAK;
 8003f26:	fb07 4505 	mla	r5, r7, r5, r4
 8003f2a:	2103      	movs	r1, #3
 8003f2c:	f885 105d 	strb.w	r1, [r5, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003f30:	2110      	movs	r1, #16
 8003f32:	60b1      	str	r1, [r6, #8]
    if  ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8003f34:	f895 103f 	ldrb.w	r1, [r5, #63]	; 0x3f
 8003f38:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 8003f3c:	f47f af7c 	bne.w	8003e38 <HAL_HCD_IRQHandler+0x334>
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8003f40:	f852 1008 	ldr.w	r1, [r2, r8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f44:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f48:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8003f4c:	f842 1008 	str.w	r1, [r2, r8]
 8003f50:	e772      	b.n	8003e38 <HAL_HCD_IRQHandler+0x334>
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8003f52:	f500 66a0 	add.w	r6, r0, #1280	; 0x500
 8003f56:	eb06 1645 	add.w	r6, r6, r5, lsl #5
 8003f5a:	68b3      	ldr	r3, [r6, #8]
 8003f5c:	0759      	lsls	r1, r3, #29
 8003f5e:	d506      	bpl.n	8003f6e <HAL_HCD_IRQHandler+0x46a>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003f60:	2304      	movs	r3, #4
 8003f62:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8003f64:	68f3      	ldr	r3, [r6, #12]
 8003f66:	f043 0302 	orr.w	r3, r3, #2
 8003f6a:	60f3      	str	r3, [r6, #12]
 8003f6c:	e764      	b.n	8003e38 <HAL_HCD_IRQHandler+0x334>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8003f6e:	68b3      	ldr	r3, [r6, #8]
 8003f70:	f013 0320 	ands.w	r3, r3, #32
 8003f74:	d01a      	beq.n	8003fac <HAL_HCD_IRQHandler+0x4a8>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003f76:	2320      	movs	r3, #32
 8003f78:	60b3      	str	r3, [r6, #8]
    if( hhcd->hc[chnum].do_ping == 1U)
 8003f7a:	fb07 4305 	mla	r3, r7, r5, r4
 8003f7e:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8003f82:	2a01      	cmp	r2, #1
 8003f84:	f47f af58 	bne.w	8003e38 <HAL_HCD_IRQHandler+0x334>
      hhcd->hc[chnum].state = HC_NYET;     
 8003f88:	2204      	movs	r2, #4
 8003f8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8003f8e:	68f2      	ldr	r2, [r6, #12]
      hhcd->hc[chnum].state = HC_NYET;     
 8003f90:	9303      	str	r3, [sp, #12]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8003f92:	f042 0202 	orr.w	r2, r2, #2
 8003f96:	60f2      	str	r2, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8003f98:	4629      	mov	r1, r5
 8003f9a:	f002 fc3c 	bl	8006816 <USB_HC_Halt>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003f9e:	9b03      	ldr	r3, [sp, #12]
 8003fa0:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
 8003fa4:	e748      	b.n	8003e38 <HAL_HCD_IRQHandler+0x334>
 8003fa6:	bf00      	nop
 8003fa8:	1ff80000 	.word	0x1ff80000
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NYET)
 8003fac:	68b2      	ldr	r2, [r6, #8]
 8003fae:	0652      	lsls	r2, r2, #25
 8003fb0:	d50f      	bpl.n	8003fd2 <HAL_HCD_IRQHandler+0x4ce>
    hhcd->hc[chnum].state = HC_NYET;
 8003fb2:	fb07 4205 	mla	r2, r7, r5, r4
 8003fb6:	2104      	movs	r1, #4
    hhcd->hc[chnum].ErrCnt= 0U;    
 8003fb8:	6593      	str	r3, [r2, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8003fba:	68f3      	ldr	r3, [r6, #12]
    hhcd->hc[chnum].state = HC_NYET;
 8003fbc:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8003fc0:	f043 0302 	orr.w	r3, r3, #2
 8003fc4:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8003fc6:	4629      	mov	r1, r5
 8003fc8:	f002 fc25 	bl	8006816 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003fcc:	2340      	movs	r3, #64	; 0x40
 8003fce:	60b3      	str	r3, [r6, #8]
 8003fd0:	e732      	b.n	8003e38 <HAL_HCD_IRQHandler+0x334>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 8003fd2:	68b2      	ldr	r2, [r6, #8]
 8003fd4:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 8003fd8:	d005      	beq.n	8003fe6 <HAL_HCD_IRQHandler+0x4e2>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8003fda:	68f3      	ldr	r3, [r6, #12]
 8003fdc:	f043 0302 	orr.w	r3, r3, #2
 8003fe0:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8003fe2:	4629      	mov	r1, r5
 8003fe4:	e6c2      	b.n	8003d6c <HAL_HCD_IRQHandler+0x268>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8003fe6:	68b3      	ldr	r3, [r6, #8]
 8003fe8:	07d9      	lsls	r1, r3, #31
 8003fea:	d510      	bpl.n	800400e <HAL_HCD_IRQHandler+0x50a>
      hhcd->hc[chnum].ErrCnt = 0U;  
 8003fec:	fb07 4305 	mla	r3, r7, r5, r4
    USB_HC_Halt(hhcd->Instance, chnum);   
 8003ff0:	4629      	mov	r1, r5
      hhcd->hc[chnum].ErrCnt = 0U;  
 8003ff2:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8003ff4:	68f2      	ldr	r2, [r6, #12]
      hhcd->hc[chnum].ErrCnt = 0U;  
 8003ff6:	9303      	str	r3, [sp, #12]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8003ff8:	f042 0202 	orr.w	r2, r2, #2
 8003ffc:	60f2      	str	r2, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8003ffe:	f002 fc0a 	bl	8006816 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XFRC;
 8004002:	9b03      	ldr	r3, [sp, #12]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004004:	f8c6 a008 	str.w	sl, [r6, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004008:	f883 a05d 	strb.w	sl, [r3, #93]	; 0x5d
 800400c:	e714      	b.n	8003e38 <HAL_HCD_IRQHandler+0x334>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 800400e:	68b3      	ldr	r3, [r6, #8]
 8004010:	071a      	lsls	r2, r3, #28
 8004012:	d50e      	bpl.n	8004032 <HAL_HCD_IRQHandler+0x52e>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);  
 8004014:	2308      	movs	r3, #8
 8004016:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8004018:	68f3      	ldr	r3, [r6, #12]
 800401a:	f043 0302 	orr.w	r3, r3, #2
 800401e:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8004020:	4629      	mov	r1, r5
 8004022:	f002 fbf8 	bl	8006816 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_STALL;    
 8004026:	fb07 4505 	mla	r5, r7, r5, r4
 800402a:	2305      	movs	r3, #5
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800402c:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 8004030:	e702      	b.n	8003e38 <HAL_HCD_IRQHandler+0x334>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8004032:	68b3      	ldr	r3, [r6, #8]
 8004034:	06db      	lsls	r3, r3, #27
 8004036:	d511      	bpl.n	800405c <HAL_HCD_IRQHandler+0x558>
    hhcd->hc[chnum].ErrCnt = 0U;  
 8004038:	fb07 4305 	mla	r3, r7, r5, r4
 800403c:	2200      	movs	r2, #0
 800403e:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8004040:	68f2      	ldr	r2, [r6, #12]
    hhcd->hc[chnum].ErrCnt = 0U;  
 8004042:	9303      	str	r3, [sp, #12]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8004044:	f042 0202 	orr.w	r2, r2, #2
 8004048:	60f2      	str	r2, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 800404a:	4629      	mov	r1, r5
 800404c:	f002 fbe3 	bl	8006816 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_NAK;
 8004050:	9b03      	ldr	r3, [sp, #12]
 8004052:	2203      	movs	r2, #3
 8004054:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004058:	2310      	movs	r3, #16
 800405a:	e7b8      	b.n	8003fce <HAL_HCD_IRQHandler+0x4ca>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 800405c:	68b3      	ldr	r3, [r6, #8]
 800405e:	0619      	lsls	r1, r3, #24
 8004060:	d50c      	bpl.n	800407c <HAL_HCD_IRQHandler+0x578>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8004062:	68f3      	ldr	r3, [r6, #12]
 8004064:	f043 0302 	orr.w	r3, r3, #2
 8004068:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 800406a:	4629      	mov	r1, r5
    hhcd->hc[chnum].state = HC_XACTERR;  
 800406c:	fb07 4505 	mla	r5, r7, r5, r4
    USB_HC_Halt(hhcd->Instance, chnum);      
 8004070:	f002 fbd1 	bl	8006816 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XACTERR;  
 8004074:	2306      	movs	r3, #6
 8004076:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 800407a:	e73f      	b.n	8003efc <HAL_HCD_IRQHandler+0x3f8>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 800407c:	68b1      	ldr	r1, [r6, #8]
 800407e:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8004082:	d00f      	beq.n	80040a4 <HAL_HCD_IRQHandler+0x5a0>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8004084:	68f3      	ldr	r3, [r6, #12]
 8004086:	f043 0302 	orr.w	r3, r3, #2
 800408a:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 800408c:	4629      	mov	r1, r5
 800408e:	f002 fbc2 	bl	8006816 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004092:	2310      	movs	r3, #16
 8004094:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);    
 8004096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800409a:	60b3      	str	r3, [r6, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800409c:	fb07 4505 	mla	r5, r7, r5, r4
 80040a0:	2308      	movs	r3, #8
 80040a2:	e7c3      	b.n	800402c <HAL_HCD_IRQHandler+0x528>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 80040a4:	68b3      	ldr	r3, [r6, #8]
 80040a6:	079a      	lsls	r2, r3, #30
 80040a8:	f57f aec6 	bpl.w	8003e38 <HAL_HCD_IRQHandler+0x334>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 80040ac:	68f3      	ldr	r3, [r6, #12]
 80040ae:	f023 0302 	bic.w	r3, r3, #2
 80040b2:	60f3      	str	r3, [r6, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 80040b4:	fb07 4305 	mla	r3, r7, r5, r4
 80040b8:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 80040bc:	2a01      	cmp	r2, #1
 80040be:	d10d      	bne.n	80040dc <HAL_HCD_IRQHandler+0x5d8>
      hhcd->hc[chnum].urb_state  = URB_DONE;
 80040c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)
 80040c4:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 80040c8:	2a02      	cmp	r2, #2
 80040ca:	f47f aeda 	bne.w	8003e82 <HAL_HCD_IRQHandler+0x37e>
        hhcd->hc[chnum].toggle_out ^= 1U; 
 80040ce:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 80040d2:	f082 0201 	eor.w	r2, r2, #1
 80040d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80040da:	e6d2      	b.n	8003e82 <HAL_HCD_IRQHandler+0x37e>
    else if (hhcd->hc[chnum].state == HC_NAK) 
 80040dc:	2a03      	cmp	r2, #3
 80040de:	d102      	bne.n	80040e6 <HAL_HCD_IRQHandler+0x5e2>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80040e0:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
 80040e4:	e6cd      	b.n	8003e82 <HAL_HCD_IRQHandler+0x37e>
    else if (hhcd->hc[chnum].state == HC_NYET) 
 80040e6:	2a04      	cmp	r2, #4
 80040e8:	d104      	bne.n	80040f4 <HAL_HCD_IRQHandler+0x5f0>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80040ea:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
      hhcd->hc[chnum].do_ping = 0U;
 80040ee:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
 80040f2:	e6c6      	b.n	8003e82 <HAL_HCD_IRQHandler+0x37e>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 80040f4:	2a05      	cmp	r2, #5
 80040f6:	d102      	bne.n	80040fe <HAL_HCD_IRQHandler+0x5fa>
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80040f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80040fc:	e6c1      	b.n	8003e82 <HAL_HCD_IRQHandler+0x37e>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 80040fe:	2a06      	cmp	r2, #6
 8004100:	d002      	beq.n	8004108 <HAL_HCD_IRQHandler+0x604>
 8004102:	2a08      	cmp	r2, #8
 8004104:	f47f aebd 	bne.w	8003e82 <HAL_HCD_IRQHandler+0x37e>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 8004108:	fb07 4305 	mla	r3, r7, r5, r4
 800410c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800410e:	1c51      	adds	r1, r2, #1
 8004110:	2a03      	cmp	r2, #3
 8004112:	6599      	str	r1, [r3, #88]	; 0x58
 8004114:	d9e4      	bls.n	80040e0 <HAL_HCD_IRQHandler+0x5dc>
        hhcd->hc[chnum].ErrCnt = 0U;
 8004116:	2200      	movs	r2, #0
 8004118:	659a      	str	r2, [r3, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800411a:	2204      	movs	r2, #4
 800411c:	e7ec      	b.n	80040f8 <HAL_HCD_IRQHandler+0x5f4>
 800411e:	bf00      	nop

08004120 <HAL_HCD_Start>:
{ 
 8004120:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd); 
 8004122:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 8004126:	2b01      	cmp	r3, #1
{ 
 8004128:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd); 
 800412a:	d00d      	beq.n	8004148 <HAL_HCD_Start+0x28>
 800412c:	2501      	movs	r5, #1
 800412e:	f880 5290 	strb.w	r5, [r0, #656]	; 0x290
  __HAL_HCD_ENABLE(hhcd);
 8004132:	6800      	ldr	r0, [r0, #0]
 8004134:	f002 f884 	bl	8006240 <USB_EnableGlobalInt>
  USB_DriveVbus(hhcd->Instance, 1U);  
 8004138:	4629      	mov	r1, r5
 800413a:	6820      	ldr	r0, [r4, #0]
 800413c:	f002 f98f 	bl	800645e <USB_DriveVbus>
  __HAL_UNLOCK(hhcd); 
 8004140:	2000      	movs	r0, #0
 8004142:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  return HAL_OK;
 8004146:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd); 
 8004148:	2002      	movs	r0, #2
}
 800414a:	bd38      	pop	{r3, r4, r5, pc}

0800414c <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd); 
 800414c:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 8004150:	2b01      	cmp	r3, #1
{ 
 8004152:	b510      	push	{r4, lr}
 8004154:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd); 
 8004156:	d009      	beq.n	800416c <HAL_HCD_Stop+0x20>
 8004158:	2301      	movs	r3, #1
 800415a:	f880 3290 	strb.w	r3, [r0, #656]	; 0x290
  USB_StopHost(hhcd->Instance);
 800415e:	6800      	ldr	r0, [r0, #0]
 8004160:	f002 fc7e 	bl	8006a60 <USB_StopHost>
  __HAL_UNLOCK(hhcd); 
 8004164:	2000      	movs	r0, #0
 8004166:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  return HAL_OK;
 800416a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd); 
 800416c:	2002      	movs	r0, #2
}
 800416e:	bd10      	pop	{r4, pc}

08004170 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8004170:	2328      	movs	r3, #40	; 0x28
 8004172:	fb03 0101 	mla	r1, r3, r1, r0
}
 8004176:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 800417a:	4770      	bx	lr

0800417c <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count; 
 800417c:	2328      	movs	r3, #40	; 0x28
 800417e:	fb03 0101 	mla	r1, r3, r1, r0
}
 8004182:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 8004184:	4770      	bx	lr

08004186 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004186:	6800      	ldr	r0, [r0, #0]
 8004188:	f002 b987 	b.w	800649a <USB_GetCurrentFrame>

0800418c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800418c:	6802      	ldr	r2, [r0, #0]
 800418e:	6953      	ldr	r3, [r2, #20]
 8004190:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8004194:	d00d      	beq.n	80041b2 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004196:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800419a:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800419c:	2304      	movs	r3, #4
 800419e:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 80041a0:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80041a2:	2300      	movs	r3, #0
 80041a4:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041a6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 80041aa:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 80041ae:	2001      	movs	r0, #1
 80041b0:	4770      	bx	lr
  }
  return HAL_OK;
 80041b2:	4618      	mov	r0, r3
}
 80041b4:	4770      	bx	lr

080041b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80041b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041ba:	4604      	mov	r4, r0
 80041bc:	4617      	mov	r7, r2
 80041be:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041c0:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80041c4:	b28e      	uxth	r6, r1
 80041c6:	6825      	ldr	r5, [r4, #0]
 80041c8:	f1b8 0f01 	cmp.w	r8, #1
 80041cc:	bf0c      	ite	eq
 80041ce:	696b      	ldreq	r3, [r5, #20]
 80041d0:	69ab      	ldrne	r3, [r5, #24]
 80041d2:	ea36 0303 	bics.w	r3, r6, r3
 80041d6:	bf14      	ite	ne
 80041d8:	2001      	movne	r0, #1
 80041da:	2000      	moveq	r0, #0
 80041dc:	b908      	cbnz	r0, 80041e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 80041de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041e2:	696b      	ldr	r3, [r5, #20]
 80041e4:	055a      	lsls	r2, r3, #21
 80041e6:	d512      	bpl.n	800420e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80041e8:	682b      	ldr	r3, [r5, #0]
 80041ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041ee:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041f0:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80041f4:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80041f6:	2304      	movs	r3, #4
 80041f8:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80041fa:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 80041fc:	2300      	movs	r3, #0
 80041fe:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8004200:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8004204:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8004208:	2001      	movs	r0, #1
 800420a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 800420e:	1c7b      	adds	r3, r7, #1
 8004210:	d0d9      	beq.n	80041c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8004212:	b94f      	cbnz	r7, 8004228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004214:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8004216:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8004218:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800421a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800421e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8004222:	2003      	movs	r0, #3
 8004224:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8004228:	f7fe fec2 	bl	8002fb0 <HAL_GetTick>
 800422c:	eba0 0009 	sub.w	r0, r0, r9
 8004230:	4287      	cmp	r7, r0
 8004232:	d2c8      	bcs.n	80041c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8004234:	e7ee      	b.n	8004214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08004236 <I2C_WaitOnFlagUntilTimeout>:
{
 8004236:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800423a:	9e08      	ldr	r6, [sp, #32]
 800423c:	4604      	mov	r4, r0
 800423e:	4690      	mov	r8, r2
 8004240:	461f      	mov	r7, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8004242:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8004246:	b28d      	uxth	r5, r1
 8004248:	6823      	ldr	r3, [r4, #0]
 800424a:	f1b9 0f01 	cmp.w	r9, #1
 800424e:	bf0c      	ite	eq
 8004250:	695b      	ldreq	r3, [r3, #20]
 8004252:	699b      	ldrne	r3, [r3, #24]
 8004254:	ea35 0303 	bics.w	r3, r5, r3
 8004258:	bf0c      	ite	eq
 800425a:	2301      	moveq	r3, #1
 800425c:	2300      	movne	r3, #0
 800425e:	4543      	cmp	r3, r8
 8004260:	d002      	beq.n	8004268 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8004262:	2000      	movs	r0, #0
}
 8004264:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8004268:	1c7b      	adds	r3, r7, #1
 800426a:	d0ed      	beq.n	8004248 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800426c:	b95f      	cbnz	r7, 8004286 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 800426e:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8004270:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8004272:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8004274:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8004278:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800427c:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800427e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8004286:	f7fe fe93 	bl	8002fb0 <HAL_GetTick>
 800428a:	1b80      	subs	r0, r0, r6
 800428c:	4287      	cmp	r7, r0
 800428e:	d2db      	bcs.n	8004248 <I2C_WaitOnFlagUntilTimeout+0x12>
 8004290:	e7ed      	b.n	800426e <I2C_WaitOnFlagUntilTimeout+0x38>

08004292 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8004292:	b570      	push	{r4, r5, r6, lr}
 8004294:	4604      	mov	r4, r0
 8004296:	460d      	mov	r5, r1
 8004298:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800429a:	6823      	ldr	r3, [r4, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	061b      	lsls	r3, r3, #24
 80042a0:	d501      	bpl.n	80042a6 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 80042a2:	2000      	movs	r0, #0
 80042a4:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042a6:	4620      	mov	r0, r4
 80042a8:	f7ff ff70 	bl	800418c <I2C_IsAcknowledgeFailed>
 80042ac:	b9a8      	cbnz	r0, 80042da <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80042ae:	1c6a      	adds	r2, r5, #1
 80042b0:	d0f3      	beq.n	800429a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80042b2:	b965      	cbnz	r5, 80042ce <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042b6:	f043 0320 	orr.w	r3, r3, #32
 80042ba:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80042bc:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80042be:	2300      	movs	r3, #0
 80042c0:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80042c2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80042c6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80042ca:	2003      	movs	r0, #3
 80042cc:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80042ce:	f7fe fe6f 	bl	8002fb0 <HAL_GetTick>
 80042d2:	1b80      	subs	r0, r0, r6
 80042d4:	4285      	cmp	r5, r0
 80042d6:	d2e0      	bcs.n	800429a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 80042d8:	e7ec      	b.n	80042b4 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80042da:	2001      	movs	r0, #1
}
 80042dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080042e0 <I2C_RequestMemoryWrite>:
{
 80042e0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80042e4:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80042e6:	6802      	ldr	r2, [r0, #0]
{
 80042e8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80042ea:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80042ec:	6813      	ldr	r3, [r2, #0]
 80042ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042f2:	6013      	str	r3, [r2, #0]
{
 80042f4:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042f6:	9600      	str	r6, [sp, #0]
 80042f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042fa:	2200      	movs	r2, #0
 80042fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8004300:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004302:	f7ff ff98 	bl	8004236 <I2C_WaitOnFlagUntilTimeout>
 8004306:	b968      	cbnz	r0, 8004324 <I2C_RequestMemoryWrite+0x44>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004308:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800430a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800430c:	491c      	ldr	r1, [pc, #112]	; (8004380 <I2C_RequestMemoryWrite+0xa0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800430e:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8004312:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004314:	4620      	mov	r0, r4
 8004316:	4633      	mov	r3, r6
 8004318:	f7ff ff4d 	bl	80041b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800431c:	b130      	cbz	r0, 800432c <I2C_RequestMemoryWrite+0x4c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800431e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004320:	2b04      	cmp	r3, #4
 8004322:	d018      	beq.n	8004356 <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 8004324:	2003      	movs	r0, #3
}
 8004326:	b004      	add	sp, #16
 8004328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800432c:	6823      	ldr	r3, [r4, #0]
 800432e:	9003      	str	r0, [sp, #12]
 8004330:	695a      	ldr	r2, [r3, #20]
 8004332:	9203      	str	r2, [sp, #12]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004338:	4632      	mov	r2, r6
 800433a:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800433c:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800433e:	4620      	mov	r0, r4
 8004340:	f7ff ffa7 	bl	8004292 <I2C_WaitOnTXEFlagUntilTimeout>
 8004344:	b148      	cbz	r0, 800435a <I2C_RequestMemoryWrite+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004346:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004348:	2b04      	cmp	r3, #4
 800434a:	d1eb      	bne.n	8004324 <I2C_RequestMemoryWrite+0x44>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800434c:	6822      	ldr	r2, [r4, #0]
 800434e:	6813      	ldr	r3, [r2, #0]
 8004350:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004354:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8004356:	2001      	movs	r0, #1
 8004358:	e7e5      	b.n	8004326 <I2C_RequestMemoryWrite+0x46>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800435a:	f1b8 0f01 	cmp.w	r8, #1
 800435e:	6823      	ldr	r3, [r4, #0]
 8004360:	d102      	bne.n	8004368 <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004362:	b2ed      	uxtb	r5, r5
 8004364:	611d      	str	r5, [r3, #16]
 8004366:	e7de      	b.n	8004326 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004368:	0a2a      	lsrs	r2, r5, #8
 800436a:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800436c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800436e:	4632      	mov	r2, r6
 8004370:	4620      	mov	r0, r4
 8004372:	f7ff ff8e 	bl	8004292 <I2C_WaitOnTXEFlagUntilTimeout>
 8004376:	2800      	cmp	r0, #0
 8004378:	d1e5      	bne.n	8004346 <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	e7f1      	b.n	8004362 <I2C_RequestMemoryWrite+0x82>
 800437e:	bf00      	nop
 8004380:	00010002 	.word	0x00010002

08004384 <I2C_RequestMemoryRead>:
{
 8004384:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004388:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800438a:	6803      	ldr	r3, [r0, #0]
{
 800438c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800438e:	4616      	mov	r6, r2
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004396:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800439e:	601a      	str	r2, [r3, #0]
{
 80043a0:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043a2:	9500      	str	r5, [sp, #0]
 80043a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043a6:	2200      	movs	r2, #0
 80043a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 80043ac:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043ae:	f7ff ff42 	bl	8004236 <I2C_WaitOnFlagUntilTimeout>
 80043b2:	b980      	cbnz	r0, 80043d6 <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043b4:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043b6:	492f      	ldr	r1, [pc, #188]	; (8004474 <I2C_RequestMemoryRead+0xf0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043b8:	b2ff      	uxtb	r7, r7
 80043ba:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 80043be:	611a      	str	r2, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043c0:	4620      	mov	r0, r4
 80043c2:	462b      	mov	r3, r5
 80043c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80043c6:	f7ff fef6 	bl	80041b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043ca:	b140      	cbz	r0, 80043de <I2C_RequestMemoryRead+0x5a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	d101      	bne.n	80043d6 <I2C_RequestMemoryRead+0x52>
      return HAL_ERROR;
 80043d2:	2001      	movs	r0, #1
 80043d4:	e000      	b.n	80043d8 <I2C_RequestMemoryRead+0x54>
      return HAL_TIMEOUT;
 80043d6:	2003      	movs	r0, #3
}
 80043d8:	b004      	add	sp, #16
 80043da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043de:	6823      	ldr	r3, [r4, #0]
 80043e0:	9003      	str	r0, [sp, #12]
 80043e2:	695a      	ldr	r2, [r3, #20]
 80043e4:	9203      	str	r2, [sp, #12]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ea:	462a      	mov	r2, r5
 80043ec:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ee:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043f0:	4620      	mov	r0, r4
 80043f2:	f7ff ff4e 	bl	8004292 <I2C_WaitOnTXEFlagUntilTimeout>
 80043f6:	b140      	cbz	r0, 800440a <I2C_RequestMemoryRead+0x86>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	d1eb      	bne.n	80043d6 <I2C_RequestMemoryRead+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80043fe:	6822      	ldr	r2, [r4, #0]
 8004400:	6813      	ldr	r3, [r2, #0]
 8004402:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004406:	6013      	str	r3, [r2, #0]
 8004408:	e7e3      	b.n	80043d2 <I2C_RequestMemoryRead+0x4e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800440a:	f1b8 0f01 	cmp.w	r8, #1
 800440e:	6823      	ldr	r3, [r4, #0]
 8004410:	d124      	bne.n	800445c <I2C_RequestMemoryRead+0xd8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004412:	b2f6      	uxtb	r6, r6
 8004414:	611e      	str	r6, [r3, #16]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004416:	462a      	mov	r2, r5
 8004418:	990a      	ldr	r1, [sp, #40]	; 0x28
 800441a:	4620      	mov	r0, r4
 800441c:	f7ff ff39 	bl	8004292 <I2C_WaitOnTXEFlagUntilTimeout>
 8004420:	4602      	mov	r2, r0
 8004422:	2800      	cmp	r0, #0
 8004424:	d1e8      	bne.n	80043f8 <I2C_RequestMemoryRead+0x74>
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8004426:	6821      	ldr	r1, [r4, #0]
 8004428:	680b      	ldr	r3, [r1, #0]
 800442a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800442e:	600b      	str	r3, [r1, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004430:	4620      	mov	r0, r4
 8004432:	9500      	str	r5, [sp, #0]
 8004434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004436:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800443a:	f7ff fefc 	bl	8004236 <I2C_WaitOnFlagUntilTimeout>
 800443e:	2800      	cmp	r0, #0
 8004440:	d1c9      	bne.n	80043d6 <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004442:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004444:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004446:	490b      	ldr	r1, [pc, #44]	; (8004474 <I2C_RequestMemoryRead+0xf0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004448:	f047 0701 	orr.w	r7, r7, #1
 800444c:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800444e:	4620      	mov	r0, r4
 8004450:	462b      	mov	r3, r5
 8004452:	f7ff feb0 	bl	80041b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004456:	2800      	cmp	r0, #0
 8004458:	d1b8      	bne.n	80043cc <I2C_RequestMemoryRead+0x48>
 800445a:	e7bd      	b.n	80043d8 <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800445c:	0a32      	lsrs	r2, r6, #8
 800445e:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004460:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004462:	462a      	mov	r2, r5
 8004464:	4620      	mov	r0, r4
 8004466:	f7ff ff14 	bl	8004292 <I2C_WaitOnTXEFlagUntilTimeout>
 800446a:	2800      	cmp	r0, #0
 800446c:	d1c4      	bne.n	80043f8 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800446e:	6823      	ldr	r3, [r4, #0]
 8004470:	e7cf      	b.n	8004412 <I2C_RequestMemoryRead+0x8e>
 8004472:	bf00      	nop
 8004474:	00010002 	.word	0x00010002

08004478 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8004478:	b570      	push	{r4, r5, r6, lr}
 800447a:	4604      	mov	r4, r0
 800447c:	460d      	mov	r5, r1
 800447e:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004480:	6820      	ldr	r0, [r4, #0]
 8004482:	6943      	ldr	r3, [r0, #20]
 8004484:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8004488:	d001      	beq.n	800448e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 800448a:	2000      	movs	r0, #0
}
 800448c:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800448e:	6942      	ldr	r2, [r0, #20]
 8004490:	06d2      	lsls	r2, r2, #27
 8004492:	d50b      	bpl.n	80044ac <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004494:	f06f 0210 	mvn.w	r2, #16
 8004498:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 800449a:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800449c:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800449e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 80044a2:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80044a4:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 80044a6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 80044aa:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80044ac:	b95d      	cbnz	r5, 80044c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044b0:	f043 0320 	orr.w	r3, r3, #32
 80044b4:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80044b6:	2320      	movs	r3, #32
 80044b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 80044bc:	2300      	movs	r3, #0
 80044be:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80044c2:	2003      	movs	r0, #3
 80044c4:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80044c6:	f7fe fd73 	bl	8002fb0 <HAL_GetTick>
 80044ca:	1b80      	subs	r0, r0, r6
 80044cc:	4285      	cmp	r5, r0
 80044ce:	d2d7      	bcs.n	8004480 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 80044d0:	e7ed      	b.n	80044ae <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

080044d2 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 80044d2:	b570      	push	{r4, r5, r6, lr}
 80044d4:	4604      	mov	r4, r0
 80044d6:	460d      	mov	r5, r1
 80044d8:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044da:	6823      	ldr	r3, [r4, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	075b      	lsls	r3, r3, #29
 80044e0:	d501      	bpl.n	80044e6 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80044e2:	2000      	movs	r0, #0
 80044e4:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044e6:	4620      	mov	r0, r4
 80044e8:	f7ff fe50 	bl	800418c <I2C_IsAcknowledgeFailed>
 80044ec:	b9a8      	cbnz	r0, 800451a <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80044ee:	1c6a      	adds	r2, r5, #1
 80044f0:	d0f3      	beq.n	80044da <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80044f2:	b965      	cbnz	r5, 800450e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044f6:	f043 0320 	orr.w	r3, r3, #32
 80044fa:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80044fc:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80044fe:	2300      	movs	r3, #0
 8004500:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8004502:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8004506:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800450a:	2003      	movs	r0, #3
 800450c:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800450e:	f7fe fd4f 	bl	8002fb0 <HAL_GetTick>
 8004512:	1b80      	subs	r0, r0, r6
 8004514:	4285      	cmp	r5, r0
 8004516:	d2e0      	bcs.n	80044da <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8004518:	e7ec      	b.n	80044f4 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 800451a:	2001      	movs	r0, #1
}
 800451c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004520 <HAL_I2C_Init>:
{
 8004520:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 8004522:	4604      	mov	r4, r0
 8004524:	2800      	cmp	r0, #0
 8004526:	d062      	beq.n	80045ee <HAL_I2C_Init+0xce>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8004528:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800452c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004530:	b91b      	cbnz	r3, 800453a <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8004532:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8004536:	f003 ffb9 	bl	80084ac <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 800453a:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800453c:	4e2d      	ldr	r6, [pc, #180]	; (80045f4 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 800453e:	4d2e      	ldr	r5, [pc, #184]	; (80045f8 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004540:	2324      	movs	r3, #36	; 0x24
 8004542:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8004546:	6813      	ldr	r3, [r2, #0]
 8004548:	f023 0301 	bic.w	r3, r3, #1
 800454c:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800454e:	f000 fb81 	bl	8004c54 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8004552:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8004554:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8004556:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800455a:	42b3      	cmp	r3, r6
 800455c:	bf84      	itt	hi
 800455e:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8004562:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8004564:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8004566:	bf91      	iteee	ls
 8004568:	1c69      	addls	r1, r5, #1
 800456a:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 800456e:	fbb1 f1f5 	udivhi	r1, r1, r5
 8004572:	3101      	addhi	r1, #1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8004574:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8004576:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8004578:	d821      	bhi.n	80045be <HAL_I2C_Init+0x9e>
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	fbb0 f0f3 	udiv	r0, r0, r3
 8004580:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8004584:	2b03      	cmp	r3, #3
 8004586:	bf98      	it	ls
 8004588:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800458a:	6a21      	ldr	r1, [r4, #32]
 800458c:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800458e:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004590:	430b      	orrs	r3, r1
 8004592:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8004594:	68e1      	ldr	r1, [r4, #12]
 8004596:	6923      	ldr	r3, [r4, #16]
 8004598:	430b      	orrs	r3, r1
 800459a:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 800459c:	69a1      	ldr	r1, [r4, #24]
 800459e:	6963      	ldr	r3, [r4, #20]
 80045a0:	430b      	orrs	r3, r1
 80045a2:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80045a4:	6813      	ldr	r3, [r2, #0]
 80045a6:	f043 0301 	orr.w	r3, r3, #1
 80045aa:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045ac:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80045ae:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045b0:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80045b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045b6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b8:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80045bc:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80045be:	68a1      	ldr	r1, [r4, #8]
 80045c0:	b949      	cbnz	r1, 80045d6 <HAL_I2C_Init+0xb6>
 80045c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80045c6:	fbb0 f0f3 	udiv	r0, r0, r3
 80045ca:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80045ce:	b163      	cbz	r3, 80045ea <HAL_I2C_Init+0xca>
 80045d0:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80045d4:	e7d9      	b.n	800458a <HAL_I2C_Init+0x6a>
 80045d6:	2119      	movs	r1, #25
 80045d8:	434b      	muls	r3, r1
 80045da:	fbb0 f0f3 	udiv	r0, r0, r3
 80045de:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80045e2:	b113      	cbz	r3, 80045ea <HAL_I2C_Init+0xca>
 80045e4:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 80045e8:	e7cf      	b.n	800458a <HAL_I2C_Init+0x6a>
 80045ea:	2001      	movs	r0, #1
 80045ec:	e7cd      	b.n	800458a <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 80045ee:	2001      	movs	r0, #1
}
 80045f0:	bd70      	pop	{r4, r5, r6, pc}
 80045f2:	bf00      	nop
 80045f4:	000186a0 	.word	0x000186a0
 80045f8:	000f4240 	.word	0x000f4240

080045fc <HAL_I2C_DeInit>:
{
 80045fc:	b510      	push	{r4, lr}
  if(hi2c == NULL)
 80045fe:	4604      	mov	r4, r0
 8004600:	b198      	cbz	r0, 800462a <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8004602:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004604:	2324      	movs	r3, #36	; 0x24
 8004606:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800460a:	6813      	ldr	r3, [r2, #0]
 800460c:	f023 0301 	bic.w	r3, r3, #1
 8004610:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8004612:	f003 ff85 	bl	8008520 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004616:	2000      	movs	r0, #0
 8004618:	6420      	str	r0, [r4, #64]	; 0x40
  __HAL_UNLOCK(hi2c);
 800461a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  hi2c->State         = HAL_I2C_STATE_RESET;
 800461e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004622:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004624:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8004628:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800462a:	2001      	movs	r0, #1
}
 800462c:	bd10      	pop	{r4, pc}
	...

08004630 <HAL_I2C_Mem_Write>:
{
 8004630:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004634:	4604      	mov	r4, r0
 8004636:	469a      	mov	sl, r3
 8004638:	4688      	mov	r8, r1
 800463a:	4691      	mov	r9, r2
 800463c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 800463e:	f7fe fcb7 	bl	8002fb0 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8004642:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004646:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8004648:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 800464a:	d003      	beq.n	8004654 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 800464c:	2002      	movs	r0, #2
}
 800464e:	b002      	add	sp, #8
 8004650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004654:	9000      	str	r0, [sp, #0]
 8004656:	2319      	movs	r3, #25
 8004658:	2201      	movs	r2, #1
 800465a:	493e      	ldr	r1, [pc, #248]	; (8004754 <HAL_I2C_Mem_Write+0x124>)
 800465c:	4620      	mov	r0, r4
 800465e:	f7ff fdea 	bl	8004236 <I2C_WaitOnFlagUntilTimeout>
 8004662:	2800      	cmp	r0, #0
 8004664:	d1f2      	bne.n	800464c <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8004666:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800466a:	2b01      	cmp	r3, #1
 800466c:	d0ee      	beq.n	800464c <HAL_I2C_Mem_Write+0x1c>
 800466e:	2301      	movs	r3, #1
 8004670:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004674:	6823      	ldr	r3, [r4, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800467a:	bf5e      	ittt	pl
 800467c:	681a      	ldrpl	r2, [r3, #0]
 800467e:	f042 0201 	orrpl.w	r2, r2, #1
 8004682:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800468a:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800468c:	2321      	movs	r3, #33	; 0x21
 800468e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004692:	2340      	movs	r3, #64	; 0x40
 8004694:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8004698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800469a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800469c:	2700      	movs	r7, #0
    hi2c->XferCount   = Size;
 800469e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046a2:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80046a4:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046a6:	4b2c      	ldr	r3, [pc, #176]	; (8004758 <HAL_I2C_Mem_Write+0x128>)
 80046a8:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80046aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80046ac:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046ae:	9501      	str	r5, [sp, #4]
 80046b0:	9600      	str	r6, [sp, #0]
 80046b2:	4653      	mov	r3, sl
 80046b4:	464a      	mov	r2, r9
 80046b6:	4641      	mov	r1, r8
 80046b8:	4620      	mov	r0, r4
 80046ba:	f7ff fe11 	bl	80042e0 <I2C_RequestMemoryWrite>
 80046be:	2800      	cmp	r0, #0
 80046c0:	d02a      	beq.n	8004718 <HAL_I2C_Mem_Write+0xe8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80046c4:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	d107      	bne.n	80046dc <HAL_I2C_Mem_Write+0xac>
        return HAL_ERROR;
 80046cc:	2001      	movs	r0, #1
 80046ce:	e7be      	b.n	800464e <HAL_I2C_Mem_Write+0x1e>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046d0:	f7ff fddf 	bl	8004292 <I2C_WaitOnTXEFlagUntilTimeout>
 80046d4:	b120      	cbz	r0, 80046e0 <HAL_I2C_Mem_Write+0xb0>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046d8:	2b04      	cmp	r3, #4
 80046da:	d034      	beq.n	8004746 <HAL_I2C_Mem_Write+0x116>
          return HAL_TIMEOUT;
 80046dc:	2003      	movs	r0, #3
 80046de:	e7b6      	b.n	800464e <HAL_I2C_Mem_Write+0x1e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80046e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80046e2:	6827      	ldr	r7, [r4, #0]
      hi2c->XferSize--;
 80046e4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80046e6:	1c4b      	adds	r3, r1, #1
 80046e8:	6263      	str	r3, [r4, #36]	; 0x24
 80046ea:	780b      	ldrb	r3, [r1, #0]
 80046ec:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 80046ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80046f0:	3b01      	subs	r3, #1
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80046f6:	697b      	ldr	r3, [r7, #20]
      hi2c->XferSize--;
 80046f8:	1e50      	subs	r0, r2, #1
 80046fa:	b280      	uxth	r0, r0
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80046fc:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 80046fe:	8520      	strh	r0, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004700:	d50a      	bpl.n	8004718 <HAL_I2C_Mem_Write+0xe8>
 8004702:	b148      	cbz	r0, 8004718 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8004704:	1c8b      	adds	r3, r1, #2
 8004706:	6263      	str	r3, [r4, #36]	; 0x24
 8004708:	784b      	ldrb	r3, [r1, #1]
 800470a:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 800470c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800470e:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8004710:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8004712:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8004714:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8004716:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8004718:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800471a:	462a      	mov	r2, r5
 800471c:	4631      	mov	r1, r6
 800471e:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1d5      	bne.n	80046d0 <HAL_I2C_Mem_Write+0xa0>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004724:	f7ff fed5 	bl	80044d2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004728:	2800      	cmp	r0, #0
 800472a:	d1d4      	bne.n	80046d6 <HAL_I2C_Mem_Write+0xa6>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800472c:	6822      	ldr	r2, [r4, #0]
 800472e:	6813      	ldr	r3, [r2, #0]
 8004730:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004734:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004736:	2320      	movs	r3, #32
 8004738:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800473c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004740:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8004744:	e783      	b.n	800464e <HAL_I2C_Mem_Write+0x1e>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004746:	6822      	ldr	r2, [r4, #0]
 8004748:	6813      	ldr	r3, [r2, #0]
 800474a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800474e:	6013      	str	r3, [r2, #0]
 8004750:	e7bc      	b.n	80046cc <HAL_I2C_Mem_Write+0x9c>
 8004752:	bf00      	nop
 8004754:	00100002 	.word	0x00100002
 8004758:	ffff0000 	.word	0xffff0000

0800475c <HAL_I2C_Mem_Read>:
{
 800475c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004760:	4604      	mov	r4, r0
 8004762:	b086      	sub	sp, #24
 8004764:	469a      	mov	sl, r3
 8004766:	460d      	mov	r5, r1
 8004768:	4691      	mov	r9, r2
 800476a:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 800476c:	f7fe fc20 	bl	8002fb0 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8004770:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004774:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8004776:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8004778:	d004      	beq.n	8004784 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 800477a:	2502      	movs	r5, #2
}
 800477c:	4628      	mov	r0, r5
 800477e:	b006      	add	sp, #24
 8004780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004784:	9000      	str	r0, [sp, #0]
 8004786:	2319      	movs	r3, #25
 8004788:	2201      	movs	r2, #1
 800478a:	4979      	ldr	r1, [pc, #484]	; (8004970 <HAL_I2C_Mem_Read+0x214>)
 800478c:	4620      	mov	r0, r4
 800478e:	f7ff fd52 	bl	8004236 <I2C_WaitOnFlagUntilTimeout>
 8004792:	2800      	cmp	r0, #0
 8004794:	d1f1      	bne.n	800477a <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8004796:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800479a:	2b01      	cmp	r3, #1
 800479c:	d0ed      	beq.n	800477a <HAL_I2C_Mem_Read+0x1e>
 800479e:	2301      	movs	r3, #1
 80047a0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047a4:	6823      	ldr	r3, [r4, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80047aa:	bf5e      	ittt	pl
 80047ac:	681a      	ldrpl	r2, [r3, #0]
 80047ae:	f042 0201 	orrpl.w	r2, r2, #1
 80047b2:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047ba:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047bc:	2322      	movs	r3, #34	; 0x22
 80047be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047c2:	2340      	movs	r3, #64	; 0x40
 80047c4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 80047c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047ca:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047cc:	f04f 0800 	mov.w	r8, #0
    hi2c->XferCount   = Size;
 80047d0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047d4:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80047d8:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047da:	4b66      	ldr	r3, [pc, #408]	; (8004974 <HAL_I2C_Mem_Read+0x218>)
 80047dc:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80047de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80047e0:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047e2:	4629      	mov	r1, r5
 80047e4:	9601      	str	r6, [sp, #4]
 80047e6:	9700      	str	r7, [sp, #0]
 80047e8:	4653      	mov	r3, sl
 80047ea:	464a      	mov	r2, r9
 80047ec:	4620      	mov	r0, r4
 80047ee:	f7ff fdc9 	bl	8004384 <I2C_RequestMemoryRead>
 80047f2:	4605      	mov	r5, r0
 80047f4:	b130      	cbz	r0, 8004804 <HAL_I2C_Mem_Read+0xa8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80047f8:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047fc:	2b04      	cmp	r3, #4
 80047fe:	d13a      	bne.n	8004876 <HAL_I2C_Mem_Read+0x11a>
              return HAL_ERROR;
 8004800:	2501      	movs	r5, #1
 8004802:	e7bb      	b.n	800477c <HAL_I2C_Mem_Read+0x20>
    if(hi2c->XferSize == 0U)
 8004804:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004806:	6823      	ldr	r3, [r4, #0]
 8004808:	b992      	cbnz	r2, 8004830 <HAL_I2C_Mem_Read+0xd4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800480a:	9002      	str	r0, [sp, #8]
 800480c:	695a      	ldr	r2, [r3, #20]
 800480e:	9202      	str	r2, [sp, #8]
 8004810:	699a      	ldr	r2, [r3, #24]
 8004812:	9202      	str	r2, [sp, #8]
 8004814:	9a02      	ldr	r2, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800481c:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800481e:	2320      	movs	r3, #32
 8004820:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004824:	2300      	movs	r3, #0
 8004826:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 800482a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 800482e:	e7a5      	b.n	800477c <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 1U)
 8004830:	2a01      	cmp	r2, #1
 8004832:	d122      	bne.n	800487a <HAL_I2C_Mem_Read+0x11e>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800483a:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800483c:	9003      	str	r0, [sp, #12]
 800483e:	695a      	ldr	r2, [r3, #20]
 8004840:	9203      	str	r2, [sp, #12]
 8004842:	699a      	ldr	r2, [r3, #24]
 8004844:	9203      	str	r2, [sp, #12]
 8004846:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800484e:	601a      	str	r2, [r3, #0]
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004850:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8004978 <HAL_I2C_Mem_Read+0x21c>
    while(hi2c->XferSize > 0U)
 8004854:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004856:	2b00      	cmp	r3, #0
 8004858:	d0e1      	beq.n	800481e <HAL_I2C_Mem_Read+0xc2>
      if(hi2c->XferSize <= 3U)
 800485a:	2b03      	cmp	r3, #3
 800485c:	d86b      	bhi.n	8004936 <HAL_I2C_Mem_Read+0x1da>
        if(hi2c->XferSize== 1U)
 800485e:	2b01      	cmp	r3, #1
 8004860:	d123      	bne.n	80048aa <HAL_I2C_Mem_Read+0x14e>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8004862:	4632      	mov	r2, r6
 8004864:	4639      	mov	r1, r7
 8004866:	4620      	mov	r0, r4
 8004868:	f7ff fe06 	bl	8004478 <I2C_WaitOnRXNEFlagUntilTimeout>
 800486c:	2800      	cmp	r0, #0
 800486e:	d039      	beq.n	80048e4 <HAL_I2C_Mem_Read+0x188>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8004870:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004872:	2b20      	cmp	r3, #32
 8004874:	d1c4      	bne.n	8004800 <HAL_I2C_Mem_Read+0xa4>
              return HAL_TIMEOUT;
 8004876:	2503      	movs	r5, #3
 8004878:	e780      	b.n	800477c <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 2U)
 800487a:	2a02      	cmp	r2, #2
 800487c:	d10e      	bne.n	800489c <HAL_I2C_Mem_Read+0x140>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004884:	601a      	str	r2, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800488c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800488e:	9004      	str	r0, [sp, #16]
 8004890:	695a      	ldr	r2, [r3, #20]
 8004892:	9204      	str	r2, [sp, #16]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	9304      	str	r3, [sp, #16]
 8004898:	9b04      	ldr	r3, [sp, #16]
 800489a:	e7d9      	b.n	8004850 <HAL_I2C_Mem_Read+0xf4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800489c:	9005      	str	r0, [sp, #20]
 800489e:	695a      	ldr	r2, [r3, #20]
 80048a0:	9205      	str	r2, [sp, #20]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	9305      	str	r3, [sp, #20]
 80048a6:	9b05      	ldr	r3, [sp, #20]
 80048a8:	e7d2      	b.n	8004850 <HAL_I2C_Mem_Read+0xf4>
        else if(hi2c->XferSize == 2U)
 80048aa:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048ac:	9600      	str	r6, [sp, #0]
 80048ae:	463b      	mov	r3, r7
 80048b0:	f04f 0200 	mov.w	r2, #0
 80048b4:	4641      	mov	r1, r8
 80048b6:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 80048b8:	d122      	bne.n	8004900 <HAL_I2C_Mem_Read+0x1a4>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048ba:	f7ff fcbc 	bl	8004236 <I2C_WaitOnFlagUntilTimeout>
 80048be:	2800      	cmp	r0, #0
 80048c0:	d1d9      	bne.n	8004876 <HAL_I2C_Mem_Read+0x11a>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80048c2:	6823      	ldr	r3, [r4, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ca:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80048cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	1c51      	adds	r1, r2, #1
 80048d2:	6261      	str	r1, [r4, #36]	; 0x24
 80048d4:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 80048d6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80048d8:	3b01      	subs	r3, #1
 80048da:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80048dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80048de:	3b01      	subs	r3, #1
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	8563      	strh	r3, [r4, #42]	; 0x2a
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80048e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048e6:	1c5a      	adds	r2, r3, #1
 80048e8:	6262      	str	r2, [r4, #36]	; 0x24
 80048ea:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80048ec:	6912      	ldr	r2, [r2, #16]
 80048ee:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80048f0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80048f2:	3b01      	subs	r3, #1
 80048f4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80048f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80048f8:	3b01      	subs	r3, #1
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	8563      	strh	r3, [r4, #42]	; 0x2a
 80048fe:	e7a9      	b.n	8004854 <HAL_I2C_Mem_Read+0xf8>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004900:	f7ff fc99 	bl	8004236 <I2C_WaitOnFlagUntilTimeout>
 8004904:	4602      	mov	r2, r0
 8004906:	2800      	cmp	r0, #0
 8004908:	d1b5      	bne.n	8004876 <HAL_I2C_Mem_Read+0x11a>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	6819      	ldr	r1, [r3, #0]
 800490e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004912:	6019      	str	r1, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004914:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	1c48      	adds	r0, r1, #1
 800491a:	6260      	str	r0, [r4, #36]	; 0x24
 800491c:	700b      	strb	r3, [r1, #0]
          hi2c->XferSize--;
 800491e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004920:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8004922:	3b01      	subs	r3, #1
 8004924:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004926:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004928:	3b01      	subs	r3, #1
 800492a:	b29b      	uxth	r3, r3
 800492c:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800492e:	4641      	mov	r1, r8
 8004930:	463b      	mov	r3, r7
 8004932:	4620      	mov	r0, r4
 8004934:	e7c1      	b.n	80048ba <HAL_I2C_Mem_Read+0x15e>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004936:	4632      	mov	r2, r6
 8004938:	4639      	mov	r1, r7
 800493a:	4620      	mov	r0, r4
 800493c:	f7ff fd9c 	bl	8004478 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004940:	2800      	cmp	r0, #0
 8004942:	d195      	bne.n	8004870 <HAL_I2C_Mem_Read+0x114>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004944:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004946:	1c5a      	adds	r2, r3, #1
 8004948:	6262      	str	r2, [r4, #36]	; 0x24
 800494a:	6822      	ldr	r2, [r4, #0]
 800494c:	6912      	ldr	r2, [r2, #16]
 800494e:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8004950:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004952:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8004954:	3b01      	subs	r3, #1
 8004956:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8004958:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800495a:	3b01      	subs	r3, #1
 800495c:	b29b      	uxth	r3, r3
 800495e:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004960:	6953      	ldr	r3, [r2, #20]
 8004962:	075b      	lsls	r3, r3, #29
 8004964:	f57f af76 	bpl.w	8004854 <HAL_I2C_Mem_Read+0xf8>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004968:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800496a:	1c59      	adds	r1, r3, #1
 800496c:	6261      	str	r1, [r4, #36]	; 0x24
 800496e:	e7bd      	b.n	80048ec <HAL_I2C_Mem_Read+0x190>
 8004970:	00100002 	.word	0x00100002
 8004974:	ffff0000 	.word	0xffff0000
 8004978:	00010004 	.word	0x00010004

0800497c <HAL_I2C_GetState>:
  return hi2c->State;
 800497c:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8004980:	4770      	bx	lr

08004982 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8004982:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8004986:	b2d2      	uxtb	r2, r2
 8004988:	2a20      	cmp	r2, #32
{
 800498a:	b510      	push	{r4, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 800498c:	d116      	bne.n	80049bc <HAL_I2CEx_ConfigAnalogFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800498e:	2324      	movs	r3, #36	; 0x24
 8004990:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);    
 8004994:	6803      	ldr	r3, [r0, #0]
 8004996:	681c      	ldr	r4, [r3, #0]
 8004998:	f024 0401 	bic.w	r4, r4, #1
 800499c:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800499e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80049a0:	f024 0410 	bic.w	r4, r4, #16
 80049a4:	625c      	str	r4, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80049a6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80049a8:	4321      	orrs	r1, r4
 80049aa:	6259      	str	r1, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c); 
 80049ac:	6819      	ldr	r1, [r3, #0]
 80049ae:	f041 0101 	orr.w	r1, r1, #1
 80049b2:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049b4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_OK;
 80049b8:	2000      	movs	r0, #0
 80049ba:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80049bc:	2002      	movs	r0, #2
  }
}
 80049be:	bd10      	pop	{r4, pc}

080049c0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 80049c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049c4:	9d06      	ldr	r5, [sp, #24]
 80049c6:	4604      	mov	r4, r0
 80049c8:	460f      	mov	r7, r1
 80049ca:	4616      	mov	r6, r2
 80049cc:	4698      	mov	r8, r3
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80049ce:	6821      	ldr	r1, [r4, #0]
 80049d0:	688a      	ldr	r2, [r1, #8]
 80049d2:	423a      	tst	r2, r7
 80049d4:	bf14      	ite	ne
 80049d6:	2201      	movne	r2, #1
 80049d8:	2200      	moveq	r2, #0
 80049da:	42b2      	cmp	r2, r6
 80049dc:	d102      	bne.n	80049e4 <QSPI_WaitFlagStateUntilTimeout+0x24>
        
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80049de:	2000      	movs	r0, #0
}
 80049e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80049e4:	1c6b      	adds	r3, r5, #1
 80049e6:	d0f3      	beq.n	80049d0 <QSPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80049e8:	b94d      	cbnz	r5, 80049fe <QSPI_WaitFlagStateUntilTimeout+0x3e>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80049ea:	2304      	movs	r3, #4
 80049ec:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80049f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80049f2:	f043 0301 	orr.w	r3, r3, #1
 80049f6:	6463      	str	r3, [r4, #68]	; 0x44
 80049f8:	2001      	movs	r0, #1
 80049fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80049fe:	f7fe fad7 	bl	8002fb0 <HAL_GetTick>
 8004a02:	eba0 0008 	sub.w	r0, r0, r8
 8004a06:	4285      	cmp	r5, r0
 8004a08:	d2e1      	bcs.n	80049ce <QSPI_WaitFlagStateUntilTimeout+0xe>
 8004a0a:	e7ee      	b.n	80049ea <QSPI_WaitFlagStateUntilTimeout+0x2a>

08004a0c <HAL_QSPI_Init>:
{
 8004a0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a0e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004a10:	f7fe face 	bl	8002fb0 <HAL_GetTick>
 8004a14:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8004a16:	2c00      	cmp	r4, #0
 8004a18:	d04d      	beq.n	8004ab6 <HAL_QSPI_Init+0xaa>
  __HAL_LOCK(hqspi);
 8004a1a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d04b      	beq.n	8004aba <HAL_QSPI_Init+0xae>
 8004a22:	2301      	movs	r3, #1
 8004a24:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004a28:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8004a2c:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8004a30:	b93a      	cbnz	r2, 8004a42 <HAL_QSPI_Init+0x36>
    hqspi->Lock = HAL_UNLOCKED;
 8004a32:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8004a36:	4620      	mov	r0, r4
 8004a38:	f003 fd88 	bl	800854c <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8004a3c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004a40:	64a3      	str	r3, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1U) << 8U));
 8004a42:	6820      	ldr	r0, [r4, #0]
 8004a44:	68a1      	ldr	r1, [r4, #8]
 8004a46:	6802      	ldr	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004a48:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1U) << 8U));
 8004a4a:	3901      	subs	r1, #1
 8004a4c:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8004a50:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004a54:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004a56:	2120      	movs	r1, #32
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	462b      	mov	r3, r5
 8004a5e:	4620      	mov	r0, r4
 8004a60:	f7ff ffae 	bl	80049c0 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8004a64:	bb10      	cbnz	r0, 8004aac <HAL_QSPI_Init+0xa0>
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24U)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8004a66:	69e5      	ldr	r5, [r4, #28]
 8004a68:	68e3      	ldr	r3, [r4, #12]
 8004a6a:	6822      	ldr	r2, [r4, #0]
 8004a6c:	432b      	orrs	r3, r5
 8004a6e:	6a25      	ldr	r5, [r4, #32]
 8004a70:	6811      	ldr	r1, [r2, #0]
 8004a72:	432b      	orrs	r3, r5
 8004a74:	6865      	ldr	r5, [r4, #4]
 8004a76:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8004a7a:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8004a7e:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 8004a82:	430b      	orrs	r3, r1
 8004a84:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8004a86:	69a1      	ldr	r1, [r4, #24]
 8004a88:	6963      	ldr	r3, [r4, #20]
 8004a8a:	6855      	ldr	r5, [r2, #4]
 8004a8c:	430b      	orrs	r3, r1
 8004a8e:	6921      	ldr	r1, [r4, #16]
 8004a90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004a94:	490a      	ldr	r1, [pc, #40]	; (8004ac0 <HAL_QSPI_Init+0xb4>)
 8004a96:	4029      	ands	r1, r5
 8004a98:	430b      	orrs	r3, r1
 8004a9a:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8004a9c:	6813      	ldr	r3, [r2, #0]
 8004a9e:	f043 0301 	orr.w	r3, r3, #1
 8004aa2:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8004aa4:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8004aa6:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8004aa8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8004aac:	2300      	movs	r3, #0
 8004aae:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8004ab2:	b003      	add	sp, #12
 8004ab4:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8004ab6:	2001      	movs	r0, #1
 8004ab8:	e7fb      	b.n	8004ab2 <HAL_QSPI_Init+0xa6>
  __HAL_LOCK(hqspi);
 8004aba:	2002      	movs	r0, #2
 8004abc:	e7f9      	b.n	8004ab2 <HAL_QSPI_Init+0xa6>
 8004abe:	bf00      	nop
 8004ac0:	ffe0f8fe 	.word	0xffe0f8fe

08004ac4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ac4:	4913      	ldr	r1, [pc, #76]	; (8004b14 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8004ac6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ac8:	688b      	ldr	r3, [r1, #8]
 8004aca:	f003 030c 	and.w	r3, r3, #12
 8004ace:	2b04      	cmp	r3, #4
 8004ad0:	d003      	beq.n	8004ada <HAL_RCC_GetSysClockFreq+0x16>
 8004ad2:	2b08      	cmp	r3, #8
 8004ad4:	d003      	beq.n	8004ade <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ad6:	4810      	ldr	r0, [pc, #64]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004ad8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8004ada:	4810      	ldr	r0, [pc, #64]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x58>)
 8004adc:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ade:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ae0:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ae2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ae4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ae8:	bf14      	ite	ne
 8004aea:	480c      	ldrne	r0, [pc, #48]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aec:	480a      	ldreq	r0, [pc, #40]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aee:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004af2:	bf18      	it	ne
 8004af4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004af6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004afa:	fba1 0100 	umull	r0, r1, r1, r0
 8004afe:	f7fb ffd1 	bl	8000aa4 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b02:	4b04      	ldr	r3, [pc, #16]	; (8004b14 <HAL_RCC_GetSysClockFreq+0x50>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8004b0e:	fbb0 f0f3 	udiv	r0, r0, r3
 8004b12:	bd08      	pop	{r3, pc}
 8004b14:	40023800 	.word	0x40023800
 8004b18:	00f42400 	.word	0x00f42400
 8004b1c:	017d7840 	.word	0x017d7840

08004b20 <HAL_RCC_ClockConfig>:
{
 8004b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b24:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8004b26:	4604      	mov	r4, r0
 8004b28:	b910      	cbnz	r0, 8004b30 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004b2a:	2001      	movs	r0, #1
 8004b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b30:	4b44      	ldr	r3, [pc, #272]	; (8004c44 <HAL_RCC_ClockConfig+0x124>)
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	f002 020f 	and.w	r2, r2, #15
 8004b38:	428a      	cmp	r2, r1
 8004b3a:	d328      	bcc.n	8004b8e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b3c:	6821      	ldr	r1, [r4, #0]
 8004b3e:	078f      	lsls	r7, r1, #30
 8004b40:	d42d      	bmi.n	8004b9e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b42:	07c8      	lsls	r0, r1, #31
 8004b44:	d440      	bmi.n	8004bc8 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b46:	4b3f      	ldr	r3, [pc, #252]	; (8004c44 <HAL_RCC_ClockConfig+0x124>)
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	f002 020f 	and.w	r2, r2, #15
 8004b4e:	4295      	cmp	r5, r2
 8004b50:	d366      	bcc.n	8004c20 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b52:	6822      	ldr	r2, [r4, #0]
 8004b54:	0751      	lsls	r1, r2, #29
 8004b56:	d46c      	bmi.n	8004c32 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b58:	0713      	lsls	r3, r2, #28
 8004b5a:	d507      	bpl.n	8004b6c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b5c:	4a3a      	ldr	r2, [pc, #232]	; (8004c48 <HAL_RCC_ClockConfig+0x128>)
 8004b5e:	6921      	ldr	r1, [r4, #16]
 8004b60:	6893      	ldr	r3, [r2, #8]
 8004b62:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004b66:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004b6a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b6c:	f7ff ffaa 	bl	8004ac4 <HAL_RCC_GetSysClockFreq>
 8004b70:	4b35      	ldr	r3, [pc, #212]	; (8004c48 <HAL_RCC_ClockConfig+0x128>)
 8004b72:	4a36      	ldr	r2, [pc, #216]	; (8004c4c <HAL_RCC_ClockConfig+0x12c>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004b7a:	5cd3      	ldrb	r3, [r2, r3]
 8004b7c:	40d8      	lsrs	r0, r3
 8004b7e:	4b34      	ldr	r3, [pc, #208]	; (8004c50 <HAL_RCC_ClockConfig+0x130>)
 8004b80:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8004b82:	2000      	movs	r0, #0
 8004b84:	f7fe f9ca 	bl	8002f1c <HAL_InitTick>
  return HAL_OK;
 8004b88:	2000      	movs	r0, #0
 8004b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b8e:	b2ca      	uxtb	r2, r1
 8004b90:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 030f 	and.w	r3, r3, #15
 8004b98:	4299      	cmp	r1, r3
 8004b9a:	d1c6      	bne.n	8004b2a <HAL_RCC_ClockConfig+0xa>
 8004b9c:	e7ce      	b.n	8004b3c <HAL_RCC_ClockConfig+0x1c>
 8004b9e:	4b2a      	ldr	r3, [pc, #168]	; (8004c48 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ba0:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ba4:	bf1e      	ittt	ne
 8004ba6:	689a      	ldrne	r2, [r3, #8]
 8004ba8:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8004bac:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bae:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bb0:	bf42      	ittt	mi
 8004bb2:	689a      	ldrmi	r2, [r3, #8]
 8004bb4:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8004bb8:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	68a0      	ldr	r0, [r4, #8]
 8004bbe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004bc2:	4302      	orrs	r2, r0
 8004bc4:	609a      	str	r2, [r3, #8]
 8004bc6:	e7bc      	b.n	8004b42 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bc8:	6862      	ldr	r2, [r4, #4]
 8004bca:	4b1f      	ldr	r3, [pc, #124]	; (8004c48 <HAL_RCC_ClockConfig+0x128>)
 8004bcc:	2a01      	cmp	r2, #1
 8004bce:	d11d      	bne.n	8004c0c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd6:	d0a8      	beq.n	8004b2a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bd8:	4e1b      	ldr	r6, [pc, #108]	; (8004c48 <HAL_RCC_ClockConfig+0x128>)
 8004bda:	68b3      	ldr	r3, [r6, #8]
 8004bdc:	f023 0303 	bic.w	r3, r3, #3
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004be4:	f7fe f9e4 	bl	8002fb0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004be8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004bec:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bee:	68b3      	ldr	r3, [r6, #8]
 8004bf0:	6862      	ldr	r2, [r4, #4]
 8004bf2:	f003 030c 	and.w	r3, r3, #12
 8004bf6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004bfa:	d0a4      	beq.n	8004b46 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bfc:	f7fe f9d8 	bl	8002fb0 <HAL_GetTick>
 8004c00:	1bc0      	subs	r0, r0, r7
 8004c02:	4540      	cmp	r0, r8
 8004c04:	d9f3      	bls.n	8004bee <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8004c06:	2003      	movs	r0, #3
}
 8004c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c0c:	1e91      	subs	r1, r2, #2
 8004c0e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c10:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c12:	d802      	bhi.n	8004c1a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c14:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004c18:	e7dd      	b.n	8004bd6 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c1a:	f013 0f02 	tst.w	r3, #2
 8004c1e:	e7da      	b.n	8004bd6 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c20:	b2ea      	uxtb	r2, r5
 8004c22:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 030f 	and.w	r3, r3, #15
 8004c2a:	429d      	cmp	r5, r3
 8004c2c:	f47f af7d 	bne.w	8004b2a <HAL_RCC_ClockConfig+0xa>
 8004c30:	e78f      	b.n	8004b52 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c32:	4905      	ldr	r1, [pc, #20]	; (8004c48 <HAL_RCC_ClockConfig+0x128>)
 8004c34:	68e0      	ldr	r0, [r4, #12]
 8004c36:	688b      	ldr	r3, [r1, #8]
 8004c38:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004c3c:	4303      	orrs	r3, r0
 8004c3e:	608b      	str	r3, [r1, #8]
 8004c40:	e78a      	b.n	8004b58 <HAL_RCC_ClockConfig+0x38>
 8004c42:	bf00      	nop
 8004c44:	40023c00 	.word	0x40023c00
 8004c48:	40023800 	.word	0x40023800
 8004c4c:	0800bbeb 	.word	0x0800bbeb
 8004c50:	2000013c 	.word	0x2000013c

08004c54 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c54:	4b04      	ldr	r3, [pc, #16]	; (8004c68 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004c56:	4a05      	ldr	r2, [pc, #20]	; (8004c6c <HAL_RCC_GetPCLK1Freq+0x18>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004c5e:	5cd3      	ldrb	r3, [r2, r3]
 8004c60:	4a03      	ldr	r2, [pc, #12]	; (8004c70 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004c62:	6810      	ldr	r0, [r2, #0]
}
 8004c64:	40d8      	lsrs	r0, r3
 8004c66:	4770      	bx	lr
 8004c68:	40023800 	.word	0x40023800
 8004c6c:	0800bbfb 	.word	0x0800bbfb
 8004c70:	2000013c 	.word	0x2000013c

08004c74 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c74:	4b04      	ldr	r3, [pc, #16]	; (8004c88 <HAL_RCC_GetPCLK2Freq+0x14>)
 8004c76:	4a05      	ldr	r2, [pc, #20]	; (8004c8c <HAL_RCC_GetPCLK2Freq+0x18>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004c7e:	5cd3      	ldrb	r3, [r2, r3]
 8004c80:	4a03      	ldr	r2, [pc, #12]	; (8004c90 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004c82:	6810      	ldr	r0, [r2, #0]
}
 8004c84:	40d8      	lsrs	r0, r3
 8004c86:	4770      	bx	lr
 8004c88:	40023800 	.word	0x40023800
 8004c8c:	0800bbfb 	.word	0x0800bbfb
 8004c90:	2000013c 	.word	0x2000013c

08004c94 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004c94:	6803      	ldr	r3, [r0, #0]
{
 8004c96:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004c9a:	f013 0501 	ands.w	r5, r3, #1
{
 8004c9e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004ca0:	d00b      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004ca2:	498f      	ldr	r1, [pc, #572]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004ca4:	69c5      	ldr	r5, [r0, #28]
 8004ca6:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8004caa:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8004cae:	432a      	orrs	r2, r5
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004cb0:	fab5 f585 	clz	r5, r5
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004cb4:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004cb8:	096d      	lsrs	r5, r5, #5
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004cba:	079a      	lsls	r2, r3, #30
 8004cbc:	d50b      	bpl.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004cbe:	4888      	ldr	r0, [pc, #544]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004cc0:	6a21      	ldr	r1, [r4, #32]
 8004cc2:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8004cc6:	f022 52c0 	bic.w	r2, r2, #402653184	; 0x18000000
 8004cca:	430a      	orrs	r2, r1
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1U;
 8004ccc:	2900      	cmp	r1, #0
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004cce:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
      plli2sused = 1U;
 8004cd2:	bf08      	it	eq
 8004cd4:	2501      	moveq	r5, #1
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8004cd6:	049f      	lsls	r7, r3, #18
 8004cd8:	d518      	bpl.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8004cda:	4981      	ldr	r1, [pc, #516]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004cdc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004cde:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8004ce2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004ce6:	4302      	orrs	r2, r0
 8004ce8:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8004cec:	2800      	cmp	r0, #0
 8004cee:	f000 80c2 	beq.w	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8004cf2:	f5b0 1f00 	cmp.w	r0, #2097152	; 0x200000
 8004cf6:	d109      	bne.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8004cf8:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8004cfc:	6960      	ldr	r0, [r4, #20]
 8004cfe:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8004d02:	3801      	subs	r0, #1
 8004d04:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004d08:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8004d0c:	045e      	lsls	r6, r3, #17
 8004d0e:	d518      	bpl.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8004d10:	4973      	ldr	r1, [pc, #460]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004d12:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004d14:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8004d18:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8004d1c:	4302      	orrs	r2, r0
 8004d1e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8004d22:	2800      	cmp	r0, #0
 8004d24:	f000 80a9 	beq.w	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8004d28:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8004d2c:	d109      	bne.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0xae>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8004d2e:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8004d32:	6960      	ldr	r0, [r4, #20]
 8004d34:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8004d38:	3801      	subs	r0, #1
 8004d3a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004d3e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d42:	0718      	lsls	r0, r3, #28
 8004d44:	d533      	bpl.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d46:	2300      	movs	r3, #0
 8004d48:	9301      	str	r3, [sp, #4]
 8004d4a:	4b65      	ldr	r3, [pc, #404]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d4c:	4e65      	ldr	r6, [pc, #404]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d50:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004d54:	641a      	str	r2, [r3, #64]	; 0x40
 8004d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d5c:	9301      	str	r3, [sp, #4]
 8004d5e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8004d60:	6833      	ldr	r3, [r6, #0]
 8004d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d66:	6033      	str	r3, [r6, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d68:	f7fe f922 	bl	8002fb0 <HAL_GetTick>
 8004d6c:	4607      	mov	r7, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d6e:	6833      	ldr	r3, [r6, #0]
 8004d70:	05d9      	lsls	r1, r3, #23
 8004d72:	f140 8084 	bpl.w	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d76:	4e5a      	ldr	r6, [pc, #360]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004d78:	6f33      	ldr	r3, [r6, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d7a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004d7e:	f040 8088 	bne.w	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d84:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004d88:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004d8c:	4a54      	ldr	r2, [pc, #336]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004d8e:	f040 80a2 	bne.w	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8004d92:	6891      	ldr	r1, [r2, #8]
 8004d94:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8004d98:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8004d9c:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8004da0:	4301      	orrs	r1, r0
 8004da2:	6091      	str	r1, [r2, #8]
 8004da4:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8004da6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004daa:	430b      	orrs	r3, r1
 8004dac:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004dae:	6823      	ldr	r3, [r4, #0]
 8004db0:	075f      	lsls	r7, r3, #29
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004db2:	bf42      	ittt	mi
 8004db4:	4b4c      	ldrmi	r3, [pc, #304]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004db6:	f894 2054 	ldrbmi.w	r2, [r4, #84]	; 0x54
 8004dba:	601a      	strmi	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004dbc:	6822      	ldr	r2, [r4, #0]
 8004dbe:	06d6      	lsls	r6, r2, #27
 8004dc0:	d508      	bpl.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004dc2:	4947      	ldr	r1, [pc, #284]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004dc4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004dc6:	f8d1 3094 	ldr.w	r3, [r1, #148]	; 0x94
 8004dca:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004dce:	4303      	orrs	r3, r0
 8004dd0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004dd4:	0690      	lsls	r0, r2, #26
 8004dd6:	d50c      	bpl.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004dd8:	4841      	ldr	r0, [pc, #260]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004dda:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004ddc:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 8004de0:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8004de4:	430b      	orrs	r3, r1

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
    {
      plli2sused = 1U;
 8004de6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004dea:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
      plli2sused = 1U;
 8004dee:	bf08      	it	eq
 8004df0:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004df2:	0651      	lsls	r1, r2, #25
 8004df4:	d508      	bpl.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004df6:	493a      	ldr	r1, [pc, #232]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004df8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004dfa:	f8d1 3094 	ldr.w	r3, [r1, #148]	; 0x94
 8004dfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e02:	4303      	orrs	r3, r0
 8004e04:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004e08:	2d01      	cmp	r5, #1
 8004e0a:	d071      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 8004e0c:	2a80      	cmp	r2, #128	; 0x80
 8004e0e:	d06f      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e10:	6820      	ldr	r0, [r4, #0]
 8004e12:	05c2      	lsls	r2, r0, #23
 8004e14:	f100 80e2 	bmi.w	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x348>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004e18:	0581      	lsls	r1, r0, #22
 8004e1a:	d508      	bpl.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004e1c:	4a30      	ldr	r2, [pc, #192]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004e1e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004e20:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004e24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e28:	430b      	orrs	r3, r1
 8004e2a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004e2e:	0542      	lsls	r2, r0, #21
 8004e30:	d508      	bpl.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004e32:	4a2b      	ldr	r2, [pc, #172]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004e34:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004e36:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004e3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e3e:	430b      	orrs	r3, r1
 8004e40:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8004e44:	0503      	lsls	r3, r0, #20
 8004e46:	d508      	bpl.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8004e48:	4a25      	ldr	r2, [pc, #148]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004e4a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004e4c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004e50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e54:	430b      	orrs	r3, r1
 8004e56:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e5a:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8004e5e:	d015      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e60:	4a1f      	ldr	r2, [pc, #124]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004e62:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004e64:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004e68:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004e6c:	430b      	orrs	r3, r1
 8004e6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004e72:	2000      	movs	r0, #0
 8004e74:	e00a      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      plli2sused = 1U;
 8004e76:	2501      	movs	r5, #1
 8004e78:	e748      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x78>
      plli2sused = 1U;
 8004e7a:	2501      	movs	r5, #1
 8004e7c:	e761      	b.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0xae>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004e7e:	f7fe f897 	bl	8002fb0 <HAL_GetTick>
 8004e82:	1bc0      	subs	r0, r0, r7
 8004e84:	2802      	cmp	r0, #2
 8004e86:	f67f af72 	bls.w	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xda>
        return HAL_TIMEOUT;
 8004e8a:	2003      	movs	r0, #3
}
 8004e8c:	b002      	add	sp, #8
 8004e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e92:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004e94:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	f43f af72 	beq.w	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xee>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e9e:	6f33      	ldr	r3, [r6, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ea0:	4a12      	ldr	r2, [pc, #72]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004eaa:	2100      	movs	r1, #0
 8004eac:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8004eae:	6733      	str	r3, [r6, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004eb0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8004eb2:	07da      	lsls	r2, r3, #31
 8004eb4:	f57f af65 	bpl.w	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xee>
        tickstart = HAL_GetTick();
 8004eb8:	f7fe f87a 	bl	8002fb0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ebc:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004ec0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ec2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8004ec4:	079b      	lsls	r3, r3, #30
 8004ec6:	f53f af5c 	bmi.w	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xee>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eca:	f7fe f871 	bl	8002fb0 <HAL_GetTick>
 8004ece:	1bc0      	subs	r0, r0, r7
 8004ed0:	4540      	cmp	r0, r8
 8004ed2:	d9f6      	bls.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x22e>
 8004ed4:	e7d9      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ed6:	6891      	ldr	r1, [r2, #8]
 8004ed8:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8004edc:	e761      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8004ede:	bf00      	nop
 8004ee0:	40023800 	.word	0x40023800
 8004ee4:	40007000 	.word	0x40007000
 8004ee8:	424711e0 	.word	0x424711e0
 8004eec:	42470e40 	.word	0x42470e40
    __HAL_RCC_PLLI2S_DISABLE();
 8004ef0:	4d3f      	ldr	r5, [pc, #252]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ef2:	4e40      	ldr	r6, [pc, #256]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
    __HAL_RCC_PLLI2S_DISABLE();
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004ef8:	f7fe f85a 	bl	8002fb0 <HAL_GetTick>
 8004efc:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004efe:	6833      	ldr	r3, [r6, #0]
 8004f00:	011b      	lsls	r3, r3, #4
 8004f02:	d465      	bmi.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8004f04:	4b3c      	ldr	r3, [pc, #240]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004f06:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004f08:	601a      	str	r2, [r3, #0]
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004f0a:	6822      	ldr	r2, [r4, #0]
 8004f0c:	07d7      	lsls	r7, r2, #31
 8004f0e:	d501      	bpl.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8004f10:	69e3      	ldr	r3, [r4, #28]
 8004f12:	b18b      	cbz	r3, 8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8004f14:	0796      	lsls	r6, r2, #30
 8004f16:	d501      	bpl.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x288>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004f18:	6a23      	ldr	r3, [r4, #32]
 8004f1a:	b16b      	cbz	r3, 8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8004f1c:	0690      	lsls	r0, r2, #26
 8004f1e:	d503      	bpl.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x294>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004f20:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f26:	d007      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8004f28:	0651      	lsls	r1, r2, #25
 8004f2a:	d512      	bpl.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x2be>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004f2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004f2e:	b983      	cbnz	r3, 8004f52 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8004f30:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f36:	d10c      	bne.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x2be>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f38:	68e3      	ldr	r3, [r4, #12]
 8004f3a:	68a1      	ldr	r1, [r4, #8]
 8004f3c:	061b      	lsls	r3, r3, #24
 8004f3e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8004f42:	6861      	ldr	r1, [r4, #4]
 8004f44:	430b      	orrs	r3, r1
 8004f46:	6921      	ldr	r1, [r4, #16]
 8004f48:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004f4c:	4929      	ldr	r1, [pc, #164]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004f4e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8004f52:	0493      	lsls	r3, r2, #18
 8004f54:	d501      	bpl.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
 8004f56:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004f58:	b11b      	cbz	r3, 8004f62 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8004f5a:	0457      	lsls	r7, r2, #17
 8004f5c:	d519      	bpl.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8004f5e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004f60:	b9bb      	cbnz	r3, 8004f92 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f62:	4924      	ldr	r1, [pc, #144]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f64:	6860      	ldr	r0, [r4, #4]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f66:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f6a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8004f6e:	4303      	orrs	r3, r0
 8004f70:	68a0      	ldr	r0, [r4, #8]
 8004f72:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004f76:	6920      	ldr	r0, [r4, #16]
 8004f78:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 8004f7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8004f80:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8004f84:	69a3      	ldr	r3, [r4, #24]
 8004f86:	f020 001f 	bic.w	r0, r0, #31
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	4303      	orrs	r3, r0
 8004f8e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f92:	0616      	lsls	r6, r2, #24
 8004f94:	d50c      	bpl.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f96:	68e3      	ldr	r3, [r4, #12]
 8004f98:	68a2      	ldr	r2, [r4, #8]
 8004f9a:	061b      	lsls	r3, r3, #24
 8004f9c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004fa0:	6862      	ldr	r2, [r4, #4]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	6922      	ldr	r2, [r4, #16]
 8004fa6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8004faa:	4a12      	ldr	r2, [pc, #72]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004fac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004fb4:	f7fd fffc 	bl	8002fb0 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fb8:	4d0e      	ldr	r5, [pc, #56]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
    tickstart = HAL_GetTick();
 8004fba:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fbc:	682b      	ldr	r3, [r5, #0]
 8004fbe:	0118      	lsls	r0, r3, #4
 8004fc0:	f53f af26 	bmi.w	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fc4:	f7fd fff4 	bl	8002fb0 <HAL_GetTick>
 8004fc8:	1b80      	subs	r0, r0, r6
 8004fca:	2802      	cmp	r0, #2
 8004fcc:	d9f6      	bls.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x328>
 8004fce:	e75c      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fd0:	f7fd ffee 	bl	8002fb0 <HAL_GetTick>
 8004fd4:	1bc0      	subs	r0, r0, r7
 8004fd6:	2802      	cmp	r0, #2
 8004fd8:	d991      	bls.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004fda:	e756      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004fdc:	4a05      	ldr	r2, [pc, #20]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004fde:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fe0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004fe4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004fe8:	430b      	orrs	r3, r1
 8004fea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004fee:	e713      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8004ff0:	42470068 	.word	0x42470068
 8004ff4:	40023800 	.word	0x40023800
 8004ff8:	424710d8 	.word	0x424710d8

08004ffc <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ffc:	6803      	ldr	r3, [r0, #0]
{
 8004ffe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005002:	07dd      	lsls	r5, r3, #31
{
 8005004:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005006:	d410      	bmi.n	800502a <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005008:	6823      	ldr	r3, [r4, #0]
 800500a:	0798      	lsls	r0, r3, #30
 800500c:	d45b      	bmi.n	80050c6 <HAL_RCC_OscConfig+0xca>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800500e:	6823      	ldr	r3, [r4, #0]
 8005010:	071a      	lsls	r2, r3, #28
 8005012:	f100 809d 	bmi.w	8005150 <HAL_RCC_OscConfig+0x154>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005016:	6823      	ldr	r3, [r4, #0]
 8005018:	075b      	lsls	r3, r3, #29
 800501a:	f100 80bb 	bmi.w	8005194 <HAL_RCC_OscConfig+0x198>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800501e:	69a2      	ldr	r2, [r4, #24]
 8005020:	2a00      	cmp	r2, #0
 8005022:	f040 811c 	bne.w	800525e <HAL_RCC_OscConfig+0x262>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8005026:	2000      	movs	r0, #0
 8005028:	e015      	b.n	8005056 <HAL_RCC_OscConfig+0x5a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800502a:	4ba7      	ldr	r3, [pc, #668]	; (80052c8 <HAL_RCC_OscConfig+0x2cc>)
 800502c:	689a      	ldr	r2, [r3, #8]
 800502e:	f002 020c 	and.w	r2, r2, #12
 8005032:	2a04      	cmp	r2, #4
 8005034:	d007      	beq.n	8005046 <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800503c:	2a08      	cmp	r2, #8
 800503e:	d10d      	bne.n	800505c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	0259      	lsls	r1, r3, #9
 8005044:	d50a      	bpl.n	800505c <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005046:	4ba0      	ldr	r3, [pc, #640]	; (80052c8 <HAL_RCC_OscConfig+0x2cc>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	039a      	lsls	r2, r3, #14
 800504c:	d5dc      	bpl.n	8005008 <HAL_RCC_OscConfig+0xc>
 800504e:	6863      	ldr	r3, [r4, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1d9      	bne.n	8005008 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8005054:	2001      	movs	r0, #1
}
 8005056:	b002      	add	sp, #8
 8005058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800505c:	6863      	ldr	r3, [r4, #4]
 800505e:	4d9a      	ldr	r5, [pc, #616]	; (80052c8 <HAL_RCC_OscConfig+0x2cc>)
 8005060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005064:	d111      	bne.n	800508a <HAL_RCC_OscConfig+0x8e>
 8005066:	682b      	ldr	r3, [r5, #0]
 8005068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800506c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800506e:	f7fd ff9f 	bl	8002fb0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005072:	4d95      	ldr	r5, [pc, #596]	; (80052c8 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8005074:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005076:	682b      	ldr	r3, [r5, #0]
 8005078:	039b      	lsls	r3, r3, #14
 800507a:	d4c5      	bmi.n	8005008 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800507c:	f7fd ff98 	bl	8002fb0 <HAL_GetTick>
 8005080:	1b80      	subs	r0, r0, r6
 8005082:	2864      	cmp	r0, #100	; 0x64
 8005084:	d9f7      	bls.n	8005076 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8005086:	2003      	movs	r0, #3
 8005088:	e7e5      	b.n	8005056 <HAL_RCC_OscConfig+0x5a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800508a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800508e:	d104      	bne.n	800509a <HAL_RCC_OscConfig+0x9e>
 8005090:	682b      	ldr	r3, [r5, #0]
 8005092:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005096:	602b      	str	r3, [r5, #0]
 8005098:	e7e5      	b.n	8005066 <HAL_RCC_OscConfig+0x6a>
 800509a:	682a      	ldr	r2, [r5, #0]
 800509c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80050a0:	602a      	str	r2, [r5, #0]
 80050a2:	682a      	ldr	r2, [r5, #0]
 80050a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80050a8:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1df      	bne.n	800506e <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 80050ae:	f7fd ff7f 	bl	8002fb0 <HAL_GetTick>
 80050b2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050b4:	682b      	ldr	r3, [r5, #0]
 80050b6:	039f      	lsls	r7, r3, #14
 80050b8:	d5a6      	bpl.n	8005008 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050ba:	f7fd ff79 	bl	8002fb0 <HAL_GetTick>
 80050be:	1b80      	subs	r0, r0, r6
 80050c0:	2864      	cmp	r0, #100	; 0x64
 80050c2:	d9f7      	bls.n	80050b4 <HAL_RCC_OscConfig+0xb8>
 80050c4:	e7df      	b.n	8005086 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80050c6:	4b80      	ldr	r3, [pc, #512]	; (80052c8 <HAL_RCC_OscConfig+0x2cc>)
 80050c8:	689a      	ldr	r2, [r3, #8]
 80050ca:	f012 0f0c 	tst.w	r2, #12
 80050ce:	d007      	beq.n	80050e0 <HAL_RCC_OscConfig+0xe4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050d0:	689a      	ldr	r2, [r3, #8]
 80050d2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80050d6:	2a08      	cmp	r2, #8
 80050d8:	d111      	bne.n	80050fe <HAL_RCC_OscConfig+0x102>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	025e      	lsls	r6, r3, #9
 80050de:	d40e      	bmi.n	80050fe <HAL_RCC_OscConfig+0x102>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050e0:	4b79      	ldr	r3, [pc, #484]	; (80052c8 <HAL_RCC_OscConfig+0x2cc>)
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	0795      	lsls	r5, r2, #30
 80050e6:	d502      	bpl.n	80050ee <HAL_RCC_OscConfig+0xf2>
 80050e8:	68e2      	ldr	r2, [r4, #12]
 80050ea:	2a01      	cmp	r2, #1
 80050ec:	d1b2      	bne.n	8005054 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	6921      	ldr	r1, [r4, #16]
 80050f2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80050f6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80050fa:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050fc:	e787      	b.n	800500e <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050fe:	68e2      	ldr	r2, [r4, #12]
 8005100:	4b72      	ldr	r3, [pc, #456]	; (80052cc <HAL_RCC_OscConfig+0x2d0>)
 8005102:	b1b2      	cbz	r2, 8005132 <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_HSI_ENABLE();
 8005104:	2201      	movs	r2, #1
 8005106:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005108:	f7fd ff52 	bl	8002fb0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800510c:	4d6e      	ldr	r5, [pc, #440]	; (80052c8 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 800510e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005110:	682b      	ldr	r3, [r5, #0]
 8005112:	0798      	lsls	r0, r3, #30
 8005114:	d507      	bpl.n	8005126 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005116:	682b      	ldr	r3, [r5, #0]
 8005118:	6922      	ldr	r2, [r4, #16]
 800511a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800511e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005122:	602b      	str	r3, [r5, #0]
 8005124:	e773      	b.n	800500e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005126:	f7fd ff43 	bl	8002fb0 <HAL_GetTick>
 800512a:	1b80      	subs	r0, r0, r6
 800512c:	2802      	cmp	r0, #2
 800512e:	d9ef      	bls.n	8005110 <HAL_RCC_OscConfig+0x114>
 8005130:	e7a9      	b.n	8005086 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8005132:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005134:	f7fd ff3c 	bl	8002fb0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005138:	4d63      	ldr	r5, [pc, #396]	; (80052c8 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 800513a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800513c:	682b      	ldr	r3, [r5, #0]
 800513e:	0799      	lsls	r1, r3, #30
 8005140:	f57f af65 	bpl.w	800500e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005144:	f7fd ff34 	bl	8002fb0 <HAL_GetTick>
 8005148:	1b80      	subs	r0, r0, r6
 800514a:	2802      	cmp	r0, #2
 800514c:	d9f6      	bls.n	800513c <HAL_RCC_OscConfig+0x140>
 800514e:	e79a      	b.n	8005086 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005150:	6962      	ldr	r2, [r4, #20]
 8005152:	4b5f      	ldr	r3, [pc, #380]	; (80052d0 <HAL_RCC_OscConfig+0x2d4>)
 8005154:	b17a      	cbz	r2, 8005176 <HAL_RCC_OscConfig+0x17a>
      __HAL_RCC_LSI_ENABLE();
 8005156:	2201      	movs	r2, #1
 8005158:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800515a:	f7fd ff29 	bl	8002fb0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800515e:	4d5a      	ldr	r5, [pc, #360]	; (80052c8 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8005160:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005162:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005164:	079f      	lsls	r7, r3, #30
 8005166:	f53f af56 	bmi.w	8005016 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800516a:	f7fd ff21 	bl	8002fb0 <HAL_GetTick>
 800516e:	1b80      	subs	r0, r0, r6
 8005170:	2802      	cmp	r0, #2
 8005172:	d9f6      	bls.n	8005162 <HAL_RCC_OscConfig+0x166>
 8005174:	e787      	b.n	8005086 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8005176:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8005178:	f7fd ff1a 	bl	8002fb0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800517c:	4d52      	ldr	r5, [pc, #328]	; (80052c8 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 800517e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005180:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005182:	0798      	lsls	r0, r3, #30
 8005184:	f57f af47 	bpl.w	8005016 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005188:	f7fd ff12 	bl	8002fb0 <HAL_GetTick>
 800518c:	1b80      	subs	r0, r0, r6
 800518e:	2802      	cmp	r0, #2
 8005190:	d9f6      	bls.n	8005180 <HAL_RCC_OscConfig+0x184>
 8005192:	e778      	b.n	8005086 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005194:	4b4c      	ldr	r3, [pc, #304]	; (80052c8 <HAL_RCC_OscConfig+0x2cc>)
 8005196:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005198:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800519c:	d128      	bne.n	80051f0 <HAL_RCC_OscConfig+0x1f4>
      __HAL_RCC_PWR_CLK_ENABLE();
 800519e:	9201      	str	r2, [sp, #4]
 80051a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80051a6:	641a      	str	r2, [r3, #64]	; 0x40
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ae:	9301      	str	r3, [sp, #4]
 80051b0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80051b2:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051b4:	4d47      	ldr	r5, [pc, #284]	; (80052d4 <HAL_RCC_OscConfig+0x2d8>)
 80051b6:	682b      	ldr	r3, [r5, #0]
 80051b8:	05d9      	lsls	r1, r3, #23
 80051ba:	d51b      	bpl.n	80051f4 <HAL_RCC_OscConfig+0x1f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051bc:	68a3      	ldr	r3, [r4, #8]
 80051be:	4d42      	ldr	r5, [pc, #264]	; (80052c8 <HAL_RCC_OscConfig+0x2cc>)
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d127      	bne.n	8005214 <HAL_RCC_OscConfig+0x218>
 80051c4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80051c6:	f043 0301 	orr.w	r3, r3, #1
 80051ca:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80051cc:	f7fd fef0 	bl	8002fb0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051d0:	4d3d      	ldr	r5, [pc, #244]	; (80052c8 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 80051d2:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051d4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051d8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80051da:	079b      	lsls	r3, r3, #30
 80051dc:	d539      	bpl.n	8005252 <HAL_RCC_OscConfig+0x256>
    if(pwrclkchanged == SET)
 80051de:	2e00      	cmp	r6, #0
 80051e0:	f43f af1d 	beq.w	800501e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80051e4:	4a38      	ldr	r2, [pc, #224]	; (80052c8 <HAL_RCC_OscConfig+0x2cc>)
 80051e6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80051e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051ec:	6413      	str	r3, [r2, #64]	; 0x40
 80051ee:	e716      	b.n	800501e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80051f0:	2600      	movs	r6, #0
 80051f2:	e7df      	b.n	80051b4 <HAL_RCC_OscConfig+0x1b8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051f4:	682b      	ldr	r3, [r5, #0]
 80051f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051fa:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80051fc:	f7fd fed8 	bl	8002fb0 <HAL_GetTick>
 8005200:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005202:	682b      	ldr	r3, [r5, #0]
 8005204:	05da      	lsls	r2, r3, #23
 8005206:	d4d9      	bmi.n	80051bc <HAL_RCC_OscConfig+0x1c0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005208:	f7fd fed2 	bl	8002fb0 <HAL_GetTick>
 800520c:	1bc0      	subs	r0, r0, r7
 800520e:	2802      	cmp	r0, #2
 8005210:	d9f7      	bls.n	8005202 <HAL_RCC_OscConfig+0x206>
 8005212:	e738      	b.n	8005086 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005214:	2b05      	cmp	r3, #5
 8005216:	d104      	bne.n	8005222 <HAL_RCC_OscConfig+0x226>
 8005218:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800521a:	f043 0304 	orr.w	r3, r3, #4
 800521e:	672b      	str	r3, [r5, #112]	; 0x70
 8005220:	e7d0      	b.n	80051c4 <HAL_RCC_OscConfig+0x1c8>
 8005222:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8005224:	f022 0201 	bic.w	r2, r2, #1
 8005228:	672a      	str	r2, [r5, #112]	; 0x70
 800522a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800522c:	f022 0204 	bic.w	r2, r2, #4
 8005230:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1ca      	bne.n	80051cc <HAL_RCC_OscConfig+0x1d0>
      tickstart = HAL_GetTick();
 8005236:	f7fd febb 	bl	8002fb0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800523a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800523e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005240:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005242:	0798      	lsls	r0, r3, #30
 8005244:	d5cb      	bpl.n	80051de <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005246:	f7fd feb3 	bl	8002fb0 <HAL_GetTick>
 800524a:	1bc0      	subs	r0, r0, r7
 800524c:	4540      	cmp	r0, r8
 800524e:	d9f7      	bls.n	8005240 <HAL_RCC_OscConfig+0x244>
 8005250:	e719      	b.n	8005086 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005252:	f7fd fead 	bl	8002fb0 <HAL_GetTick>
 8005256:	1bc0      	subs	r0, r0, r7
 8005258:	4540      	cmp	r0, r8
 800525a:	d9bd      	bls.n	80051d8 <HAL_RCC_OscConfig+0x1dc>
 800525c:	e713      	b.n	8005086 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800525e:	4d1a      	ldr	r5, [pc, #104]	; (80052c8 <HAL_RCC_OscConfig+0x2cc>)
 8005260:	68ab      	ldr	r3, [r5, #8]
 8005262:	f003 030c 	and.w	r3, r3, #12
 8005266:	2b08      	cmp	r3, #8
 8005268:	f43f aef4 	beq.w	8005054 <HAL_RCC_OscConfig+0x58>
 800526c:	4e1a      	ldr	r6, [pc, #104]	; (80052d8 <HAL_RCC_OscConfig+0x2dc>)
 800526e:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005270:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8005272:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005274:	d138      	bne.n	80052e8 <HAL_RCC_OscConfig+0x2ec>
        tickstart = HAL_GetTick();
 8005276:	f7fd fe9b 	bl	8002fb0 <HAL_GetTick>
 800527a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800527c:	682b      	ldr	r3, [r5, #0]
 800527e:	0199      	lsls	r1, r3, #6
 8005280:	d42c      	bmi.n	80052dc <HAL_RCC_OscConfig+0x2e0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005282:	6a22      	ldr	r2, [r4, #32]
 8005284:	69e3      	ldr	r3, [r4, #28]
 8005286:	4313      	orrs	r3, r2
 8005288:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800528a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800528e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005290:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005294:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005296:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800529a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800529c:	4c0a      	ldr	r4, [pc, #40]	; (80052c8 <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800529e:	0852      	lsrs	r2, r2, #1
 80052a0:	3a01      	subs	r2, #1
 80052a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052a6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80052a8:	2301      	movs	r3, #1
 80052aa:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80052ac:	f7fd fe80 	bl	8002fb0 <HAL_GetTick>
 80052b0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	019a      	lsls	r2, r3, #6
 80052b6:	f53f aeb6 	bmi.w	8005026 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052ba:	f7fd fe79 	bl	8002fb0 <HAL_GetTick>
 80052be:	1b40      	subs	r0, r0, r5
 80052c0:	2802      	cmp	r0, #2
 80052c2:	d9f6      	bls.n	80052b2 <HAL_RCC_OscConfig+0x2b6>
 80052c4:	e6df      	b.n	8005086 <HAL_RCC_OscConfig+0x8a>
 80052c6:	bf00      	nop
 80052c8:	40023800 	.word	0x40023800
 80052cc:	42470000 	.word	0x42470000
 80052d0:	42470e80 	.word	0x42470e80
 80052d4:	40007000 	.word	0x40007000
 80052d8:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052dc:	f7fd fe68 	bl	8002fb0 <HAL_GetTick>
 80052e0:	1bc0      	subs	r0, r0, r7
 80052e2:	2802      	cmp	r0, #2
 80052e4:	d9ca      	bls.n	800527c <HAL_RCC_OscConfig+0x280>
 80052e6:	e6ce      	b.n	8005086 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 80052e8:	f7fd fe62 	bl	8002fb0 <HAL_GetTick>
 80052ec:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ee:	682b      	ldr	r3, [r5, #0]
 80052f0:	019b      	lsls	r3, r3, #6
 80052f2:	f57f ae98 	bpl.w	8005026 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052f6:	f7fd fe5b 	bl	8002fb0 <HAL_GetTick>
 80052fa:	1b00      	subs	r0, r0, r4
 80052fc:	2802      	cmp	r0, #2
 80052fe:	d9f6      	bls.n	80052ee <HAL_RCC_OscConfig+0x2f2>
 8005300:	e6c1      	b.n	8005086 <HAL_RCC_OscConfig+0x8a>
 8005302:	bf00      	nop

08005304 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005308:	b089      	sub	sp, #36	; 0x24
 800530a:	4605      	mov	r5, r0
 800530c:	460e      	mov	r6, r1
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 800530e:	f7fd fe4f 	bl	8002fb0 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8005312:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 8005314:	4681      	mov	r9, r0
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005316:	2108      	movs	r1, #8
 8005318:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800531e:	f000 fde2 	bl	8005ee6 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_OK)
 8005322:	4604      	mov	r4, r0
 8005324:	bb40      	cbnz	r0, 8005378 <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005326:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8005328:	6828      	ldr	r0, [r5, #0]
 800532a:	0409      	lsls	r1, r1, #16
 800532c:	f000 fe6c 	bl	8006008 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_OK)
 8005330:	4604      	mov	r4, r0
 8005332:	bb08      	cbnz	r0, 8005378 <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005334:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005338:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 800533a:	2308      	movs	r3, #8
 800533c:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800533e:	2330      	movs	r3, #48	; 0x30
 8005340:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005342:	2302      	movs	r3, #2
 8005344:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005346:	9006      	str	r0, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005348:	2301      	movs	r3, #1
  SDIO_ConfigData(hsd->Instance, &config);
 800534a:	a902      	add	r1, sp, #8
 800534c:	6828      	ldr	r0, [r5, #0]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800534e:	9307      	str	r3, [sp, #28]
  SDIO_ConfigData(hsd->Instance, &config);
 8005350:	f000 fdb6 	bl	8005ec0 <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005354:	6828      	ldr	r0, [r5, #0]
 8005356:	f000 fe88 	bl	800606a <SDMMC_CmdSendSCR>
  if(errorstate != HAL_OK)
 800535a:	4604      	mov	r4, r0
 800535c:	b960      	cbnz	r0, 8005378 <SD_FindSCR+0x74>
 800535e:	4607      	mov	r7, r0
  {
    return errorstate;
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8005360:	f240 482a 	movw	r8, #1066	; 0x42a
 8005364:	6828      	ldr	r0, [r5, #0]
 8005366:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005368:	ea13 0f08 	tst.w	r3, r8
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800536c:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800536e:	d007      	beq.n	8005380 <SD_FindSCR+0x7c>
    {
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005370:	0719      	lsls	r1, r3, #28
 8005372:	d518      	bpl.n	80053a6 <SD_FindSCR+0xa2>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8005374:	2408      	movs	r4, #8
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005376:	6384      	str	r4, [r0, #56]	; 0x38
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
  }

  return HAL_SD_ERROR_NONE;
}
 8005378:	4620      	mov	r0, r4
 800537a:	b009      	add	sp, #36	; 0x24
 800537c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005380:	029b      	lsls	r3, r3, #10
 8005382:	d507      	bpl.n	8005394 <SD_FindSCR+0x90>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005384:	f000 fce4 	bl	8005d50 <SDIO_ReadFIFO>
 8005388:	ab08      	add	r3, sp, #32
 800538a:	eb03 0387 	add.w	r3, r3, r7, lsl #2
      index++;
 800538e:	3701      	adds	r7, #1
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005390:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005394:	f7fd fe0c 	bl	8002fb0 <HAL_GetTick>
 8005398:	eba0 0009 	sub.w	r0, r0, r9
 800539c:	3001      	adds	r0, #1
 800539e:	d1e1      	bne.n	8005364 <SD_FindSCR+0x60>
      return HAL_SD_ERROR_TIMEOUT;
 80053a0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80053a4:	e7e8      	b.n	8005378 <SD_FindSCR+0x74>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80053a6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80053a8:	079a      	lsls	r2, r3, #30
 80053aa:	d501      	bpl.n	80053b0 <SD_FindSCR+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80053ac:	2402      	movs	r4, #2
 80053ae:	e7e2      	b.n	8005376 <SD_FindSCR+0x72>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80053b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80053b2:	069b      	lsls	r3, r3, #26
 80053b4:	d501      	bpl.n	80053ba <SD_FindSCR+0xb6>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80053b6:	2420      	movs	r4, #32
 80053b8:	e7dd      	b.n	8005376 <SD_FindSCR+0x72>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80053ba:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80053be:	6383      	str	r3, [r0, #56]	; 0x38
 80053c0:	9b00      	ldr	r3, [sp, #0]
 80053c2:	ba1b      	rev	r3, r3
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 80053c4:	6073      	str	r3, [r6, #4]
 80053c6:	9b01      	ldr	r3, [sp, #4]
 80053c8:	ba1b      	rev	r3, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 80053ca:	6033      	str	r3, [r6, #0]
  return HAL_SD_ERROR_NONE;
 80053cc:	e7d4      	b.n	8005378 <SD_FindSCR+0x74>

080053ce <HAL_SD_GetCardCSD>:
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 80053ce:	6e43      	ldr	r3, [r0, #100]	; 0x64
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 80053d0:	0f9a      	lsrs	r2, r3, #30
 80053d2:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 80053d4:	f3c3 6283 	ubfx	r2, r3, #26, #4
 80053d8:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 80053da:	f3c3 6201 	ubfx	r2, r3, #24, #2
 80053de:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 80053e0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80053e4:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 80053e6:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 80053ea:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)tmp;
 80053ec:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 80053ee:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 80053f0:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80053f2:	0e1a      	lsrs	r2, r3, #24
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 80053f4:	0112      	lsls	r2, r2, #4
 80053f6:	80ca      	strh	r2, [r1, #6]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 80053f8:	88ca      	ldrh	r2, [r1, #6]
{
 80053fa:	b530      	push	{r4, r5, lr}
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 80053fc:	b292      	uxth	r2, r2
 80053fe:	f3c3 5403 	ubfx	r4, r3, #20, #4
 8005402:	4322      	orrs	r2, r4
 8005404:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 8005406:	f3c3 4203 	ubfx	r2, r3, #16, #4
 800540a:	720a      	strb	r2, [r1, #8]
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 800540c:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 8005410:	09d4      	lsrs	r4, r2, #7
 8005412:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8005414:	f3c2 1480 	ubfx	r4, r2, #6, #1
 8005418:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 800541a:	f3c2 1440 	ubfx	r4, r2, #5, #1
 800541e:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8005420:	f3c2 1400 	ubfx	r4, r2, #4, #1
 8005424:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 8005426:	2400      	movs	r4, #0
 8005428:	734c      	strb	r4, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 800542a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800542c:	2c00      	cmp	r4, #0
 800542e:	f040 8083 	bne.w	8005538 <HAL_SD_GetCardCSD+0x16a>
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8005432:	0292      	lsls	r2, r2, #10
 8005434:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8005438:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp) << 2U;
 800543a:	690a      	ldr	r2, [r1, #16]
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8005442:	4313      	orrs	r3, r2
 8005444:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8005446:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 8005448:	690b      	ldr	r3, [r1, #16]
 800544a:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 800544e:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 8005450:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8005454:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 8005456:	f3c2 6302 	ubfx	r3, r2, #24, #3
 800545a:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 800545c:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8005460:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 8005462:	f3c2 4382 	ubfx	r3, r2, #18, #3
 8005466:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 8005468:	0bd3      	lsrs	r3, r2, #15
 800546a:	f003 0306 	and.w	r3, r3, #6
 800546e:	760b      	strb	r3, [r1, #24]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 8005470:	7e0c      	ldrb	r4, [r1, #24]
 8005472:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8005476:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800547a:	4322      	orrs	r2, r4
 800547c:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800547e:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8005480:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005482:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8005484:	3402      	adds	r4, #2
 8005486:	40a2      	lsls	r2, r4
 8005488:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 800548a:	7a0d      	ldrb	r5, [r1, #8]
 800548c:	2401      	movs	r4, #1
 800548e:	40ac      	lsls	r4, r5
 8005490:	6584      	str	r4, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8005492:	0a64      	lsrs	r4, r4, #9
 8005494:	4362      	muls	r2, r4
 8005496:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005498:	f44f 7200 	mov.w	r2, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 800549c:	6602      	str	r2, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 800549e:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 80054a2:	005b      	lsls	r3, r3, #1
 80054a4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 80054a8:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 80054aa:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 80054ac:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 80054ae:	7e8a      	ldrb	r2, [r1, #26]
 80054b0:	f3c3 14c0 	ubfx	r4, r3, #7, #1
 80054b4:	4322      	orrs	r2, r4
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 80054b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 80054ba:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 80054bc:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 80054be:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 80054c0:	0fda      	lsrs	r2, r3, #31
 80054c2:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 80054c4:	f3c3 7241 	ubfx	r2, r3, #29, #2
 80054c8:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 80054ca:	f3c3 6282 	ubfx	r2, r3, #26, #3
 80054ce:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 80054d0:	0d9a      	lsrs	r2, r3, #22
 80054d2:	f002 020c 	and.w	r2, r2, #12
 80054d6:	77ca      	strb	r2, [r1, #31]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 80054d8:	7fca      	ldrb	r2, [r1, #31]
 80054da:	f3c3 5081 	ubfx	r0, r3, #22, #2
 80054de:	4302      	orrs	r2, r0
 80054e0:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 80054e2:	f3c3 5240 	ubfx	r2, r3, #21, #1
 80054e6:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3           = 0U;
 80054ea:	2000      	movs	r0, #0
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 80054ec:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3           = 0U;
 80054f0:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 80054f4:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 80054f8:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80054fc:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 8005500:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8005504:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 8005508:	f3c3 3240 	ubfx	r2, r3, #13, #1
 800550c:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 8005510:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8005514:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 8005518:	f3c3 2281 	ubfx	r2, r3, #10, #2
 800551c:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 8005520:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8005524:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC              = (tmp & 0x03U);
 8005528:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 800552c:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 8005530:	2301      	movs	r3, #1
 8005532:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 8005536:	bd30      	pop	{r4, r5, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005538:	2c01      	cmp	r4, #1
 800553a:	d11a      	bne.n	8005572 <HAL_SD_GetCardCSD+0x1a4>
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 800553c:	041b      	lsls	r3, r3, #16
 800553e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8005542:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8005544:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp << 8U);
 8005546:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8005548:	0e1c      	lsrs	r4, r3, #24
    pCSD->DeviceSize |= (tmp << 8U);
 800554a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800554e:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 8005550:	690c      	ldr	r4, [r1, #16]
 8005552:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005556:	4322      	orrs	r2, r4
 8005558:	610a      	str	r2, [r1, #16]
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 800555a:	690a      	ldr	r2, [r1, #16]
 800555c:	0292      	lsls	r2, r2, #10
 800555e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005562:	6542      	str	r2, [r0, #84]	; 0x54
 8005564:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8005566:	f44f 7200 	mov.w	r2, #512	; 0x200
 800556a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800556e:	6582      	str	r2, [r0, #88]	; 0x58
 8005570:	e794      	b.n	800549c <HAL_SD_GetCardCSD+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 8005572:	6803      	ldr	r3, [r0, #0]
 8005574:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005578:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800557a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800557c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005580:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005582:	2301      	movs	r3, #1
 8005584:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8005588:	4618      	mov	r0, r3
 800558a:	bd30      	pop	{r4, r5, pc}

0800558c <HAL_SD_InitCard>:
{
 800558c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800558e:	b099      	sub	sp, #100	; 0x64
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005590:	2500      	movs	r5, #0
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005592:	2376      	movs	r3, #118	; 0x76
 8005594:	930c      	str	r3, [sp, #48]	; 0x30
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005596:	950a      	str	r5, [sp, #40]	; 0x28
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005598:	950b      	str	r5, [sp, #44]	; 0x2c
  SDIO_Init(hsd->Instance, Init);
 800559a:	ab0a      	add	r3, sp, #40	; 0x28
{
 800559c:	4604      	mov	r4, r0
  SDIO_Init(hsd->Instance, Init);
 800559e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80055a2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  __HAL_SD_DISABLE(hsd); 
 80055a6:	4e6f      	ldr	r6, [pc, #444]	; (8005764 <HAL_SD_InitCard+0x1d8>)
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80055a8:	9507      	str	r5, [sp, #28]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80055aa:	9508      	str	r5, [sp, #32]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80055ac:	9509      	str	r5, [sp, #36]	; 0x24
  SDIO_Init(hsd->Instance, Init);
 80055ae:	ab07      	add	r3, sp, #28
 80055b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055b2:	6820      	ldr	r0, [r4, #0]
 80055b4:	f000 fbb0 	bl	8005d18 <SDIO_Init>
  __HAL_SD_ENABLE(hsd);
 80055b8:	2701      	movs	r7, #1
  __HAL_SD_DISABLE(hsd); 
 80055ba:	6035      	str	r5, [r6, #0]
  SDIO_PowerState_ON(hsd->Instance);
 80055bc:	6820      	ldr	r0, [r4, #0]
 80055be:	f000 fbca 	bl	8005d56 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 80055c2:	6037      	str	r7, [r6, #0]
  HAL_Delay(2U);
 80055c4:	2002      	movs	r0, #2
 80055c6:	f7fd fcf9 	bl	8002fbc <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80055ca:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 80055cc:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80055ce:	f000 fcbb 	bl	8005f48 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 80055d2:	4606      	mov	r6, r0
 80055d4:	b968      	cbnz	r0, 80055f2 <HAL_SD_InitCard+0x66>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80055d6:	6820      	ldr	r0, [r4, #0]
 80055d8:	f000 fcde 	bl	8005f98 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 80055dc:	b380      	cbz	r0, 8005640 <HAL_SD_InitCard+0xb4>
    hsd->SdCard.CardVersion = CARD_V1_X;
 80055de:	64a6      	str	r6, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80055e0:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80055e4:	9b06      	ldr	r3, [sp, #24]
 80055e6:	1c5a      	adds	r2, r3, #1
 80055e8:	42ab      	cmp	r3, r5
 80055ea:	9206      	str	r2, [sp, #24]
 80055ec:	d108      	bne.n	8005600 <HAL_SD_InitCard+0x74>
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80055ee:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    hsd->State = HAL_SD_STATE_READY;
 80055f2:	2001      	movs	r0, #1
 80055f4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80055f8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80055fa:	430e      	orrs	r6, r1
 80055fc:	63a6      	str	r6, [r4, #56]	; 0x38
    return HAL_ERROR;
 80055fe:	e081      	b.n	8005704 <HAL_SD_InitCard+0x178>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8005600:	2100      	movs	r1, #0
 8005602:	6820      	ldr	r0, [r4, #0]
 8005604:	f000 fd00 	bl	8006008 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8005608:	4601      	mov	r1, r0
 800560a:	b110      	cbz	r0, 8005612 <HAL_SD_InitCard+0x86>
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800560c:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8005610:	e7ef      	b.n	80055f2 <HAL_SD_InitCard+0x66>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8005612:	6820      	ldr	r0, [r4, #0]
 8005614:	f000 fd10 	bl	8006038 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8005618:	4601      	mov	r1, r0
 800561a:	2800      	cmp	r0, #0
 800561c:	d1f6      	bne.n	800560c <HAL_SD_InitCard+0x80>
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800561e:	6820      	ldr	r0, [r4, #0]
 8005620:	f000 fbb4 	bl	8005d8c <SDIO_GetResponse>
    while(validvoltage == 0U)
 8005624:	2800      	cmp	r0, #0
 8005626:	dadd      	bge.n	80055e4 <HAL_SD_InitCard+0x58>
    hsd->SdCard.CardType = CARD_SDSC;
 8005628:	2300      	movs	r3, #0
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800562a:	6463      	str	r3, [r4, #68]	; 0x44
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 800562c:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 800562e:	2301      	movs	r3, #1
 8005630:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8005634:	f000 fb93 	bl	8005d5e <SDIO_GetPowerState>
 8005638:	bb10      	cbnz	r0, 8005680 <HAL_SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800563a:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 800563e:	e06b      	b.n	8005718 <HAL_SD_InitCard+0x18c>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005640:	64a7      	str	r7, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8005642:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8005646:	9b06      	ldr	r3, [sp, #24]
 8005648:	1c5a      	adds	r2, r3, #1
 800564a:	42ab      	cmp	r3, r5
 800564c:	9206      	str	r2, [sp, #24]
 800564e:	d0ce      	beq.n	80055ee <HAL_SD_InitCard+0x62>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8005650:	2100      	movs	r1, #0
 8005652:	6820      	ldr	r0, [r4, #0]
 8005654:	f000 fcd8 	bl	8006008 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8005658:	4606      	mov	r6, r0
 800565a:	2800      	cmp	r0, #0
 800565c:	d1c9      	bne.n	80055f2 <HAL_SD_InitCard+0x66>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 800565e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005662:	6820      	ldr	r0, [r4, #0]
 8005664:	f000 fce8 	bl	8006038 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8005668:	4606      	mov	r6, r0
 800566a:	2800      	cmp	r0, #0
 800566c:	d1c1      	bne.n	80055f2 <HAL_SD_InitCard+0x66>
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800566e:	4601      	mov	r1, r0
 8005670:	6820      	ldr	r0, [r4, #0]
 8005672:	f000 fb8b 	bl	8005d8c <SDIO_GetResponse>
    while(validvoltage == 0U)
 8005676:	0fc3      	lsrs	r3, r0, #31
 8005678:	d0e5      	beq.n	8005646 <HAL_SD_InitCard+0xba>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800567a:	0042      	lsls	r2, r0, #1
 800567c:	d5d4      	bpl.n	8005628 <HAL_SD_InitCard+0x9c>
 800567e:	e7d4      	b.n	800562a <HAL_SD_InitCard+0x9e>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005680:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005682:	2b03      	cmp	r3, #3
 8005684:	d01a      	beq.n	80056bc <HAL_SD_InitCard+0x130>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005686:	6820      	ldr	r0, [r4, #0]
 8005688:	f000 fd07 	bl	800609a <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800568c:	4605      	mov	r5, r0
 800568e:	2800      	cmp	r0, #0
 8005690:	d142      	bne.n	8005718 <HAL_SD_InitCard+0x18c>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005692:	4601      	mov	r1, r0
 8005694:	6820      	ldr	r0, [r4, #0]
 8005696:	f000 fb79 	bl	8005d8c <SDIO_GetResponse>
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800569a:	2104      	movs	r1, #4
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800569c:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800569e:	6820      	ldr	r0, [r4, #0]
 80056a0:	f000 fb74 	bl	8005d8c <SDIO_GetResponse>
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80056a4:	2108      	movs	r1, #8
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80056a6:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80056a8:	6820      	ldr	r0, [r4, #0]
 80056aa:	f000 fb6f 	bl	8005d8c <SDIO_GetResponse>
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80056ae:	210c      	movs	r1, #12
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80056b0:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80056b2:	6820      	ldr	r0, [r4, #0]
 80056b4:	f000 fb6a 	bl	8005d8c <SDIO_GetResponse>
 80056b8:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80056bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80056be:	2b03      	cmp	r3, #3
 80056c0:	d122      	bne.n	8005708 <HAL_SD_InitCard+0x17c>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80056c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80056c4:	2b03      	cmp	r3, #3
 80056c6:	d12e      	bne.n	8005726 <HAL_SD_InitCard+0x19a>
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80056c8:	2104      	movs	r1, #4
 80056ca:	6820      	ldr	r0, [r4, #0]
 80056cc:	f000 fb5e 	bl	8005d8c <SDIO_GetResponse>
 80056d0:	0d00      	lsrs	r0, r0, #20
 80056d2:	64e0      	str	r0, [r4, #76]	; 0x4c
  HAL_SD_GetCardCSD(hsd, &CSD);
 80056d4:	a90d      	add	r1, sp, #52	; 0x34
 80056d6:	4620      	mov	r0, r4
 80056d8:	f7ff fe79 	bl	80053ce <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80056dc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80056de:	6820      	ldr	r0, [r4, #0]
 80056e0:	0412      	lsls	r2, r2, #16
 80056e2:	2300      	movs	r3, #0
 80056e4:	f000 fc17 	bl	8005f16 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80056e8:	4605      	mov	r5, r0
 80056ea:	b9a8      	cbnz	r0, 8005718 <HAL_SD_InitCard+0x18c>
  SDIO_Init(hsd->Instance, hsd->Init);
 80056ec:	f104 0310 	add.w	r3, r4, #16
 80056f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80056f4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80056f8:	1d23      	adds	r3, r4, #4
 80056fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056fc:	6820      	ldr	r0, [r4, #0]
 80056fe:	f000 fb0b 	bl	8005d18 <SDIO_Init>
  return HAL_OK;
 8005702:	4628      	mov	r0, r5
}
 8005704:	b019      	add	sp, #100	; 0x64
 8005706:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005708:	f10d 0116 	add.w	r1, sp, #22
 800570c:	6820      	ldr	r0, [r4, #0]
 800570e:	f000 fcef 	bl	80060f0 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005712:	4605      	mov	r5, r0
 8005714:	2800      	cmp	r0, #0
 8005716:	d0d4      	beq.n	80056c2 <HAL_SD_InitCard+0x136>
    hsd->State = HAL_SD_STATE_READY;
 8005718:	2001      	movs	r0, #1
 800571a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800571e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005720:	431d      	orrs	r5, r3
 8005722:	63a5      	str	r5, [r4, #56]	; 0x38
 8005724:	e7ee      	b.n	8005704 <HAL_SD_InitCard+0x178>
    hsd->SdCard.RelCardAdd = sd_rca;
 8005726:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800572a:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800572c:	6820      	ldr	r0, [r4, #0]
 800572e:	0409      	lsls	r1, r1, #16
 8005730:	f000 fcc8 	bl	80060c4 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005734:	4605      	mov	r5, r0
 8005736:	2800      	cmp	r0, #0
 8005738:	d1ee      	bne.n	8005718 <HAL_SD_InitCard+0x18c>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800573a:	4601      	mov	r1, r0
 800573c:	6820      	ldr	r0, [r4, #0]
 800573e:	f000 fb25 	bl	8005d8c <SDIO_GetResponse>
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005742:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005744:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005746:	6820      	ldr	r0, [r4, #0]
 8005748:	f000 fb20 	bl	8005d8c <SDIO_GetResponse>
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800574c:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800574e:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005750:	6820      	ldr	r0, [r4, #0]
 8005752:	f000 fb1b 	bl	8005d8c <SDIO_GetResponse>
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005756:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005758:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800575a:	6820      	ldr	r0, [r4, #0]
 800575c:	f000 fb16 	bl	8005d8c <SDIO_GetResponse>
 8005760:	6720      	str	r0, [r4, #112]	; 0x70
 8005762:	e7b1      	b.n	80056c8 <HAL_SD_InitCard+0x13c>
 8005764:	422580a0 	.word	0x422580a0

08005768 <HAL_SD_Init>:
{
 8005768:	b510      	push	{r4, lr}
  if(hsd == NULL)
 800576a:	4604      	mov	r4, r0
 800576c:	b1a0      	cbz	r0, 8005798 <HAL_SD_Init+0x30>
  if(hsd->State == HAL_SD_STATE_RESET)
 800576e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8005772:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005776:	b913      	cbnz	r3, 800577e <HAL_SD_Init+0x16>
    hsd->Lock = HAL_UNLOCKED;
 8005778:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 800577a:	f002 ff7f 	bl	800867c <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 800577e:	2303      	movs	r3, #3
 8005780:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_InitCard(hsd);
 8005784:	4620      	mov	r0, r4
 8005786:	f7ff ff01 	bl	800558c <HAL_SD_InitCard>
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800578a:	2000      	movs	r0, #0
  hsd->State = HAL_SD_STATE_READY;
 800578c:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800578e:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8005790:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8005792:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8005796:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005798:	2001      	movs	r0, #1
}
 800579a:	bd10      	pop	{r4, pc}

0800579c <HAL_SD_ConfigWideBusOperation>:
{
 800579c:	b570      	push	{r4, r5, r6, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 800579e:	2303      	movs	r3, #3
 80057a0:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80057a4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80057a6:	2b03      	cmp	r3, #3
{
 80057a8:	b08a      	sub	sp, #40	; 0x28
 80057aa:	4604      	mov	r4, r0
 80057ac:	460e      	mov	r6, r1
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80057ae:	d002      	beq.n	80057b6 <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDIO_BUS_WIDE_8B)
 80057b0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80057b4:	d103      	bne.n	80057be <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80057b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80057b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057bc:	e056      	b.n	800586c <HAL_SD_ConfigWideBusOperation+0xd0>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80057be:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80057c2:	d12d      	bne.n	8005820 <HAL_SD_ConfigWideBusOperation+0x84>
  uint32_t scr[2U] = {0U, 0U};
 80057c4:	2100      	movs	r1, #0
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80057c6:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0U, 0U};
 80057c8:	9104      	str	r1, [sp, #16]
 80057ca:	9105      	str	r1, [sp, #20]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80057cc:	f000 fade 	bl	8005d8c <SDIO_GetResponse>
 80057d0:	0180      	lsls	r0, r0, #6
 80057d2:	d420      	bmi.n	8005816 <HAL_SD_ConfigWideBusOperation+0x7a>
  errorstate = SD_FindSCR(hsd, scr);
 80057d4:	a904      	add	r1, sp, #16
 80057d6:	4620      	mov	r0, r4
 80057d8:	f7ff fd94 	bl	8005304 <SD_FindSCR>
  if(errorstate != HAL_OK)
 80057dc:	b960      	cbnz	r0, 80057f8 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80057de:	9b05      	ldr	r3, [sp, #20]
 80057e0:	0359      	lsls	r1, r3, #13
 80057e2:	d51a      	bpl.n	800581a <HAL_SD_ConfigWideBusOperation+0x7e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80057e4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80057e6:	6820      	ldr	r0, [r4, #0]
 80057e8:	0409      	lsls	r1, r1, #16
 80057ea:	f000 fc0d 	bl	8006008 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 80057ee:	b918      	cbnz	r0, 80057f8 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80057f0:	2102      	movs	r1, #2
 80057f2:	6820      	ldr	r0, [r4, #0]
 80057f4:	f000 fce8 	bl	80061c8 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 80057f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80057fa:	4318      	orrs	r0, r3
      hsd->ErrorCode |= errorstate;
 80057fc:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80057fe:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8005800:	2d00      	cmp	r5, #0
 8005802:	d035      	beq.n	8005870 <HAL_SD_ConfigWideBusOperation+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005804:	6823      	ldr	r3, [r4, #0]
 8005806:	f240 52ff 	movw	r2, #1535	; 0x5ff
    hsd->State = HAL_SD_STATE_READY;
 800580a:	2001      	movs	r0, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800580c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800580e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 8005812:	b00a      	add	sp, #40	; 0x28
 8005814:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005816:	4630      	mov	r0, r6
 8005818:	e7ee      	b.n	80057f8 <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800581a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800581e:	e7eb      	b.n	80057f8 <HAL_SD_ConfigWideBusOperation+0x5c>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005820:	bb09      	cbnz	r1, 8005866 <HAL_SD_ConfigWideBusOperation+0xca>
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005822:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0U, 0U};
 8005824:	9104      	str	r1, [sp, #16]
 8005826:	9105      	str	r1, [sp, #20]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005828:	f000 fab0 	bl	8005d8c <SDIO_GetResponse>
 800582c:	0182      	lsls	r2, r0, #6
 800582e:	d414      	bmi.n	800585a <HAL_SD_ConfigWideBusOperation+0xbe>
  errorstate = SD_FindSCR(hsd, scr);
 8005830:	a904      	add	r1, sp, #16
 8005832:	4620      	mov	r0, r4
 8005834:	f7ff fd66 	bl	8005304 <SD_FindSCR>
  if(errorstate != HAL_OK)
 8005838:	b960      	cbnz	r0, 8005854 <HAL_SD_ConfigWideBusOperation+0xb8>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800583a:	9b05      	ldr	r3, [sp, #20]
 800583c:	03db      	lsls	r3, r3, #15
 800583e:	d50f      	bpl.n	8005860 <HAL_SD_ConfigWideBusOperation+0xc4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005840:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005842:	6820      	ldr	r0, [r4, #0]
 8005844:	0409      	lsls	r1, r1, #16
 8005846:	f000 fbdf 	bl	8006008 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 800584a:	b918      	cbnz	r0, 8005854 <HAL_SD_ConfigWideBusOperation+0xb8>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800584c:	4601      	mov	r1, r0
 800584e:	6820      	ldr	r0, [r4, #0]
 8005850:	f000 fcba 	bl	80061c8 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8005854:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005856:	4308      	orrs	r0, r1
 8005858:	e7d0      	b.n	80057fc <HAL_SD_ConfigWideBusOperation+0x60>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800585a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800585e:	e7f9      	b.n	8005854 <HAL_SD_ConfigWideBusOperation+0xb8>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005860:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005864:	e7f6      	b.n	8005854 <HAL_SD_ConfigWideBusOperation+0xb8>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005866:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005868:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800586c:	63a3      	str	r3, [r4, #56]	; 0x38
 800586e:	e7c6      	b.n	80057fe <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005870:	6863      	ldr	r3, [r4, #4]
 8005872:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005874:	68a3      	ldr	r3, [r4, #8]
 8005876:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005878:	68e3      	ldr	r3, [r4, #12]
 800587a:	9306      	str	r3, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800587c:	6963      	ldr	r3, [r4, #20]
 800587e:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005880:	69a3      	ldr	r3, [r4, #24]
 8005882:	9309      	str	r3, [sp, #36]	; 0x24
    Init.BusWide             = WideMode;
 8005884:	9607      	str	r6, [sp, #28]
    SDIO_Init(hsd->Instance, Init);
 8005886:	ab0a      	add	r3, sp, #40	; 0x28
 8005888:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800588c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8005890:	ab04      	add	r3, sp, #16
 8005892:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005894:	6820      	ldr	r0, [r4, #0]
 8005896:	f000 fa3f 	bl	8005d18 <SDIO_Init>
  hsd->State = HAL_SD_STATE_READY;
 800589a:	2301      	movs	r3, #1
 800589c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 80058a0:	4628      	mov	r0, r5
 80058a2:	e7b6      	b.n	8005812 <HAL_SD_ConfigWideBusOperation+0x76>

080058a4 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80058a4:	b570      	push	{r4, r5, r6, lr}
 80058a6:	460e      	mov	r6, r1
 80058a8:	4615      	mov	r5, r2
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80058aa:	4604      	mov	r4, r0
 80058ac:	b310      	cbz	r0, 80058f4 <HAL_SRAM_Init+0x50>
  {
     return HAL_ERROR;
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80058ae:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 80058b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80058b6:	b91b      	cbnz	r3, 80058c0 <HAL_SRAM_Init+0x1c>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80058b8:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80058bc:	f002 ff8c 	bl	80087d8 <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80058c0:	f104 0108 	add.w	r1, r4, #8
 80058c4:	6820      	ldr	r0, [r4, #0]
 80058c6:	f000 f95f 	bl	8005b88 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80058ca:	68a2      	ldr	r2, [r4, #8]
 80058cc:	6820      	ldr	r0, [r4, #0]
 80058ce:	4631      	mov	r1, r6
 80058d0:	f000 f998 	bl	8005c04 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80058d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80058d6:	68a2      	ldr	r2, [r4, #8]
 80058d8:	6860      	ldr	r0, [r4, #4]
 80058da:	4629      	mov	r1, r5
 80058dc:	f000 f9b8 	bl	8005c50 <FSMC_NORSRAM_Extended_Timing_Init>
 80058e0:	68a1      	ldr	r1, [r4, #8]
 80058e2:	6822      	ldr	r2, [r4, #0]
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80058e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80058e8:	f043 0301 	orr.w	r3, r3, #1
 80058ec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  return HAL_OK;
 80058f0:	2000      	movs	r0, #0
 80058f2:	bd70      	pop	{r4, r5, r6, pc}
     return HAL_ERROR;
 80058f4:	2001      	movs	r0, #1
}
 80058f6:	bd70      	pop	{r4, r5, r6, pc}

080058f8 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80058fc:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80058fe:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8005900:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005902:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8005904:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8005908:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800590a:	6133      	str	r3, [r6, #16]
{
 800590c:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800590e:	6883      	ldr	r3, [r0, #8]
 8005910:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8005912:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005914:	4303      	orrs	r3, r0
 8005916:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8005918:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800591c:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800591e:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005922:	430b      	orrs	r3, r1
 8005924:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8005926:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8005928:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800592a:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800592c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8005930:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005932:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8005936:	6173      	str	r3, [r6, #20]
 8005938:	4b7a      	ldr	r3, [pc, #488]	; (8005b24 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800593a:	d17c      	bne.n	8005a36 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800593c:	429e      	cmp	r6, r3
 800593e:	d003      	beq.n	8005948 <UART_SetConfig+0x50>
 8005940:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005944:	429e      	cmp	r6, r3
 8005946:	d144      	bne.n	80059d2 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005948:	f7ff f994 	bl	8004c74 <HAL_RCC_GetPCLK2Freq>
 800594c:	2519      	movs	r5, #25
 800594e:	fb05 f300 	mul.w	r3, r5, r0
 8005952:	6860      	ldr	r0, [r4, #4]
 8005954:	f04f 0964 	mov.w	r9, #100	; 0x64
 8005958:	0040      	lsls	r0, r0, #1
 800595a:	fbb3 f3f0 	udiv	r3, r3, r0
 800595e:	fbb3 f3f9 	udiv	r3, r3, r9
 8005962:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005966:	f7ff f985 	bl	8004c74 <HAL_RCC_GetPCLK2Freq>
 800596a:	6863      	ldr	r3, [r4, #4]
 800596c:	4368      	muls	r0, r5
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	fbb0 f7f3 	udiv	r7, r0, r3
 8005974:	f7ff f97e 	bl	8004c74 <HAL_RCC_GetPCLK2Freq>
 8005978:	6863      	ldr	r3, [r4, #4]
 800597a:	4368      	muls	r0, r5
 800597c:	005b      	lsls	r3, r3, #1
 800597e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005982:	fbb3 f3f9 	udiv	r3, r3, r9
 8005986:	fb09 7313 	mls	r3, r9, r3, r7
 800598a:	00db      	lsls	r3, r3, #3
 800598c:	3332      	adds	r3, #50	; 0x32
 800598e:	fbb3 f3f9 	udiv	r3, r3, r9
 8005992:	005b      	lsls	r3, r3, #1
 8005994:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8005998:	f7ff f96c 	bl	8004c74 <HAL_RCC_GetPCLK2Freq>
 800599c:	6862      	ldr	r2, [r4, #4]
 800599e:	4368      	muls	r0, r5
 80059a0:	0052      	lsls	r2, r2, #1
 80059a2:	fbb0 faf2 	udiv	sl, r0, r2
 80059a6:	f7ff f965 	bl	8004c74 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80059aa:	6863      	ldr	r3, [r4, #4]
 80059ac:	4368      	muls	r0, r5
 80059ae:	005b      	lsls	r3, r3, #1
 80059b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80059b4:	fbb3 f3f9 	udiv	r3, r3, r9
 80059b8:	fb09 a313 	mls	r3, r9, r3, sl
 80059bc:	00db      	lsls	r3, r3, #3
 80059be:	3332      	adds	r3, #50	; 0x32
 80059c0:	fbb3 f3f9 	udiv	r3, r3, r9
 80059c4:	f003 0307 	and.w	r3, r3, #7
 80059c8:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80059ca:	443b      	add	r3, r7
 80059cc:	60b3      	str	r3, [r6, #8]
 80059ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80059d2:	f7ff f93f 	bl	8004c54 <HAL_RCC_GetPCLK1Freq>
 80059d6:	2519      	movs	r5, #25
 80059d8:	fb05 f300 	mul.w	r3, r5, r0
 80059dc:	6860      	ldr	r0, [r4, #4]
 80059de:	f04f 0964 	mov.w	r9, #100	; 0x64
 80059e2:	0040      	lsls	r0, r0, #1
 80059e4:	fbb3 f3f0 	udiv	r3, r3, r0
 80059e8:	fbb3 f3f9 	udiv	r3, r3, r9
 80059ec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80059f0:	f7ff f930 	bl	8004c54 <HAL_RCC_GetPCLK1Freq>
 80059f4:	6863      	ldr	r3, [r4, #4]
 80059f6:	4368      	muls	r0, r5
 80059f8:	005b      	lsls	r3, r3, #1
 80059fa:	fbb0 f7f3 	udiv	r7, r0, r3
 80059fe:	f7ff f929 	bl	8004c54 <HAL_RCC_GetPCLK1Freq>
 8005a02:	6863      	ldr	r3, [r4, #4]
 8005a04:	4368      	muls	r0, r5
 8005a06:	005b      	lsls	r3, r3, #1
 8005a08:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a0c:	fbb3 f3f9 	udiv	r3, r3, r9
 8005a10:	fb09 7313 	mls	r3, r9, r3, r7
 8005a14:	00db      	lsls	r3, r3, #3
 8005a16:	3332      	adds	r3, #50	; 0x32
 8005a18:	fbb3 f3f9 	udiv	r3, r3, r9
 8005a1c:	005b      	lsls	r3, r3, #1
 8005a1e:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8005a22:	f7ff f917 	bl	8004c54 <HAL_RCC_GetPCLK1Freq>
 8005a26:	6862      	ldr	r2, [r4, #4]
 8005a28:	4368      	muls	r0, r5
 8005a2a:	0052      	lsls	r2, r2, #1
 8005a2c:	fbb0 faf2 	udiv	sl, r0, r2
 8005a30:	f7ff f910 	bl	8004c54 <HAL_RCC_GetPCLK1Freq>
 8005a34:	e7b9      	b.n	80059aa <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a36:	429e      	cmp	r6, r3
 8005a38:	d002      	beq.n	8005a40 <UART_SetConfig+0x148>
 8005a3a:	4b3b      	ldr	r3, [pc, #236]	; (8005b28 <UART_SetConfig+0x230>)
 8005a3c:	429e      	cmp	r6, r3
 8005a3e:	d140      	bne.n	8005ac2 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005a40:	f7ff f918 	bl	8004c74 <HAL_RCC_GetPCLK2Freq>
 8005a44:	6867      	ldr	r7, [r4, #4]
 8005a46:	2519      	movs	r5, #25
 8005a48:	f04f 0964 	mov.w	r9, #100	; 0x64
 8005a4c:	fb05 f300 	mul.w	r3, r5, r0
 8005a50:	00bf      	lsls	r7, r7, #2
 8005a52:	fbb3 f3f7 	udiv	r3, r3, r7
 8005a56:	fbb3 f3f9 	udiv	r3, r3, r9
 8005a5a:	011f      	lsls	r7, r3, #4
 8005a5c:	f7ff f90a 	bl	8004c74 <HAL_RCC_GetPCLK2Freq>
 8005a60:	6863      	ldr	r3, [r4, #4]
 8005a62:	4368      	muls	r0, r5
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	fbb0 f8f3 	udiv	r8, r0, r3
 8005a6a:	f7ff f903 	bl	8004c74 <HAL_RCC_GetPCLK2Freq>
 8005a6e:	6863      	ldr	r3, [r4, #4]
 8005a70:	4368      	muls	r0, r5
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a78:	fbb3 f3f9 	udiv	r3, r3, r9
 8005a7c:	fb09 8313 	mls	r3, r9, r3, r8
 8005a80:	011b      	lsls	r3, r3, #4
 8005a82:	3332      	adds	r3, #50	; 0x32
 8005a84:	fbb3 f3f9 	udiv	r3, r3, r9
 8005a88:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8005a8c:	f7ff f8f2 	bl	8004c74 <HAL_RCC_GetPCLK2Freq>
 8005a90:	6862      	ldr	r2, [r4, #4]
 8005a92:	4368      	muls	r0, r5
 8005a94:	0092      	lsls	r2, r2, #2
 8005a96:	fbb0 faf2 	udiv	sl, r0, r2
 8005a9a:	f7ff f8eb 	bl	8004c74 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005a9e:	6863      	ldr	r3, [r4, #4]
 8005aa0:	4368      	muls	r0, r5
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	fbb0 f3f3 	udiv	r3, r0, r3
 8005aa8:	fbb3 f3f9 	udiv	r3, r3, r9
 8005aac:	fb09 a313 	mls	r3, r9, r3, sl
 8005ab0:	011b      	lsls	r3, r3, #4
 8005ab2:	3332      	adds	r3, #50	; 0x32
 8005ab4:	fbb3 f3f9 	udiv	r3, r3, r9
 8005ab8:	f003 030f 	and.w	r3, r3, #15
 8005abc:	ea43 0308 	orr.w	r3, r3, r8
 8005ac0:	e783      	b.n	80059ca <UART_SetConfig+0xd2>
 8005ac2:	f7ff f8c7 	bl	8004c54 <HAL_RCC_GetPCLK1Freq>
 8005ac6:	6867      	ldr	r7, [r4, #4]
 8005ac8:	2519      	movs	r5, #25
 8005aca:	f04f 0964 	mov.w	r9, #100	; 0x64
 8005ace:	fb05 f300 	mul.w	r3, r5, r0
 8005ad2:	00bf      	lsls	r7, r7, #2
 8005ad4:	fbb3 f3f7 	udiv	r3, r3, r7
 8005ad8:	fbb3 f3f9 	udiv	r3, r3, r9
 8005adc:	011f      	lsls	r7, r3, #4
 8005ade:	f7ff f8b9 	bl	8004c54 <HAL_RCC_GetPCLK1Freq>
 8005ae2:	6863      	ldr	r3, [r4, #4]
 8005ae4:	4368      	muls	r0, r5
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	fbb0 f8f3 	udiv	r8, r0, r3
 8005aec:	f7ff f8b2 	bl	8004c54 <HAL_RCC_GetPCLK1Freq>
 8005af0:	6863      	ldr	r3, [r4, #4]
 8005af2:	4368      	muls	r0, r5
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005afa:	fbb3 f3f9 	udiv	r3, r3, r9
 8005afe:	fb09 8313 	mls	r3, r9, r3, r8
 8005b02:	011b      	lsls	r3, r3, #4
 8005b04:	3332      	adds	r3, #50	; 0x32
 8005b06:	fbb3 f3f9 	udiv	r3, r3, r9
 8005b0a:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8005b0e:	f7ff f8a1 	bl	8004c54 <HAL_RCC_GetPCLK1Freq>
 8005b12:	6862      	ldr	r2, [r4, #4]
 8005b14:	4368      	muls	r0, r5
 8005b16:	0092      	lsls	r2, r2, #2
 8005b18:	fbb0 faf2 	udiv	sl, r0, r2
 8005b1c:	f7ff f89a 	bl	8004c54 <HAL_RCC_GetPCLK1Freq>
 8005b20:	e7bd      	b.n	8005a9e <UART_SetConfig+0x1a6>
 8005b22:	bf00      	nop
 8005b24:	40011000 	.word	0x40011000
 8005b28:	40011400 	.word	0x40011400

08005b2c <HAL_UART_Init>:
{
 8005b2c:	b510      	push	{r4, lr}
  if(huart == NULL)
 8005b2e:	4604      	mov	r4, r0
 8005b30:	b340      	cbz	r0, 8005b84 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8005b32:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8005b36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005b3a:	b91b      	cbnz	r3, 8005b44 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8005b3c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8005b40:	f002 fdea 	bl	8008718 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8005b44:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005b46:	2324      	movs	r3, #36	; 0x24
 8005b48:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8005b4c:	68d3      	ldr	r3, [r2, #12]
 8005b4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b52:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8005b54:	4620      	mov	r0, r4
 8005b56:	f7ff fecf 	bl	80058f8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b5a:	6823      	ldr	r3, [r4, #0]
 8005b5c:	691a      	ldr	r2, [r3, #16]
 8005b5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b62:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b64:	695a      	ldr	r2, [r3, #20]
 8005b66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b6a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8005b6c:	68da      	ldr	r2, [r3, #12]
 8005b6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b72:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b74:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8005b76:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b78:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8005b7a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8005b7e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8005b82:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005b84:	2001      	movs	r0, #1
}
 8005b86:	bd10      	pop	{r4, pc}

08005b88 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8005b88:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8005b8a:	680d      	ldr	r5, [r1, #0]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 8005b8c:	4e1c      	ldr	r6, [pc, #112]	; (8005c00 <FSMC_NORSRAM_Init+0x78>)
  tmpr = Device->BTCR[Init->NSBank];
 8005b8e:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
                     Init->MemoryType           |\
 8005b92:	f8d1 e008 	ldr.w	lr, [r1, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005b96:	684a      	ldr	r2, [r1, #4]
                     Init->WriteOperation       |\
                     Init->WaitSignal           |\
                     Init->ExtendedMode         |\
                     Init->AsynchronousWait     |\
                     Init->WriteBurst           |\
                     Init->ContinuousClock      |\
 8005b98:	6b4f      	ldr	r7, [r1, #52]	; 0x34
                     Init->PageSize             |\
                     Init->WriteFifo);
 8005b9a:	6b8c      	ldr	r4, [r1, #56]	; 0x38
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 8005b9c:	401e      	ands	r6, r3
                     Init->MemoryType           |\
 8005b9e:	68cb      	ldr	r3, [r1, #12]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005ba0:	ea4e 0202 	orr.w	r2, lr, r2
                     Init->MemoryType           |\
 8005ba4:	4313      	orrs	r3, r2
                     Init->MemoryDataWidth      |\
 8005ba6:	690a      	ldr	r2, [r1, #16]
 8005ba8:	4313      	orrs	r3, r2
                     Init->BurstAccessMode      |\
 8005baa:	694a      	ldr	r2, [r1, #20]
 8005bac:	4313      	orrs	r3, r2
                     Init->WaitSignalPolarity   |\
 8005bae:	69ca      	ldr	r2, [r1, #28]
 8005bb0:	4313      	orrs	r3, r2
                     Init->WaitSignalActive     |\
 8005bb2:	6a0a      	ldr	r2, [r1, #32]
 8005bb4:	4313      	orrs	r3, r2
                     Init->WriteOperation       |\
 8005bb6:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8005bb8:	4313      	orrs	r3, r2
                     Init->WaitSignal           |\
 8005bba:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8005bbc:	4313      	orrs	r3, r2
                     Init->ExtendedMode         |\
 8005bbe:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005bc0:	4313      	orrs	r3, r2
                     Init->AsynchronousWait     |\
 8005bc2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8005bc4:	4313      	orrs	r3, r2
                     Init->ContinuousClock      |\
 8005bc6:	6bca      	ldr	r2, [r1, #60]	; 0x3c
                     Init->WriteBurst           |\
 8005bc8:	433b      	orrs	r3, r7
                     Init->ContinuousClock      |\
 8005bca:	4313      	orrs	r3, r2
                     Init->PageSize             |\
 8005bcc:	4323      	orrs	r3, r4
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005bce:	4333      	orrs	r3, r6
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005bd0:	f1be 0f08 	cmp.w	lr, #8
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005bd4:	bf08      	it	eq
 8005bd6:	f043 0340 	orreq.w	r3, r3, #64	; 0x40

  Device->BTCR[Init->NSBank] = tmpr;

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8005bda:	f5b7 1f80 	cmp.w	r7, #1048576	; 0x100000
  Device->BTCR[Init->NSBank] = tmpr;
 8005bde:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8005be2:	d108      	bne.n	8005bf6 <FSMC_NORSRAM_Init+0x6e>
 8005be4:	b14d      	cbz	r5, 8005bfa <FSMC_NORSRAM_Init+0x72>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8005be6:	6803      	ldr	r3, [r0, #0]
 8005be8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bec:	6003      	str	r3, [r0, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 8005bee:	6803      	ldr	r3, [r0, #0]
 8005bf0:	431c      	orrs	r4, r3
 8005bf2:	6004      	str	r4, [r0, #0]
 8005bf4:	e001      	b.n	8005bfa <FSMC_NORSRAM_Init+0x72>
  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 8005bf6:	2d00      	cmp	r5, #0
 8005bf8:	d1f9      	bne.n	8005bee <FSMC_NORSRAM_Init+0x66>
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
}
 8005bfa:	2000      	movs	r0, #0
 8005bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	ffc00480 	.word	0xffc00480

08005c04 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005c04:	b570      	push	{r4, r5, r6, lr}
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005c06:	680b      	ldr	r3, [r1, #0]
 8005c08:	698e      	ldr	r6, [r1, #24]
                    ((Timing->AddressHoldTime) << 4U)          |\
                    ((Timing->DataSetupTime) << 8U)            |\
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8005c0a:	690c      	ldr	r4, [r1, #16]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005c0c:	4333      	orrs	r3, r6
                    ((Timing->AddressHoldTime) << 4U)          |\
 8005c0e:	684e      	ldr	r6, [r1, #4]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005c10:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
                    ((Timing->DataSetupTime) << 8U)            |\
 8005c14:	688e      	ldr	r6, [r1, #8]
 8005c16:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005c1a:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005c1e:	68ce      	ldr	r6, [r1, #12]
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8005c20:	6949      	ldr	r1, [r1, #20]
  tmpr = Device->BTCR[Bank + 1U];
 8005c22:	6855      	ldr	r5, [r2, #4]
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8005c24:	3c01      	subs	r4, #1
 8005c26:	0524      	lsls	r4, r4, #20
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005c28:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8005c2c:	4323      	orrs	r3, r4
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8005c2e:	3902      	subs	r1, #2
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8005c30:	f005 4540 	and.w	r5, r5, #3221225472	; 0xc0000000
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005c34:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005c38:	432b      	orrs	r3, r5
                    (Timing->AccessMode));
  
  Device->BTCR[Bank + 1] = tmpr; 
 8005c3a:	6053      	str	r3, [r2, #4]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8005c3c:	6803      	ldr	r3, [r0, #0]
 8005c3e:	02db      	lsls	r3, r3, #11
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 8005c40:	bf41      	itttt	mi
 8005c42:	6843      	ldrmi	r3, [r0, #4]
 8005c44:	f423 0370 	bicmi.w	r3, r3, #15728640	; 0xf00000
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 8005c48:	431c      	orrmi	r4, r3
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 8005c4a:	6044      	strmi	r4, [r0, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
}
 8005c4c:	2000      	movs	r0, #0
 8005c4e:	bd70      	pop	{r4, r5, r6, pc}

08005c50 <FSMC_NORSRAM_Extended_Timing_Init>:
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005c50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
{
 8005c54:	b530      	push	{r4, r5, lr}
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005c56:	d114      	bne.n	8005c82 <FSMC_NORSRAM_Extended_Timing_Init+0x32>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8005c58:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8005c5c:	4c0a      	ldr	r4, [pc, #40]	; (8005c88 <FSMC_NORSRAM_Extended_Timing_Init+0x38>)
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
                      ((Timing->AddressHoldTime) << 4U)          |\
                      ((Timing->DataSetupTime) << 8U)            |\
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005c5e:	698d      	ldr	r5, [r1, #24]
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8005c60:	401c      	ands	r4, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005c62:	680b      	ldr	r3, [r1, #0]
 8005c64:	432b      	orrs	r3, r5
                      ((Timing->AddressHoldTime) << 4U)          |\
 8005c66:	684d      	ldr	r5, [r1, #4]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005c68:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
                      ((Timing->DataSetupTime) << 8U)            |\
 8005c6c:	688d      	ldr	r5, [r1, #8]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005c6e:	68c9      	ldr	r1, [r1, #12]
 8005c70:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8005c74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005c78:	4323      	orrs	r3, r4
    
    Device->BWTR[Bank] = tmpr;
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005c7a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }   
  
  return HAL_OK;  
}
 8005c7e:	2000      	movs	r0, #0
 8005c80:	bd30      	pop	{r4, r5, pc}
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005c82:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8005c86:	e7f8      	b.n	8005c7a <FSMC_NORSRAM_Extended_Timing_Init+0x2a>
 8005c88:	cff00000 	.word	0xcff00000

08005c8c <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005c8c:	4b11      	ldr	r3, [pc, #68]	; (8005cd4 <SDMMC_GetCmdResp2+0x48>)
 8005c8e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c98:	f241 3388 	movw	r3, #5000	; 0x1388
 8005c9c:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8005c9e:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8005ca2:	d314      	bcc.n	8005cce <SDMMC_GetCmdResp2+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005ca4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005ca6:	f012 0f45 	tst.w	r2, #69	; 0x45
 8005caa:	d0f8      	beq.n	8005c9e <SDMMC_GetCmdResp2+0x12>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005cac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005cae:	075b      	lsls	r3, r3, #29
 8005cb0:	d503      	bpl.n	8005cba <SDMMC_GetCmdResp2+0x2e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005cb2:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005cb4:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	4770      	bx	lr
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005cba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005cbc:	f013 0301 	ands.w	r3, r3, #1
 8005cc0:	d001      	beq.n	8005cc6 <SDMMC_GetCmdResp2+0x3a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e7f6      	b.n	8005cb4 <SDMMC_GetCmdResp2+0x28>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8005cc6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005cca:	6382      	str	r2, [r0, #56]	; 0x38
 8005ccc:	e7f3      	b.n	8005cb6 <SDMMC_GetCmdResp2+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8005cce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005cd2:	e7f0      	b.n	8005cb6 <SDMMC_GetCmdResp2+0x2a>
 8005cd4:	2000013c 	.word	0x2000013c

08005cd8 <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005cd8:	4b0e      	ldr	r3, [pc, #56]	; (8005d14 <SDMMC_GetCmdResp3+0x3c>)
 8005cda:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	fbb3 f2f2 	udiv	r2, r3, r2
 8005ce4:	f241 3388 	movw	r3, #5000	; 0x1388
 8005ce8:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8005cea:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8005cee:	d30e      	bcc.n	8005d0e <SDMMC_GetCmdResp3+0x36>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005cf0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005cf2:	f012 0f45 	tst.w	r2, #69	; 0x45
 8005cf6:	d0f8      	beq.n	8005cea <SDMMC_GetCmdResp3+0x12>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005cf8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005cfa:	f013 0304 	ands.w	r3, r3, #4
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005cfe:	bf15      	itete	ne
 8005d00:	2304      	movne	r3, #4
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8005d02:	f240 52ff 	movweq	r2, #1535	; 0x5ff
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005d06:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8005d08:	6382      	streq	r2, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8005d0e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005d12:	4770      	bx	lr
 8005d14:	2000013c 	.word	0x2000013c

08005d18 <SDIO_Init>:
{
 8005d18:	b084      	sub	sp, #16
 8005d1a:	b510      	push	{r4, lr}
 8005d1c:	ac03      	add	r4, sp, #12
 8005d1e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8005d22:	9904      	ldr	r1, [sp, #16]
 8005d24:	9b03      	ldr	r3, [sp, #12]
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005d26:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8005d28:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 8005d2a:	9905      	ldr	r1, [sp, #20]
 8005d2c:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 8005d2e:	9906      	ldr	r1, [sp, #24]
 8005d30:	430b      	orrs	r3, r1
             Init.BusWide             |\
 8005d32:	9907      	ldr	r1, [sp, #28]
 8005d34:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8005d36:	9908      	ldr	r1, [sp, #32]
}
 8005d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005d3c:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.HardwareFlowControl |\
 8005d40:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005d42:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8005d46:	4313      	orrs	r3, r2
 8005d48:	6043      	str	r3, [r0, #4]
}
 8005d4a:	b004      	add	sp, #16
 8005d4c:	2000      	movs	r0, #0
 8005d4e:	4770      	bx	lr

08005d50 <SDIO_ReadFIFO>:
 8005d50:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8005d54:	4770      	bx	lr

08005d56 <SDIO_PowerState_ON>:
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005d56:	2303      	movs	r3, #3
 8005d58:	6003      	str	r3, [r0, #0]
}
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	4770      	bx	lr

08005d5e <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005d5e:	6800      	ldr	r0, [r0, #0]
}
 8005d60:	f000 0003 	and.w	r0, r0, #3
 8005d64:	4770      	bx	lr

08005d66 <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 8005d66:	680b      	ldr	r3, [r1, #0]
{
 8005d68:	b510      	push	{r4, lr}
  SDIOx->ARG = Command->Argument;
 8005d6a:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005d6c:	688c      	ldr	r4, [r1, #8]
 8005d6e:	684b      	ldr	r3, [r1, #4]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005d70:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005d72:	4323      	orrs	r3, r4
                       Command->Response         |\
 8005d74:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 8005d76:	6909      	ldr	r1, [r1, #16]
                       Command->Response         |\
 8005d78:	4323      	orrs	r3, r4
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005d7a:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
                       Command->WaitForInterrupt |\
 8005d7e:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005d80:	f022 020f 	bic.w	r2, r2, #15
 8005d84:	4313      	orrs	r3, r2
 8005d86:	60c3      	str	r3, [r0, #12]
}
 8005d88:	2000      	movs	r0, #0
 8005d8a:	bd10      	pop	{r4, pc}

08005d8c <SDIO_GetResponse>:
{
 8005d8c:	b082      	sub	sp, #8
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8005d8e:	3014      	adds	r0, #20
 8005d90:	4401      	add	r1, r0
  __IO uint32_t tmp = 0U;
 8005d92:	2300      	movs	r3, #0
 8005d94:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8005d96:	9101      	str	r1, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 8005d98:	9b01      	ldr	r3, [sp, #4]
 8005d9a:	6818      	ldr	r0, [r3, #0]
}  
 8005d9c:	b002      	add	sp, #8
 8005d9e:	4770      	bx	lr

08005da0 <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005da0:	4b45      	ldr	r3, [pc, #276]	; (8005eb8 <SDMMC_GetCmdResp1+0x118>)
{
 8005da2:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 8005daa:	fbb3 f3f4 	udiv	r3, r3, r4
 8005dae:	435a      	muls	r2, r3
    if (count-- == 0U)
 8005db0:	2a00      	cmp	r2, #0
 8005db2:	d04a      	beq.n	8005e4a <SDMMC_GetCmdResp1+0xaa>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005db4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005db6:	f013 0f45 	tst.w	r3, #69	; 0x45
 8005dba:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8005dbe:	d0f7      	beq.n	8005db0 <SDMMC_GetCmdResp1+0x10>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005dc0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005dc2:	075c      	lsls	r4, r3, #29
 8005dc4:	d503      	bpl.n	8005dce <SDMMC_GetCmdResp1+0x2e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005dc6:	2304      	movs	r3, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005dc8:	6383      	str	r3, [r0, #56]	; 0x38
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	bd10      	pop	{r4, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005dce:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005dd0:	f013 0301 	ands.w	r3, r3, #1
 8005dd4:	d001      	beq.n	8005dda <SDMMC_GetCmdResp1+0x3a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e7f6      	b.n	8005dc8 <SDMMC_GetCmdResp1+0x28>
  return (uint8_t)(SDIOx->RESPCMD);
 8005dda:	6902      	ldr	r2, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005ddc:	b2d2      	uxtb	r2, r2
 8005dde:	4291      	cmp	r1, r2
 8005de0:	d136      	bne.n	8005e50 <SDMMC_GetCmdResp1+0xb0>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8005de2:	f240 52ff 	movw	r2, #1535	; 0x5ff
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005de6:	4619      	mov	r1, r3
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8005de8:	6382      	str	r2, [r0, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005dea:	f7ff ffcf 	bl	8005d8c <SDIO_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005dee:	4b33      	ldr	r3, [pc, #204]	; (8005ebc <SDMMC_GetCmdResp1+0x11c>)
 8005df0:	4003      	ands	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d0e9      	beq.n	8005dca <SDMMC_GetCmdResp1+0x2a>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005df6:	2800      	cmp	r0, #0
 8005df8:	db2c      	blt.n	8005e54 <SDMMC_GetCmdResp1+0xb4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005dfa:	0042      	lsls	r2, r0, #1
 8005dfc:	d42d      	bmi.n	8005e5a <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005dfe:	0084      	lsls	r4, r0, #2
 8005e00:	d42d      	bmi.n	8005e5e <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005e02:	00c1      	lsls	r1, r0, #3
 8005e04:	d42d      	bmi.n	8005e62 <SDMMC_GetCmdResp1+0xc2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005e06:	0102      	lsls	r2, r0, #4
 8005e08:	d42e      	bmi.n	8005e68 <SDMMC_GetCmdResp1+0xc8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005e0a:	0144      	lsls	r4, r0, #5
 8005e0c:	d42f      	bmi.n	8005e6e <SDMMC_GetCmdResp1+0xce>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005e0e:	01c1      	lsls	r1, r0, #7
 8005e10:	d430      	bmi.n	8005e74 <SDMMC_GetCmdResp1+0xd4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005e12:	0202      	lsls	r2, r0, #8
 8005e14:	d431      	bmi.n	8005e7a <SDMMC_GetCmdResp1+0xda>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005e16:	0244      	lsls	r4, r0, #9
 8005e18:	d432      	bmi.n	8005e80 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005e1a:	0281      	lsls	r1, r0, #10
 8005e1c:	d433      	bmi.n	8005e86 <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005e1e:	02c2      	lsls	r2, r0, #11
 8005e20:	d434      	bmi.n	8005e8c <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005e22:	0344      	lsls	r4, r0, #13
 8005e24:	d435      	bmi.n	8005e92 <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005e26:	0381      	lsls	r1, r0, #14
 8005e28:	d436      	bmi.n	8005e98 <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005e2a:	03c2      	lsls	r2, r0, #15
 8005e2c:	d437      	bmi.n	8005e9e <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005e2e:	0404      	lsls	r4, r0, #16
 8005e30:	d438      	bmi.n	8005ea4 <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005e32:	0441      	lsls	r1, r0, #17
 8005e34:	d439      	bmi.n	8005eaa <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005e36:	0482      	lsls	r2, r0, #18
 8005e38:	d43a      	bmi.n	8005eb0 <SDMMC_GetCmdResp1+0x110>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005e3a:	f010 0f08 	tst.w	r0, #8
 8005e3e:	bf14      	ite	ne
 8005e40:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8005e44:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8005e48:	e7bf      	b.n	8005dca <SDMMC_GetCmdResp1+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8005e4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005e4e:	e7bc      	b.n	8005dca <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e7ba      	b.n	8005dca <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005e54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e58:	e7b7      	b.n	8005dca <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005e5a:	2340      	movs	r3, #64	; 0x40
 8005e5c:	e7b5      	b.n	8005dca <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005e5e:	2380      	movs	r3, #128	; 0x80
 8005e60:	e7b3      	b.n	8005dca <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005e62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e66:	e7b0      	b.n	8005dca <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005e68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e6c:	e7ad      	b.n	8005dca <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005e6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e72:	e7aa      	b.n	8005dca <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005e74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e78:	e7a7      	b.n	8005dca <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005e7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e7e:	e7a4      	b.n	8005dca <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005e80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e84:	e7a1      	b.n	8005dca <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005e86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e8a:	e79e      	b.n	8005dca <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CC_ERR;
 8005e8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e90:	e79b      	b.n	8005dca <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005e92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e96:	e798      	b.n	8005dca <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005e98:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005e9c:	e795      	b.n	8005dca <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005e9e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005ea2:	e792      	b.n	8005dca <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005ea4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005ea8:	e78f      	b.n	8005dca <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005eaa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005eae:	e78c      	b.n	8005dca <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_RESET;
 8005eb0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005eb4:	e789      	b.n	8005dca <SDMMC_GetCmdResp1+0x2a>
 8005eb6:	bf00      	nop
 8005eb8:	2000013c 	.word	0x2000013c
 8005ebc:	fdffe008 	.word	0xfdffe008

08005ec0 <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 8005ec0:	680b      	ldr	r3, [r1, #0]
{
 8005ec2:	b510      	push	{r4, lr}
  SDIOx->DTIMER = Data->DataTimeOut;
 8005ec4:	6243      	str	r3, [r0, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 8005ec6:	684b      	ldr	r3, [r1, #4]
 8005ec8:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005eca:	68cc      	ldr	r4, [r1, #12]
 8005ecc:	688b      	ldr	r3, [r1, #8]
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005ece:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005ed0:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 8005ed2:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 8005ed4:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 8005ed6:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8005ed8:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005eda:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8005ee2:	2000      	movs	r0, #0
 8005ee4:	bd10      	pop	{r4, pc}

08005ee6 <SDMMC_CmdBlockLength>:
{
 8005ee6:	b530      	push	{r4, r5, lr}
 8005ee8:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005eea:	2340      	movs	r3, #64	; 0x40
 8005eec:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005eee:	2300      	movs	r3, #0
{
 8005ef0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005ef2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005ef4:	2410      	movs	r4, #16
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ef6:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ef8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005efa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005efe:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005f00:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f02:	f7ff ff30 	bl	8005d66 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f0a:	4621      	mov	r1, r4
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	f7ff ff47 	bl	8005da0 <SDMMC_GetCmdResp1>
}
 8005f12:	b007      	add	sp, #28
 8005f14:	bd30      	pop	{r4, r5, pc}

08005f16 <SDMMC_CmdSelDesel>:
{
 8005f16:	b530      	push	{r4, r5, lr}
 8005f18:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f1a:	2340      	movs	r3, #64	; 0x40
 8005f1c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f1e:	2300      	movs	r3, #0
{
 8005f20:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005f22:	2407      	movs	r4, #7
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f24:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f26:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f28:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005f2c:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f2e:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005f30:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f32:	f7ff ff18 	bl	8005d66 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f3a:	4621      	mov	r1, r4
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	f7ff ff2f 	bl	8005da0 <SDMMC_GetCmdResp1>
}
 8005f42:	b007      	add	sp, #28
 8005f44:	bd30      	pop	{r4, r5, pc}
	...

08005f48 <SDMMC_CmdGoIdleState>:
{
 8005f48:	b510      	push	{r4, lr}
 8005f4a:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0U;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005f50:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005f52:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f54:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f56:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f5c:	9305      	str	r3, [sp, #20]
{
 8005f5e:	4604      	mov	r4, r0
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f60:	f7ff ff01 	bl	8005d66 <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005f64:	4b0b      	ldr	r3, [pc, #44]	; (8005f94 <SDMMC_CmdGoIdleState+0x4c>)
 8005f66:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f70:	f241 3388 	movw	r3, #5000	; 0x1388
 8005f74:	4353      	muls	r3, r2
    if (count-- == 0U)
 8005f76:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8005f7a:	d308      	bcc.n	8005f8e <SDMMC_CmdGoIdleState+0x46>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005f7c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005f7e:	0612      	lsls	r2, r2, #24
 8005f80:	d5f9      	bpl.n	8005f76 <SDMMC_CmdGoIdleState+0x2e>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8005f82:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8005f86:	63a3      	str	r3, [r4, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8005f88:	2000      	movs	r0, #0
}
 8005f8a:	b006      	add	sp, #24
 8005f8c:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8005f8e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 8005f92:	e7fa      	b.n	8005f8a <SDMMC_CmdGoIdleState+0x42>
 8005f94:	2000013c 	.word	0x2000013c

08005f98 <SDMMC_CmdOperCond>:
{
 8005f98:	b510      	push	{r4, lr}
 8005f9a:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005f9c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005fa0:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005fa2:	2308      	movs	r3, #8
 8005fa4:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005fa6:	2340      	movs	r3, #64	; 0x40
 8005fa8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005faa:	2300      	movs	r3, #0
 8005fac:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005fae:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005fb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fb4:	9305      	str	r3, [sp, #20]
{
 8005fb6:	4604      	mov	r4, r0
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005fb8:	f7ff fed5 	bl	8005d66 <SDIO_SendCommand>
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005fbc:	4b11      	ldr	r3, [pc, #68]	; (8006004 <SDMMC_CmdOperCond+0x6c>)
 8005fbe:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	fbb3 f2f2 	udiv	r2, r3, r2
 8005fc8:	f241 3388 	movw	r3, #5000	; 0x1388
 8005fcc:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8005fce:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8005fd2:	d314      	bcc.n	8005ffe <SDMMC_CmdOperCond+0x66>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005fd4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005fd6:	f012 0f45 	tst.w	r2, #69	; 0x45
 8005fda:	d0f8      	beq.n	8005fce <SDMMC_CmdOperCond+0x36>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005fdc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005fde:	f012 0204 	ands.w	r2, r2, #4
 8005fe2:	d004      	beq.n	8005fee <SDMMC_CmdOperCond+0x56>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005fe4:	2340      	movs	r3, #64	; 0x40
 8005fe6:	63a3      	str	r3, [r4, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005fe8:	2004      	movs	r0, #4
}
 8005fea:	b006      	add	sp, #24
 8005fec:	bd10      	pop	{r4, pc}
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005fee:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005ff0:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8005ff4:	d0f9      	beq.n	8005fea <SDMMC_CmdOperCond+0x52>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005ff6:	2340      	movs	r3, #64	; 0x40
 8005ff8:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005ffa:	4610      	mov	r0, r2
 8005ffc:	e7f5      	b.n	8005fea <SDMMC_CmdOperCond+0x52>
      return SDMMC_ERROR_TIMEOUT;
 8005ffe:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8006002:	e7f2      	b.n	8005fea <SDMMC_CmdOperCond+0x52>
 8006004:	2000013c 	.word	0x2000013c

08006008 <SDMMC_CmdAppCommand>:
{
 8006008:	b530      	push	{r4, r5, lr}
 800600a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800600c:	2340      	movs	r3, #64	; 0x40
 800600e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006010:	2300      	movs	r3, #0
{
 8006012:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006014:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006016:	2437      	movs	r4, #55	; 0x37
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006018:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800601a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800601c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006020:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006022:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006024:	f7ff fe9f 	bl	8005d66 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006028:	f241 3288 	movw	r2, #5000	; 0x1388
 800602c:	4621      	mov	r1, r4
 800602e:	4628      	mov	r0, r5
 8006030:	f7ff feb6 	bl	8005da0 <SDMMC_GetCmdResp1>
}
 8006034:	b007      	add	sp, #28
 8006036:	bd30      	pop	{r4, r5, pc}

08006038 <SDMMC_CmdAppOperCommand>:
{
 8006038:	b510      	push	{r4, lr}
 800603a:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800603c:	2329      	movs	r3, #41	; 0x29
 800603e:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8006040:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006044:	2340      	movs	r3, #64	; 0x40
 8006046:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8006048:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800604c:	2300      	movs	r3, #0
{
 800604e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8006050:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006052:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006054:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800605a:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800605c:	f7ff fe83 	bl	8005d66 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006060:	4620      	mov	r0, r4
 8006062:	f7ff fe39 	bl	8005cd8 <SDMMC_GetCmdResp3>
}
 8006066:	b006      	add	sp, #24
 8006068:	bd10      	pop	{r4, pc}

0800606a <SDMMC_CmdSendSCR>:
{
 800606a:	b530      	push	{r4, r5, lr}
 800606c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 800606e:	2300      	movs	r3, #0
{
 8006070:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8006072:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006074:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006076:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006078:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800607a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800607c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006080:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006082:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006084:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006086:	f7ff fe6e 	bl	8005d66 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800608a:	f241 3288 	movw	r2, #5000	; 0x1388
 800608e:	4621      	mov	r1, r4
 8006090:	4628      	mov	r0, r5
 8006092:	f7ff fe85 	bl	8005da0 <SDMMC_GetCmdResp1>
}
 8006096:	b007      	add	sp, #28
 8006098:	bd30      	pop	{r4, r5, pc}

0800609a <SDMMC_CmdSendCID>:
{
 800609a:	b510      	push	{r4, lr}
 800609c:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0U;
 800609e:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80060a0:	2202      	movs	r2, #2
{
 80060a2:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80060a4:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80060a6:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060a8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80060aa:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060b0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80060b2:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060b4:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060b6:	f7ff fe56 	bl	8005d66 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80060ba:	4620      	mov	r0, r4
 80060bc:	f7ff fde6 	bl	8005c8c <SDMMC_GetCmdResp2>
}
 80060c0:	b006      	add	sp, #24
 80060c2:	bd10      	pop	{r4, pc}

080060c4 <SDMMC_CmdSendCSD>:
{
 80060c4:	b510      	push	{r4, lr}
 80060c6:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80060c8:	2309      	movs	r3, #9
 80060ca:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80060cc:	23c0      	movs	r3, #192	; 0xc0
 80060ce:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060d0:	2300      	movs	r3, #0
{
 80060d2:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80060d4:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060d6:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060d8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060de:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060e0:	f7ff fe41 	bl	8005d66 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80060e4:	4620      	mov	r0, r4
 80060e6:	f7ff fdd1 	bl	8005c8c <SDMMC_GetCmdResp2>
}
 80060ea:	b006      	add	sp, #24
 80060ec:	bd10      	pop	{r4, pc}
	...

080060f0 <SDMMC_CmdSetRelAdd>:
{
 80060f0:	b530      	push	{r4, r5, lr}
 80060f2:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 80060f4:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80060f6:	2203      	movs	r2, #3
  sdmmc_cmdinit.Argument         = 0U;
 80060f8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80060fa:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060fc:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060fe:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006100:	f44f 6380 	mov.w	r3, #1024	; 0x400
{
 8006104:	460d      	mov	r5, r1
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006106:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006108:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800610a:	9305      	str	r3, [sp, #20]
{
 800610c:	4604      	mov	r4, r0
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800610e:	f7ff fe2a 	bl	8005d66 <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006112:	4b20      	ldr	r3, [pc, #128]	; (8006194 <SDMMC_CmdSetRelAdd+0xa4>)
 8006114:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	fbb3 f2f2 	udiv	r2, r3, r2
 800611e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006122:	4353      	muls	r3, r2
    if (count-- == 0U)
 8006124:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8006128:	d32b      	bcc.n	8006182 <SDMMC_CmdSetRelAdd+0x92>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800612a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800612c:	f012 0f45 	tst.w	r2, #69	; 0x45
 8006130:	d0f8      	beq.n	8006124 <SDMMC_CmdSetRelAdd+0x34>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006132:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006134:	075a      	lsls	r2, r3, #29
 8006136:	d503      	bpl.n	8006140 <SDMMC_CmdSetRelAdd+0x50>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006138:	2004      	movs	r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800613a:	63a0      	str	r0, [r4, #56]	; 0x38
}
 800613c:	b007      	add	sp, #28
 800613e:	bd30      	pop	{r4, r5, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006140:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006142:	f011 0101 	ands.w	r1, r1, #1
 8006146:	d001      	beq.n	800614c <SDMMC_CmdSetRelAdd+0x5c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006148:	2001      	movs	r0, #1
 800614a:	e7f6      	b.n	800613a <SDMMC_CmdSetRelAdd+0x4a>
  return (uint8_t)(SDIOx->RESPCMD);
 800614c:	6923      	ldr	r3, [r4, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800614e:	b2db      	uxtb	r3, r3
 8006150:	2b03      	cmp	r3, #3
 8006152:	d119      	bne.n	8006188 <SDMMC_CmdSetRelAdd+0x98>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8006154:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8006158:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800615a:	4620      	mov	r0, r4
 800615c:	f7ff fe16 	bl	8005d8c <SDIO_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006160:	f410 4360 	ands.w	r3, r0, #57344	; 0xe000
 8006164:	d103      	bne.n	800616e <SDMMC_CmdSetRelAdd+0x7e>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006166:	0c00      	lsrs	r0, r0, #16
 8006168:	8028      	strh	r0, [r5, #0]
    return SDMMC_ERROR_NONE;
 800616a:	4618      	mov	r0, r3
 800616c:	e7e6      	b.n	800613c <SDMMC_CmdSetRelAdd+0x4c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800616e:	0443      	lsls	r3, r0, #17
 8006170:	d40c      	bmi.n	800618c <SDMMC_CmdSetRelAdd+0x9c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006172:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8006176:	bf14      	ite	ne
 8006178:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 800617c:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8006180:	e7dc      	b.n	800613c <SDMMC_CmdSetRelAdd+0x4c>
      return SDMMC_ERROR_TIMEOUT;
 8006182:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8006186:	e7d9      	b.n	800613c <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006188:	2001      	movs	r0, #1
 800618a:	e7d7      	b.n	800613c <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800618c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006190:	e7d4      	b.n	800613c <SDMMC_CmdSetRelAdd+0x4c>
 8006192:	bf00      	nop
 8006194:	2000013c 	.word	0x2000013c

08006198 <SDMMC_CmdSwitch>:
{
 8006198:	b530      	push	{r4, r5, lr}
 800619a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800619c:	2340      	movs	r3, #64	; 0x40
 800619e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061a0:	2300      	movs	r3, #0
{
 80061a2:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 80061a4:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 80061a6:	2406      	movs	r4, #6
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061a8:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061aa:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061b0:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 80061b2:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061b4:	f7ff fdd7 	bl	8005d66 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_HS_SWITCH, SDIO_CMDTIMEOUT);
 80061b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80061bc:	4621      	mov	r1, r4
 80061be:	4628      	mov	r0, r5
 80061c0:	f7ff fdee 	bl	8005da0 <SDMMC_GetCmdResp1>
}
 80061c4:	b007      	add	sp, #28
 80061c6:	bd30      	pop	{r4, r5, pc}

080061c8 <SDMMC_CmdBusWidth>:
 80061c8:	f7ff bfe6 	b.w	8006198 <SDMMC_CmdSwitch>

080061cc <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061cc:	b084      	sub	sp, #16
 80061ce:	b538      	push	{r3, r4, r5, lr}
 80061d0:	ad05      	add	r5, sp, #20
 80061d2:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061d8:	2b01      	cmp	r3, #1
{
 80061da:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061dc:	d126      	bne.n	800622c <USB_CoreInit+0x60>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061de:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80061e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061e4:	6383      	str	r3, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80061e6:	68c3      	ldr	r3, [r0, #12]
 80061e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80061ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061f0:	60c3      	str	r3, [r0, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80061f2:	68c3      	ldr	r3, [r0, #12]
 80061f4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80061f8:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 80061fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80061fc:	2b01      	cmp	r3, #1
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80061fe:	bf02      	ittt	eq
 8006200:	68c3      	ldreq	r3, [r0, #12]
 8006202:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8006206:	60c3      	streq	r3, [r0, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8006208:	f000 f88a 	bl	8006320 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
  }
 
  if(cfg.dma_enable == ENABLE)
 800620c:	9b08      	ldr	r3, [sp, #32]
 800620e:	2b01      	cmp	r3, #1
 8006210:	d107      	bne.n	8006222 <USB_CoreInit+0x56>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006212:	68a3      	ldr	r3, [r4, #8]
 8006214:	f043 0306 	orr.w	r3, r3, #6
 8006218:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800621a:	68a3      	ldr	r3, [r4, #8]
 800621c:	f043 0320 	orr.w	r3, r3, #32
 8006220:	60a3      	str	r3, [r4, #8]
  }  

  return HAL_OK;
}
 8006222:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006226:	2000      	movs	r0, #0
 8006228:	b004      	add	sp, #16
 800622a:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800622c:	68c3      	ldr	r3, [r0, #12]
 800622e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006232:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 8006234:	f000 f874 	bl	8006320 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8006238:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800623c:	63a3      	str	r3, [r4, #56]	; 0x38
 800623e:	e7e5      	b.n	800620c <USB_CoreInit+0x40>

08006240 <USB_EnableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006240:	6883      	ldr	r3, [r0, #8]
 8006242:	f043 0301 	orr.w	r3, r3, #1
 8006246:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8006248:	2000      	movs	r0, #0
 800624a:	4770      	bx	lr

0800624c <USB_DisableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800624c:	6883      	ldr	r3, [r0, #8]
 800624e:	f023 0301 	bic.w	r3, r3, #1
 8006252:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8006254:	2000      	movs	r0, #0
 8006256:	4770      	bx	lr

08006258 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8006258:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 800625a:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 800625c:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 800625e:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006262:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 8006264:	d108      	bne.n	8006278 <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8006266:	68c3      	ldr	r3, [r0, #12]
 8006268:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800626c:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50U);
 800626e:	2032      	movs	r0, #50	; 0x32
 8006270:	f7fc fea4 	bl	8002fbc <HAL_Delay>
  
  return HAL_OK;
}
 8006274:	2000      	movs	r0, #0
 8006276:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 8006278:	2900      	cmp	r1, #0
 800627a:	d1f8      	bne.n	800626e <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 800627c:	68c3      	ldr	r3, [r0, #12]
 800627e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006282:	60c3      	str	r3, [r0, #12]
 8006284:	e7f3      	b.n	800626e <USB_SetCurrentMode+0x16>
	...

08006288 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8006288:	0189      	lsls	r1, r1, #6
 800628a:	f041 0120 	orr.w	r1, r1, #32
 800628e:	4a06      	ldr	r2, [pc, #24]	; (80062a8 <USB_FlushTxFifo+0x20>)
 8006290:	6101      	str	r1, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8006292:	3a01      	subs	r2, #1
 8006294:	d005      	beq.n	80062a2 <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006296:	6903      	ldr	r3, [r0, #16]
 8006298:	f013 0320 	ands.w	r3, r3, #32
 800629c:	d1f9      	bne.n	8006292 <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 800629e:	4618      	mov	r0, r3
 80062a0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80062a2:	2003      	movs	r0, #3
}
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	00030d41 	.word	0x00030d41

080062ac <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80062ac:	2310      	movs	r3, #16
 80062ae:	4a06      	ldr	r2, [pc, #24]	; (80062c8 <USB_FlushRxFifo+0x1c>)
 80062b0:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 80062b2:	3a01      	subs	r2, #1
 80062b4:	d005      	beq.n	80062c2 <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80062b6:	6903      	ldr	r3, [r0, #16]
 80062b8:	f013 0310 	ands.w	r3, r3, #16
 80062bc:	d1f9      	bne.n	80062b2 <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 80062be:	4618      	mov	r0, r3
 80062c0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80062c2:	2003      	movs	r0, #3
}
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	00030d41 	.word	0x00030d41

080062cc <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80062cc:	b510      	push	{r4, lr}
 80062ce:	f89d 4008 	ldrb.w	r4, [sp, #8]
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
 80062d2:	b94c      	cbnz	r4, 80062e8 <USB_WritePacket+0x1c>
  {
    count32b =  (len + 3U) / 4U;
 80062d4:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++, src += 4U)
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80062d6:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 80062da:	f023 0303 	bic.w	r3, r3, #3
 80062de:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 80062e2:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++, src += 4U)
 80062e4:	4299      	cmp	r1, r3
 80062e6:	d101      	bne.n	80062ec <USB_WritePacket+0x20>
    }
  }
  return HAL_OK;
}
 80062e8:	2000      	movs	r0, #0
 80062ea:	bd10      	pop	{r4, pc}
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80062ec:	f851 0b04 	ldr.w	r0, [r1], #4
 80062f0:	6010      	str	r0, [r2, #0]
 80062f2:	e7f7      	b.n	80062e4 <USB_WritePacket+0x18>

080062f4 <USB_ReadPacket>:
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
 80062f4:	3203      	adds	r2, #3
 80062f6:	f022 0203 	bic.w	r2, r2, #3
 80062fa:	440a      	add	r2, r1
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 80062fc:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8006300:	4291      	cmp	r1, r2
 8006302:	d101      	bne.n	8006308 <USB_ReadPacket+0x14>
    
  }
  return ((void *)dest);
}
 8006304:	4608      	mov	r0, r1
 8006306:	4770      	bx	lr
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8006308:	6803      	ldr	r3, [r0, #0]
 800630a:	f841 3b04 	str.w	r3, [r1], #4
 800630e:	e7f7      	b.n	8006300 <USB_ReadPacket+0xc>

08006310 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 8006310:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 8006312:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 8006314:	4010      	ands	r0, r2
 8006316:	4770      	bx	lr

08006318 <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 8006318:	6940      	ldr	r0, [r0, #20]
}
 800631a:	f000 0001 	and.w	r0, r0, #1
 800631e:	4770      	bx	lr

08006320 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006320:	4b0a      	ldr	r3, [pc, #40]	; (800634c <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006322:	3b01      	subs	r3, #1
 8006324:	d101      	bne.n	800632a <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8006326:	2003      	movs	r0, #3
 8006328:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800632a:	6902      	ldr	r2, [r0, #16]
 800632c:	2a00      	cmp	r2, #0
 800632e:	daf8      	bge.n	8006322 <USB_CoreReset+0x2>
  
  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006330:	6903      	ldr	r3, [r0, #16]
 8006332:	4a06      	ldr	r2, [pc, #24]	; (800634c <USB_CoreReset+0x2c>)
 8006334:	f043 0301 	orr.w	r3, r3, #1
 8006338:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800633a:	3a01      	subs	r2, #1
 800633c:	d0f3      	beq.n	8006326 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800633e:	6903      	ldr	r3, [r0, #16]
 8006340:	f013 0301 	ands.w	r3, r3, #1
 8006344:	d1f9      	bne.n	800633a <USB_CoreReset+0x1a>
  
  return HAL_OK;
 8006346:	4618      	mov	r0, r3
}
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	00030d41 	.word	0x00030d41

08006350 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006350:	b084      	sub	sp, #16
 8006352:	b538      	push	{r3, r4, r5, lr}
 8006354:	4604      	mov	r4, r0
 8006356:	a805      	add	r0, sp, #20
 8006358:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i;
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800635c:	2300      	movs	r3, #0
 800635e:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  
  /* Activate VBUS Sensing B */
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || \
    defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006362:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006364:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006368:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSBSEN);
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */

  /* Disable the FS/LS support mode only */
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 800636a:	9b07      	ldr	r3, [sp, #28]
 800636c:	2b03      	cmp	r3, #3
     (USBx != USB_OTG_FS))
  {
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
 800636e:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 8006372:	d13c      	bne.n	80063ee <USB_HostInit+0x9e>
 8006374:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8006378:	d039      	beq.n	80063ee <USB_HostInit+0x9e>
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
 800637a:	f043 0304 	orr.w	r3, r3, #4
 800637e:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  {
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);  
  }

  /* Make sure the FIFOs are flushed. */
  USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006382:	2110      	movs	r1, #16
 8006384:	4620      	mov	r0, r4
 8006386:	f7ff ff7f 	bl	8006288 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 800638a:	4620      	mov	r0, r4
 800638c:	f7ff ff8e 	bl	80062ac <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006390:	2300      	movs	r3, #0
 8006392:	9906      	ldr	r1, [sp, #24]
 8006394:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006398:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    USBx_HC(i)->HCINTMSK = 0U;
 800639c:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 800639e:	428b      	cmp	r3, r1
 80063a0:	d12a      	bne.n	80063f8 <USB_HostInit+0xa8>
  }
  
  /* Enable VBUS driving */
  USB_DriveVbus(USBx, 1U);
 80063a2:	2101      	movs	r1, #1
 80063a4:	4620      	mov	r0, r4
 80063a6:	f000 f85a 	bl	800645e <USB_DriveVbus>
  
  HAL_Delay(200U);
 80063aa:	20c8      	movs	r0, #200	; 0xc8
 80063ac:	f7fc fe06 	bl	8002fbc <HAL_Delay>
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80063b0:	2300      	movs	r3, #0
 80063b2:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
  
  if(USBx == USB_OTG_FS)
 80063b4:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  USBx->GINTSTS = 0xFFFFFFFFU;
 80063b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063bc:	6163      	str	r3, [r4, #20]
  if(USBx == USB_OTG_FS)
 80063be:	d120      	bne.n	8006402 <USB_HostInit+0xb2>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U; 
 80063c0:	2380      	movs	r3, #128	; 0x80
 80063c2:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x60U << 16U)& USB_OTG_NPTXFD) | 0x80U);
 80063c4:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 80063c8:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0x40U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80063ca:	4b13      	ldr	r3, [pc, #76]	; (8006418 <USB_HostInit+0xc8>)
 80063cc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100U << 16U)& USB_OTG_NPTXFD) | 0x200U);
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
  }
  
  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 80063d0:	9b08      	ldr	r3, [sp, #32]
 80063d2:	b91b      	cbnz	r3, 80063dc <USB_HostInit+0x8c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 80063d4:	69a3      	ldr	r3, [r4, #24]
 80063d6:	f043 0310 	orr.w	r3, r3, #16
 80063da:	61a3      	str	r3, [r4, #24]
  }
  
  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
 80063dc:	69a2      	ldr	r2, [r4, #24]
 80063de:	4b0f      	ldr	r3, [pc, #60]	; (800641c <USB_HostInit+0xcc>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             |USB_OTG_GINTSTS_DISCINT|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
}
 80063e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063e8:	2000      	movs	r0, #0
 80063ea:	b004      	add	sp, #16
 80063ec:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);  
 80063ee:	f023 0304 	bic.w	r3, r3, #4
 80063f2:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 80063f6:	e7c4      	b.n	8006382 <USB_HostInit+0x32>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80063f8:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 80063fa:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 80063fc:	60d5      	str	r5, [r2, #12]
 80063fe:	3220      	adds	r2, #32
 8006400:	e7cd      	b.n	800639e <USB_HostInit+0x4e>
    USBx->GRXFSIZ  = 0x200U; 
 8006402:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006406:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100U << 16U)& USB_OTG_NPTXFD) | 0x200U);
 8006408:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 800640c:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800640e:	4b04      	ldr	r3, [pc, #16]	; (8006420 <USB_HostInit+0xd0>)
 8006410:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8006414:	e7dc      	b.n	80063d0 <USB_HostInit+0x80>
 8006416:	bf00      	nop
 8006418:	004000e0 	.word	0x004000e0
 800641c:	a3200008 	.word	0xa3200008
 8006420:	00e00300 	.word	0x00e00300

08006424 <USB_InitFSLSPClkSel>:
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock 
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq)
{
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006424:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8006428:	f023 0303 	bic.w	r3, r3, #3
{
 800642c:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800642e:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 8006432:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 8006436:	f001 0303 	and.w	r3, r1, #3
 800643a:	4323      	orrs	r3, r4
  
  if (freq ==  HCFG_48_MHZ)
 800643c:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800643e:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 8006442:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq ==  HCFG_48_MHZ)
 8006446:	d104      	bne.n	8006452 <USB_InitFSLSPClkSel+0x2e>
  {
    USBx_HOST->HFIR = 48000U;
 8006448:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800644c:	6053      	str	r3, [r2, #4]
  else if (freq ==  HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
  } 
  return HAL_OK;  
}
 800644e:	2000      	movs	r0, #0
 8006450:	bd10      	pop	{r4, pc}
  else if (freq ==  HCFG_6_MHZ)
 8006452:	2902      	cmp	r1, #2
    USBx_HOST->HFIR = 6000U;
 8006454:	bf04      	itt	eq
 8006456:	f241 7370 	movweq	r3, #6000	; 0x1770
 800645a:	6053      	streq	r3, [r2, #4]
 800645c:	e7f7      	b.n	800644e <USB_InitFSLSPClkSel+0x2a>

0800645e <USB_DriveVbus>:
  *           0 : VBUS Active 
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus (USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800645e:	b082      	sub	sp, #8
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 8006460:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8006464:	9301      	str	r3, [sp, #4]
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 8006466:	9b01      	ldr	r3, [sp, #4]
 8006468:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800646c:	9301      	str	r3, [sp, #4]
                         USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800646e:	9b01      	ldr	r3, [sp, #4]
 8006470:	04da      	lsls	r2, r3, #19
 8006472:	d406      	bmi.n	8006482 <USB_DriveVbus+0x24>
 8006474:	2901      	cmp	r1, #1
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0); 
 8006476:	bf02      	ittt	eq
 8006478:	9b01      	ldreq	r3, [sp, #4]
 800647a:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800647e:	f8c0 3440 	streq.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006482:	9b01      	ldr	r3, [sp, #4]
 8006484:	04db      	lsls	r3, r3, #19
 8006486:	d505      	bpl.n	8006494 <USB_DriveVbus+0x36>
 8006488:	b921      	cbnz	r1, 8006494 <USB_DriveVbus+0x36>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0); 
 800648a:	9b01      	ldr	r3, [sp, #4]
 800648c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006490:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK; 
}
 8006494:	2000      	movs	r0, #0
 8006496:	b002      	add	sp, #8
 8006498:	4770      	bx	lr

0800649a <USB_GetCurrentFrame>:
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame (USB_OTG_GlobalTypeDef *USBx)
{
  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800649a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800649e:	6880      	ldr	r0, [r0, #8]
}
 80064a0:	b280      	uxth	r0, r0
 80064a2:	4770      	bx	lr

080064a4 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80064a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    
  /* Clear old interrupt conditions for this host channel. */
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFFU;
 80064a6:	f500 64a0 	add.w	r4, r0, #1280	; 0x500
 80064aa:	eb04 1441 	add.w	r4, r4, r1, lsl #5
{
 80064ae:	f89d 5018 	ldrb.w	r5, [sp, #24]
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFFU;
 80064b2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80064b6:	60a6      	str	r6, [r4, #8]
 80064b8:	b257      	sxtb	r7, r2
  
  /* Enable channel interrupts required for this transfer. */
  switch (ep_type) 
 80064ba:	2d03      	cmp	r5, #3
 80064bc:	d814      	bhi.n	80064e8 <USB_HC_Init+0x44>
 80064be:	e8df f005 	tbb	[pc, r5]
 80064c2:	5302      	.short	0x5302
 80064c4:	4d02      	.short	0x4d02
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 80064c6:	f240 469d 	movw	r6, #1181	; 0x49d
                                USB_OTG_HCINTMSK_TXERRM |\
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_NAKM ;
 
    if (epnum & 0x80U) 
 80064ca:	2f00      	cmp	r7, #0
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 80064cc:	60e6      	str	r6, [r4, #12]
    if (epnum & 0x80U) 
 80064ce:	da04      	bge.n	80064da <USB_HC_Init+0x36>
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;    
    
    if (epnum & 0x80U) 
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80064d0:	68e6      	ldr	r6, [r4, #12]
 80064d2:	f446 7680 	orr.w	r6, r6, #256	; 0x100
 80064d6:	60e6      	str	r6, [r4, #12]
 80064d8:	e006      	b.n	80064e8 <USB_HC_Init+0x44>
      if(USBx != USB_OTG_FS)
 80064da:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 80064de:	d003      	beq.n	80064e8 <USB_HC_Init+0x44>
        USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80064e0:	68e6      	ldr	r6, [r4, #12]
 80064e2:	f046 0660 	orr.w	r6, r6, #96	; 0x60
 80064e6:	60e6      	str	r6, [r4, #12]
    }
    break;
  }
  
  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 80064e8:	f8d0 c418 	ldr.w	ip, [r0, #1048]	; 0x418
 80064ec:	2601      	movs	r6, #1
 80064ee:	fa06 f101 	lsl.w	r1, r6, r1
 80064f2:	ea41 010c 	orr.w	r1, r1, ip
 80064f6:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418
  
  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80064fa:	6981      	ldr	r1, [r0, #24]
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 80064fc:	059b      	lsls	r3, r3, #22
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 80064fe:	02d2      	lsls	r2, r2, #11
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006500:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8006504:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 8006508:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800650c:	6181      	str	r1, [r0, #24]
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 800650e:	431a      	orrs	r2, r3
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 8006510:	f8bd 101c 	ldrh.w	r1, [sp, #28]
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 8006514:	f89d 3014 	ldrb.w	r3, [sp, #20]
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
 8006518:	2f00      	cmp	r7, #0
 800651a:	bfb4      	ite	lt
 800651c:	f44f 4600 	movlt.w	r6, #32768	; 0x8000
 8006520:	2600      	movge	r6, #0
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 8006522:	f3c1 010a 	ubfx	r1, r1, #0, #11
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 8006526:	2b02      	cmp	r3, #2
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 8006528:	ea4f 4385 	mov.w	r3, r5, lsl #18
 800652c:	ea42 0201 	orr.w	r2, r2, r1
 8006530:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006534:	ea43 0302 	orr.w	r3, r3, r2
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 8006538:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 800653c:	ea43 0306 	orr.w	r3, r3, r6
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 8006540:	bf0c      	ite	eq
 8006542:	f44f 3000 	moveq.w	r0, #131072	; 0x20000
 8006546:	2000      	movne	r0, #0
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 8006548:	4303      	orrs	r3, r0
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 800654a:	6023      	str	r3, [r4, #0]
    
  if (ep_type == EP_TYPE_INTR)
 800654c:	2d03      	cmp	r5, #3
  {
    USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800654e:	bf02      	ittt	eq
 8006550:	6823      	ldreq	r3, [r4, #0]
 8006552:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 8006556:	6023      	streq	r3, [r4, #0]
  }

  return HAL_OK; 
}
 8006558:	2000      	movs	r0, #0
 800655a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 800655c:	f240 669d 	movw	r6, #1693	; 0x69d
    if (epnum & 0x80U) 
 8006560:	2f00      	cmp	r7, #0
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8006562:	60e6      	str	r6, [r4, #12]
    if (epnum & 0x80U) 
 8006564:	dac0      	bge.n	80064e8 <USB_HC_Init+0x44>
 8006566:	e7b3      	b.n	80064d0 <USB_HC_Init+0x2c>
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8006568:	f240 2625 	movw	r6, #549	; 0x225
 800656c:	60e6      	str	r6, [r4, #12]
    if (epnum & 0x80U) 
 800656e:	2f00      	cmp	r7, #0
      USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);      
 8006570:	bfbe      	ittt	lt
 8006572:	68e6      	ldrlt	r6, [r4, #12]
 8006574:	f446 76c0 	orrlt.w	r6, r6, #384	; 0x180
 8006578:	60e6      	strlt	r6, [r4, #12]
 800657a:	e7b5      	b.n	80064e8 <USB_HC_Init+0x44>

0800657c <USB_HC_StartXfer>:
#pragma O0
#elif defined (__GNUC__) /*!< GNU Compiler */
#pragma GCC optimize ("O0")
#endif /* __CC_ARM */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b08a      	sub	sp, #40	; 0x28
 8006580:	af02      	add	r7, sp, #8
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	4613      	mov	r3, r2
 8006588:	71fb      	strb	r3, [r7, #7]
  uint8_t  is_oddframe = 0; 
 800658a:	2300      	movs	r3, #0
 800658c:	777b      	strb	r3, [r7, #29]
  uint16_t len_words = 0;   
 800658e:	2300      	movs	r3, #0
 8006590:	837b      	strh	r3, [r7, #26]
  uint16_t num_packets = 0;
 8006592:	2300      	movs	r3, #0
 8006594:	83fb      	strh	r3, [r7, #30]
  uint16_t max_hc_pkt_count = 256;
 8006596:	f44f 7380 	mov.w	r3, #256	; 0x100
 800659a:	833b      	strh	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800659c:	2300      	movs	r3, #0
 800659e:	617b      	str	r3, [r7, #20]
    
  if((USBx != USB_OTG_FS) && (hc->speed == USB_OTG_SPEED_HIGH))
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065a6:	d02b      	beq.n	8006600 <USB_HC_StartXfer+0x84>
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	791b      	ldrb	r3, [r3, #4]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d127      	bne.n	8006600 <USB_HC_StartXfer+0x84>
  {
    if((dma == 0) && (hc->do_ping == 1U))
 80065b0:	79fb      	ldrb	r3, [r7, #7]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d10b      	bne.n	80065ce <USB_HC_StartXfer+0x52>
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	795b      	ldrb	r3, [r3, #5]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d107      	bne.n	80065ce <USB_HC_StartXfer+0x52>
    {
      USB_DoPing(USBx, hc->ch_num);
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	785b      	ldrb	r3, [r3, #1]
 80065c2:	4619      	mov	r1, r3
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f000 fa0f 	bl	80069e8 <USB_DoPing>
      return HAL_OK;
 80065ca:	2300      	movs	r3, #0
 80065cc:	e10d      	b.n	80067ea <USB_HC_StartXfer+0x26e>
    }
    else if(dma == 1)
 80065ce:	79fb      	ldrb	r3, [r7, #7]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d115      	bne.n	8006600 <USB_HC_StartXfer+0x84>
    {
      USBx_HC(hc->ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	785b      	ldrb	r3, [r3, #1]
 80065d8:	015a      	lsls	r2, r3, #5
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	4413      	add	r3, r2
 80065de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e2:	4619      	mov	r1, r3
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	785b      	ldrb	r3, [r3, #1]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80065f8:	60cb      	str	r3, [r1, #12]
      hc->do_ping = 0U;
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	2200      	movs	r2, #0
 80065fe:	715a      	strb	r2, [r3, #5]
    }
  }
  
  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d019      	beq.n	800663c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (hc->xfer_len + hc->max_packet - 1U) / hc->max_packet;
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	8912      	ldrh	r2, [r2, #8]
 8006610:	4413      	add	r3, r2
 8006612:	3b01      	subs	r3, #1
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	8912      	ldrh	r2, [r2, #8]
 8006618:	fbb3 f3f2 	udiv	r3, r3, r2
 800661c:	83fb      	strh	r3, [r7, #30]
    
    if (num_packets > max_hc_pkt_count)
 800661e:	8bfa      	ldrh	r2, [r7, #30]
 8006620:	8b3b      	ldrh	r3, [r7, #24]
 8006622:	429a      	cmp	r2, r3
 8006624:	d90c      	bls.n	8006640 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006626:	8b3b      	ldrh	r3, [r7, #24]
 8006628:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = num_packets * hc->max_packet;
 800662a:	8bfb      	ldrh	r3, [r7, #30]
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	8912      	ldrh	r2, [r2, #8]
 8006630:	fb02 f303 	mul.w	r3, r2, r3
 8006634:	461a      	mov	r2, r3
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	611a      	str	r2, [r3, #16]
 800663a:	e001      	b.n	8006640 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1;
 800663c:	2301      	movs	r3, #1
 800663e:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in)
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	78db      	ldrb	r3, [r3, #3]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d007      	beq.n	8006658 <USB_HC_StartXfer+0xdc>
  {
    hc->xfer_len = num_packets * hc->max_packet;
 8006648:	8bfb      	ldrh	r3, [r7, #30]
 800664a:	68ba      	ldr	r2, [r7, #8]
 800664c:	8912      	ldrh	r2, [r2, #8]
 800664e:	fb02 f303 	mul.w	r3, r2, r3
 8006652:	461a      	mov	r2, r3
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	611a      	str	r2, [r3, #16]
  }
  
  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	785b      	ldrb	r3, [r3, #1]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	4413      	add	r3, r2
 8006662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006666:	4619      	mov	r1, r3
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	f3c3 0212 	ubfx	r2, r3, #0, #19
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8006670:	8bfb      	ldrh	r3, [r7, #30]
 8006672:	04db      	lsls	r3, r3, #19
 8006674:	4618      	mov	r0, r3
 8006676:	4b5f      	ldr	r3, [pc, #380]	; (80067f4 <USB_HC_StartXfer+0x278>)
 8006678:	4003      	ands	r3, r0
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 800667a:	431a      	orrs	r2, r3
      (((hc->data_pid) << 29U) & USB_OTG_HCTSIZ_DPID);
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	7a9b      	ldrb	r3, [r3, #10]
 8006680:	075b      	lsls	r3, r3, #29
 8006682:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8006686:	4313      	orrs	r3, r2
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8006688:	610b      	str	r3, [r1, #16]
  
  if (dma)
 800668a:	79fb      	ldrb	r3, [r7, #7]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00a      	beq.n	80066a6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(hc->ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	785b      	ldrb	r3, [r3, #1]
 8006694:	015a      	lsls	r2, r3, #5
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	4413      	add	r3, r2
 800669a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800669e:	461a      	mov	r2, r3
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	6153      	str	r3, [r2, #20]
  }
  
  is_oddframe = (USBx_HOST->HFNUM & 0x01) ? 0 : 1;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f003 0301 	and.w	r3, r3, #1
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	bf0c      	ite	eq
 80066b6:	2301      	moveq	r3, #1
 80066b8:	2300      	movne	r3, #0
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	777b      	strb	r3, [r7, #29]
  USBx_HC(hc->ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	785b      	ldrb	r3, [r3, #1]
 80066c2:	015a      	lsls	r2, r3, #5
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	4413      	add	r3, r2
 80066c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066cc:	4619      	mov	r1, r3
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	785b      	ldrb	r3, [r3, #1]
 80066d2:	015a      	lsls	r2, r3, #5
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	4413      	add	r3, r2
 80066d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80066e2:	600b      	str	r3, [r1, #0]
  USBx_HC(hc->ch_num)->HCCHAR |= (is_oddframe << 29);
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	785b      	ldrb	r3, [r3, #1]
 80066e8:	015a      	lsls	r2, r3, #5
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	4413      	add	r3, r2
 80066ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f2:	4619      	mov	r1, r3
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	785b      	ldrb	r3, [r3, #1]
 80066f8:	015a      	lsls	r2, r3, #5
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	4413      	add	r3, r2
 80066fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	7f7a      	ldrb	r2, [r7, #29]
 8006706:	0752      	lsls	r2, r2, #29
 8006708:	4313      	orrs	r3, r2
 800670a:	600b      	str	r3, [r1, #0]
  
  /* Set host channel enable */
  tmpreg = USBx_HC(hc->ch_num)->HCCHAR;
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	785b      	ldrb	r3, [r3, #1]
 8006710:	015a      	lsls	r2, r3, #5
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	4413      	add	r3, r2
 8006716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	617b      	str	r3, [r7, #20]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006724:	617b      	str	r3, [r7, #20]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800672c:	617b      	str	r3, [r7, #20]
  USBx_HC(hc->ch_num)->HCCHAR = tmpreg;
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	785b      	ldrb	r3, [r3, #1]
 8006732:	015a      	lsls	r2, r3, #5
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	4413      	add	r3, r2
 8006738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800673c:	461a      	mov	r2, r3
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	6013      	str	r3, [r2, #0]
  
  if (dma == 0) /* Slave mode */
 8006742:	79fb      	ldrb	r3, [r7, #7]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d14f      	bne.n	80067e8 <USB_HC_StartXfer+0x26c>
  {  
    if((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	78db      	ldrb	r3, [r3, #3]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d14b      	bne.n	80067e8 <USB_HC_StartXfer+0x26c>
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d047      	beq.n	80067e8 <USB_HC_StartXfer+0x26c>
    {
      switch(hc->ep_type) 
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	79db      	ldrb	r3, [r3, #7]
 800675c:	2b03      	cmp	r3, #3
 800675e:	d831      	bhi.n	80067c4 <USB_HC_StartXfer+0x248>
 8006760:	a201      	add	r2, pc, #4	; (adr r2, 8006768 <USB_HC_StartXfer+0x1ec>)
 8006762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006766:	bf00      	nop
 8006768:	08006779 	.word	0x08006779
 800676c:	0800679d 	.word	0x0800679d
 8006770:	08006779 	.word	0x08006779
 8006774:	0800679d 	.word	0x0800679d
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:
        
        len_words = (hc->xfer_len + 3) / 4;
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	3303      	adds	r3, #3
 800677e:	089b      	lsrs	r3, r3, #2
 8006780:	837b      	strh	r3, [r7, #26]
        
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx->HNPTXSTS & 0xFFFF))
 8006782:	8b7a      	ldrh	r2, [r7, #26]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006788:	b29b      	uxth	r3, r3
 800678a:	429a      	cmp	r2, r3
 800678c:	d91c      	bls.n	80067c8 <USB_HC_StartXfer+0x24c>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	f043 0220 	orr.w	r2, r3, #32
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	619a      	str	r2, [r3, #24]
        }
        break;
 800679a:	e015      	b.n	80067c8 <USB_HC_StartXfer+0x24c>
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (hc->xfer_len + 3) / 4;
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	3303      	adds	r3, #3
 80067a2:	089b      	lsrs	r3, r3, #2
 80067a4:	837b      	strh	r3, [r7, #26]
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx_HOST->HPTXSTS & 0xFFFF)) /* split the transfer */
 80067a6:	8b7a      	ldrh	r2, [r7, #26]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d90a      	bls.n	80067cc <USB_HC_StartXfer+0x250>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;          
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	619a      	str	r2, [r3, #24]
        }
        break;
 80067c2:	e003      	b.n	80067cc <USB_HC_StartXfer+0x250>
        
      default:
        break;
 80067c4:	bf00      	nop
 80067c6:	e002      	b.n	80067ce <USB_HC_StartXfer+0x252>
        break;
 80067c8:	bf00      	nop
 80067ca:	e000      	b.n	80067ce <USB_HC_StartXfer+0x252>
        break;
 80067cc:	bf00      	nop
      }
      
      /* Write packet into the Tx FIFO. */
      USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, hc->xfer_len, 0);
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	68d9      	ldr	r1, [r3, #12]
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	785a      	ldrb	r2, [r3, #1]
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	b298      	uxth	r0, r3
 80067dc:	2300      	movs	r3, #0
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	4603      	mov	r3, r0
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f7ff fd72 	bl	80062cc <USB_WritePacket>
    }
  }
  
  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3720      	adds	r7, #32
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	1ff80000 	.word	0x1ff80000

080067f8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006806:	695b      	ldr	r3, [r3, #20]
 8006808:	b29b      	uxth	r3, r3
}
 800680a:	4618      	mov	r0, r3
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
 8006816:	b480      	push	{r7}
 8006818:	b085      	sub	sp, #20
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	460b      	mov	r3, r1
 8006820:	70fb      	strb	r3, [r7, #3]
  uint32_t count = 0U;
 8006822:	2300      	movs	r3, #0
 8006824:	60fb      	str	r3, [r7, #12]
  
  /* Check for space in the request queue to issue the halt. */
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 8006826:	78fb      	ldrb	r3, [r7, #3]
 8006828:	015a      	lsls	r2, r3, #5
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4413      	add	r3, r2
 800682e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	0c9b      	lsrs	r3, r3, #18
 8006836:	f003 0303 	and.w	r3, r3, #3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00b      	beq.n	8006856 <USB_HC_Halt+0x40>
 800683e:	78fb      	ldrb	r3, [r7, #3]
 8006840:	015a      	lsls	r2, r3, #5
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4413      	add	r3, r2
 8006846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800684a:	681b      	ldr	r3, [r3, #0]
  USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
 800684c:	0c9b      	lsrs	r3, r3, #18
 800684e:	f003 0303 	and.w	r3, r3, #3
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 8006852:	2b02      	cmp	r3, #2
 8006854:	d160      	bne.n	8006918 <USB_HC_Halt+0x102>
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006856:	78fb      	ldrb	r3, [r7, #3]
 8006858:	015a      	lsls	r2, r3, #5
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4413      	add	r3, r2
 800685e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006862:	4619      	mov	r1, r3
 8006864:	78fb      	ldrb	r3, [r7, #3]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4413      	add	r3, r2
 800686c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006876:	600b      	str	r3, [r1, #0]
    
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006880:	2b00      	cmp	r3, #0
 8006882:	d135      	bne.n	80068f0 <USB_HC_Halt+0xda>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006884:	78fb      	ldrb	r3, [r7, #3]
 8006886:	015a      	lsls	r2, r3, #5
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4413      	add	r3, r2
 800688c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006890:	4619      	mov	r1, r3
 8006892:	78fb      	ldrb	r3, [r7, #3]
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4413      	add	r3, r2
 800689a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068a4:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 80068a6:	78fb      	ldrb	r3, [r7, #3]
 80068a8:	015a      	lsls	r2, r3, #5
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4413      	add	r3, r2
 80068ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068b2:	4619      	mov	r1, r3
 80068b4:	78fb      	ldrb	r3, [r7, #3]
 80068b6:	015a      	lsls	r2, r3, #5
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4413      	add	r3, r2
 80068bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068c6:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	3301      	adds	r3, #1
 80068cc:	60fb      	str	r3, [r7, #12]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068d4:	d81e      	bhi.n	8006914 <USB_HC_Halt+0xfe>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 80068d6:	78fb      	ldrb	r3, [r7, #3]
 80068d8:	015a      	lsls	r2, r3, #5
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4413      	add	r3, r2
 80068de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068ec:	d0ec      	beq.n	80068c8 <USB_HC_Halt+0xb2>
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 80068ee:	e074      	b.n	80069da <USB_HC_Halt+0x1c4>
    }
    else
    {
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 80068f0:	78fb      	ldrb	r3, [r7, #3]
 80068f2:	015a      	lsls	r2, r3, #5
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4413      	add	r3, r2
 80068f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068fc:	4619      	mov	r1, r3
 80068fe:	78fb      	ldrb	r3, [r7, #3]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4413      	add	r3, r2
 8006906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006910:	600b      	str	r3, [r1, #0]
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8006912:	e062      	b.n	80069da <USB_HC_Halt+0x1c4>
          break;
 8006914:	bf00      	nop
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8006916:	e060      	b.n	80069da <USB_HC_Halt+0x1c4>
    }
  }
  else
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006918:	78fb      	ldrb	r3, [r7, #3]
 800691a:	015a      	lsls	r2, r3, #5
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4413      	add	r3, r2
 8006920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006924:	4619      	mov	r1, r3
 8006926:	78fb      	ldrb	r3, [r7, #3]
 8006928:	015a      	lsls	r2, r3, #5
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4413      	add	r3, r2
 800692e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006938:	600b      	str	r3, [r1, #0]
    
    if ((USBx_HOST->HPTXSTS & 0xFFFFU) == 0U)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	b29b      	uxth	r3, r3
 8006944:	2b00      	cmp	r3, #0
 8006946:	d135      	bne.n	80069b4 <USB_HC_Halt+0x19e>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006948:	78fb      	ldrb	r3, [r7, #3]
 800694a:	015a      	lsls	r2, r3, #5
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4413      	add	r3, r2
 8006950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006954:	4619      	mov	r1, r3
 8006956:	78fb      	ldrb	r3, [r7, #3]
 8006958:	015a      	lsls	r2, r3, #5
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4413      	add	r3, r2
 800695e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006968:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 800696a:	78fb      	ldrb	r3, [r7, #3]
 800696c:	015a      	lsls	r2, r3, #5
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4413      	add	r3, r2
 8006972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006976:	4619      	mov	r1, r3
 8006978:	78fb      	ldrb	r3, [r7, #3]
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4413      	add	r3, r2
 8006980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800698a:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	3301      	adds	r3, #1
 8006990:	60fb      	str	r3, [r7, #12]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006998:	d81e      	bhi.n	80069d8 <USB_HC_Halt+0x1c2>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 800699a:	78fb      	ldrb	r3, [r7, #3]
 800699c:	015a      	lsls	r2, r3, #5
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4413      	add	r3, r2
 80069a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069b0:	d0ec      	beq.n	800698c <USB_HC_Halt+0x176>
 80069b2:	e012      	b.n	80069da <USB_HC_Halt+0x1c4>
    }
    else
    {
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 80069b4:	78fb      	ldrb	r3, [r7, #3]
 80069b6:	015a      	lsls	r2, r3, #5
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4413      	add	r3, r2
 80069bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069c0:	4619      	mov	r1, r3
 80069c2:	78fb      	ldrb	r3, [r7, #3]
 80069c4:	015a      	lsls	r2, r3, #5
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4413      	add	r3, r2
 80069ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069d4:	600b      	str	r3, [r1, #0]
 80069d6:	e000      	b.n	80069da <USB_HC_Halt+0x1c4>
          break;
 80069d8:	bf00      	nop
    }
  }
  
  return HAL_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3714      	adds	r7, #20
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx , uint8_t ch_num)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	70fb      	strb	r3, [r7, #3]
  uint8_t  num_packets = 1U;
 80069f4:	2301      	movs	r3, #1
 80069f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0U;
 80069f8:	2300      	movs	r3, #0
 80069fa:	60bb      	str	r3, [r7, #8]

  USBx_HC(ch_num)->HCTSIZ = ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 80069fc:	78fb      	ldrb	r3, [r7, #3]
 80069fe:	015a      	lsls	r2, r3, #5
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4413      	add	r3, r2
 8006a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a08:	461a      	mov	r2, r3
 8006a0a:	7bfb      	ldrb	r3, [r7, #15]
 8006a0c:	04db      	lsls	r3, r3, #19
 8006a0e:	4619      	mov	r1, r3
 8006a10:	4b12      	ldr	r3, [pc, #72]	; (8006a5c <USB_DoPing+0x74>)
 8006a12:	400b      	ands	r3, r1
 8006a14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a18:	6113      	str	r3, [r2, #16]
                                USB_OTG_HCTSIZ_DOPING;
  
  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006a1a:	78fb      	ldrb	r3, [r7, #3]
 8006a1c:	015a      	lsls	r2, r3, #5
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4413      	add	r3, r2
 8006a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a30:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a38:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006a3a:	78fb      	ldrb	r3, [r7, #3]
 8006a3c:	015a      	lsls	r2, r3, #5
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4413      	add	r3, r2
 8006a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a46:	461a      	mov	r2, r3
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	6013      	str	r3, [r2, #0]
  
  return HAL_OK;  
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	1ff80000 	.word	0x1ff80000

08006a60 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t count = 0U;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	613b      	str	r3, [r7, #16]
  uint32_t value;
  
  USB_DisableGlobalInt(USBx);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f7ff fbed 	bl	800624c <USB_DisableGlobalInt>
  
    /* Flush FIFO */
  USB_FlushTxFifo(USBx, 0x10U);
 8006a72:	2110      	movs	r1, #16
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f7ff fc07 	bl	8006288 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7ff fc16 	bl	80062ac <USB_FlushRxFifo>
  
  /* Flush out any leftover queued requests. */
  for (i = 0; i <= 15; i++)
 8006a80:	2300      	movs	r3, #0
 8006a82:	75fb      	strb	r3, [r7, #23]
 8006a84:	e01f      	b.n	8006ac6 <USB_StopHost+0x66>
  {   

    value = USBx_HC(i)->HCCHAR ;
 8006a86:	7dfb      	ldrb	r3, [r7, #23]
 8006a88:	015a      	lsls	r2, r3, #5
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	60fb      	str	r3, [r7, #12]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a9c:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_CHENA;  
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006aa4:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006aac:	60fb      	str	r3, [r7, #12]
    USBx_HC(i)->HCCHAR = value;
 8006aae:	7dfb      	ldrb	r3, [r7, #23]
 8006ab0:	015a      	lsls	r2, r3, #5
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aba:	461a      	mov	r2, r3
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6013      	str	r3, [r2, #0]
  for (i = 0; i <= 15; i++)
 8006ac0:	7dfb      	ldrb	r3, [r7, #23]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	75fb      	strb	r3, [r7, #23]
 8006ac6:	7dfb      	ldrb	r3, [r7, #23]
 8006ac8:	2b0f      	cmp	r3, #15
 8006aca:	d9dc      	bls.n	8006a86 <USB_StopHost+0x26>
  }
  
  /* Halt all channels to put them into a known state. */  
  for (i = 0; i <= 15; i++)
 8006acc:	2300      	movs	r3, #0
 8006ace:	75fb      	strb	r3, [r7, #23]
 8006ad0:	e034      	b.n	8006b3c <USB_StopHost+0xdc>
  {
    value = USBx_HC(i)->HCCHAR ;
 8006ad2:	7dfb      	ldrb	r3, [r7, #23]
 8006ad4:	015a      	lsls	r2, r3, #5
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4413      	add	r3, r2
 8006ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	60fb      	str	r3, [r7, #12]
    
    value |= USB_OTG_HCCHAR_CHDIS;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ae8:	60fb      	str	r3, [r7, #12]
    value |= USB_OTG_HCCHAR_CHENA;  
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006af0:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006af8:	60fb      	str	r3, [r7, #12]
    
    USBx_HC(i)->HCCHAR = value;
 8006afa:	7dfb      	ldrb	r3, [r7, #23]
 8006afc:	015a      	lsls	r2, r3, #5
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4413      	add	r3, r2
 8006b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b06:	461a      	mov	r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6013      	str	r3, [r2, #0]
    do 
    {
      if (++count > 1000U) 
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	613b      	str	r3, [r7, #16]
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b18:	d80c      	bhi.n	8006b34 <USB_StopHost+0xd4>
      {
        break;
      }
    } 
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b1a:	7dfb      	ldrb	r3, [r7, #23]
 8006b1c:	015a      	lsls	r2, r3, #5
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4413      	add	r3, r2
 8006b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b30:	d0ec      	beq.n	8006b0c <USB_StopHost+0xac>
 8006b32:	e000      	b.n	8006b36 <USB_StopHost+0xd6>
        break;
 8006b34:	bf00      	nop
  for (i = 0; i <= 15; i++)
 8006b36:	7dfb      	ldrb	r3, [r7, #23]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	75fb      	strb	r3, [r7, #23]
 8006b3c:	7dfb      	ldrb	r3, [r7, #23]
 8006b3e:	2b0f      	cmp	r3, #15
 8006b40:	d9c7      	bls.n	8006ad2 <USB_StopHost+0x72>
  }

  /* Clear any pending Host interrupts */  
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b48:	461a      	mov	r2, r3
 8006b4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b4e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b56:	615a      	str	r2, [r3, #20]
  USB_EnableGlobalInt(USBx);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f7ff fb71 	bl	8006240 <USB_EnableGlobalInt>
  return HAL_OK;  
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3718      	adds	r7, #24
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <USBH_CDC_SOFProcess>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
  return USBH_OK;  
}
 8006b68:	2000      	movs	r0, #0
 8006b6a:	4770      	bx	lr

08006b6c <USBH_CDC_InterfaceDeInit>:
{
 8006b6c:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006b6e:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 8006b72:	69dc      	ldr	r4, [r3, #28]
  if ( CDC_Handle->CommItf.NotifPipe)
 8006b74:	7821      	ldrb	r1, [r4, #0]
{
 8006b76:	4605      	mov	r5, r0
  if ( CDC_Handle->CommItf.NotifPipe)
 8006b78:	b139      	cbz	r1, 8006b8a <USBH_CDC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006b7a:	f000 fb84 	bl	8007286 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8006b7e:	7821      	ldrb	r1, [r4, #0]
 8006b80:	4628      	mov	r0, r5
 8006b82:	f000 fb9d 	bl	80072c0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0;     /* Reset the Channel as Free */
 8006b86:	2300      	movs	r3, #0
 8006b88:	7023      	strb	r3, [r4, #0]
  if ( CDC_Handle->DataItf.InPipe)
 8006b8a:	7b21      	ldrb	r1, [r4, #12]
 8006b8c:	b141      	cbz	r1, 8006ba0 <USBH_CDC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b8e:	4628      	mov	r0, r5
 8006b90:	f000 fb79 	bl	8007286 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8006b94:	7b21      	ldrb	r1, [r4, #12]
 8006b96:	4628      	mov	r0, r5
 8006b98:	f000 fb92 	bl	80072c0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0;     /* Reset the Channel as Free */
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	7323      	strb	r3, [r4, #12]
  if ( CDC_Handle->DataItf.OutPipe)
 8006ba0:	7b61      	ldrb	r1, [r4, #13]
 8006ba2:	b141      	cbz	r1, 8006bb6 <USBH_CDC_InterfaceDeInit+0x4a>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	f000 fb6e 	bl	8007286 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8006baa:	7b61      	ldrb	r1, [r4, #13]
 8006bac:	4628      	mov	r0, r5
 8006bae:	f000 fb87 	bl	80072c0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0;     /* Reset the Channel as Free */
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	7363      	strb	r3, [r4, #13]
  if(phost->pActiveClass->pData)
 8006bb6:	f8d5 3374 	ldr.w	r3, [r5, #884]	; 0x374
 8006bba:	69d8      	ldr	r0, [r3, #28]
 8006bbc:	b128      	cbz	r0, 8006bca <USBH_CDC_InterfaceDeInit+0x5e>
    USBH_free (phost->pActiveClass->pData);
 8006bbe:	f002 f80b 	bl	8008bd8 <free>
    phost->pActiveClass->pData = 0;
 8006bc2:	f8d5 3374 	ldr.w	r3, [r5, #884]	; 0x374
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	61da      	str	r2, [r3, #28]
}
 8006bca:	2000      	movs	r0, #0
 8006bcc:	bd38      	pop	{r3, r4, r5, pc}

08006bce <USBH_CDC_InterfaceInit>:
{	
 8006bce:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost, 
 8006bd0:	2202      	movs	r2, #2
{	
 8006bd2:	b085      	sub	sp, #20
  interface = USBH_FindInterface(phost, 
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	4611      	mov	r1, r2
{	
 8006bd8:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, 
 8006bda:	f000 f9b4 	bl	8006f46 <USBH_FindInterface>
  if(interface == 0xFF) /* No Valid Interface */
 8006bde:	28ff      	cmp	r0, #255	; 0xff
  interface = USBH_FindInterface(phost, 
 8006be0:	4606      	mov	r6, r0
  if(interface == 0xFF) /* No Valid Interface */
 8006be2:	d102      	bne.n	8006bea <USBH_CDC_InterfaceInit+0x1c>
  USBH_StatusTypeDef status = USBH_FAIL ;
 8006be4:	2002      	movs	r0, #2
}
 8006be6:	b005      	add	sp, #20
 8006be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_SelectInterface (phost, interface);
 8006bea:	4601      	mov	r1, r0
 8006bec:	4628      	mov	r0, r5
 8006bee:	f000 f9a1 	bl	8006f34 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8006bf2:	2050      	movs	r0, #80	; 0x50
 8006bf4:	f8d5 7374 	ldr.w	r7, [r5, #884]	; 0x374
 8006bf8:	f001 ffe6 	bl	8008bc8 <malloc>
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8006bfc:	231a      	movs	r3, #26
 8006bfe:	fb03 5606 	mla	r6, r3, r6, r5
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8006c02:	61f8      	str	r0, [r7, #28]
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8006c04:	f896 3348 	ldrb.w	r3, [r6, #840]	; 0x348
 8006c08:	061a      	lsls	r2, r3, #24
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c0a:	bf42      	ittt	mi
 8006c0c:	7043      	strbmi	r3, [r0, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c0e:	f8b6 334a 	ldrhmi.w	r3, [r6, #842]	; 0x34a
 8006c12:	8143      	strhmi	r3, [r0, #10]
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8006c14:	4604      	mov	r4, r0
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006c16:	7841      	ldrb	r1, [r0, #1]
 8006c18:	4628      	mov	r0, r5
 8006c1a:	f000 fb39 	bl	8007290 <USBH_AllocPipe>
 8006c1e:	4601      	mov	r1, r0
 8006c20:	7020      	strb	r0, [r4, #0]
    USBH_OpenPipe  (phost,
 8006c22:	8960      	ldrh	r0, [r4, #10]
 8006c24:	9002      	str	r0, [sp, #8]
 8006c26:	2003      	movs	r0, #3
 8006c28:	9001      	str	r0, [sp, #4]
 8006c2a:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8006c2e:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8006c32:	7862      	ldrb	r2, [r4, #1]
 8006c34:	9000      	str	r0, [sp, #0]
 8006c36:	4628      	mov	r0, r5
 8006c38:	f000 fb16 	bl	8007268 <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0);    
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	7821      	ldrb	r1, [r4, #0]
 8006c40:	4628      	mov	r0, r5
 8006c42:	f001 ff5a 	bl	8008afa <USBH_LL_SetToggle>
    interface = USBH_FindInterface(phost, 
 8006c46:	2300      	movs	r3, #0
 8006c48:	461a      	mov	r2, r3
 8006c4a:	210a      	movs	r1, #10
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	f000 f97a 	bl	8006f46 <USBH_FindInterface>
    if(interface == 0xFF) /* No Valid Interface */
 8006c52:	28ff      	cmp	r0, #255	; 0xff
 8006c54:	d0c6      	beq.n	8006be4 <USBH_CDC_InterfaceInit+0x16>
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8006c56:	231a      	movs	r3, #26
 8006c58:	fb03 5100 	mla	r1, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8006c5c:	fb03 5000 	mla	r0, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8006c60:	f891 2348 	ldrb.w	r2, [r1, #840]	; 0x348
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8006c64:	f890 3350 	ldrb.w	r3, [r0, #848]	; 0x350
 8006c68:	f8b1 134a 	ldrh.w	r1, [r1, #842]	; 0x34a
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8006c6c:	f012 0f80 	tst.w	r2, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c70:	bf0d      	iteet	eq
 8006c72:	73a2      	strbeq	r2, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c74:	73e2      	strbne	r2, [r4, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c76:	8361      	strhne	r1, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c78:	8321      	strheq	r1, [r4, #24]
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8006c7a:	f013 0f80 	tst.w	r3, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006c7e:	bf08      	it	eq
 8006c80:	73a3      	strbeq	r3, [r4, #14]
 8006c82:	f8b0 2352 	ldrh.w	r2, [r0, #850]	; 0x352
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006c86:	7ba1      	ldrb	r1, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006c88:	bf18      	it	ne
 8006c8a:	73e3      	strbne	r3, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006c8c:	4628      	mov	r0, r5
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006c8e:	bf14      	ite	ne
 8006c90:	8362      	strhne	r2, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006c92:	8322      	strheq	r2, [r4, #24]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006c94:	f000 fafc 	bl	8007290 <USBH_AllocPipe>
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);  
 8006c98:	7be1      	ldrb	r1, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006c9a:	7360      	strb	r0, [r4, #13]
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);  
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	f000 faf7 	bl	8007290 <USBH_AllocPipe>
 8006ca2:	7320      	strb	r0, [r4, #12]
      USBH_OpenPipe  (phost,
 8006ca4:	8b20      	ldrh	r0, [r4, #24]
 8006ca6:	9002      	str	r0, [sp, #8]
 8006ca8:	2602      	movs	r6, #2
 8006caa:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8006cae:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8006cb2:	7ba2      	ldrb	r2, [r4, #14]
 8006cb4:	7b61      	ldrb	r1, [r4, #13]
 8006cb6:	9601      	str	r6, [sp, #4]
 8006cb8:	9000      	str	r0, [sp, #0]
 8006cba:	4628      	mov	r0, r5
 8006cbc:	f000 fad4 	bl	8007268 <USBH_OpenPipe>
      USBH_OpenPipe  (phost,
 8006cc0:	8b60      	ldrh	r0, [r4, #26]
 8006cc2:	9002      	str	r0, [sp, #8]
 8006cc4:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8006cc8:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8006ccc:	7be2      	ldrb	r2, [r4, #15]
 8006cce:	7b21      	ldrb	r1, [r4, #12]
 8006cd0:	9601      	str	r6, [sp, #4]
 8006cd2:	9000      	str	r0, [sp, #0]
      CDC_Handle->state = CDC_IDLE_STATE;
 8006cd4:	2600      	movs	r6, #0
      USBH_OpenPipe  (phost,
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	f000 fac6 	bl	8007268 <USBH_OpenPipe>
      USBH_LL_SetToggle  (phost, CDC_Handle->DataItf.OutPipe,0);
 8006cdc:	4632      	mov	r2, r6
 8006cde:	7b61      	ldrb	r1, [r4, #13]
      CDC_Handle->state = CDC_IDLE_STATE;
 8006ce0:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
      USBH_LL_SetToggle  (phost, CDC_Handle->DataItf.OutPipe,0);
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	f001 ff08 	bl	8008afa <USBH_LL_SetToggle>
      USBH_LL_SetToggle  (phost, CDC_Handle->DataItf.InPipe,0);
 8006cea:	4632      	mov	r2, r6
 8006cec:	7b21      	ldrb	r1, [r4, #12]
 8006cee:	4628      	mov	r0, r5
 8006cf0:	f001 ff03 	bl	8008afa <USBH_LL_SetToggle>
      status = USBH_OK; 
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	e776      	b.n	8006be6 <USBH_CDC_InterfaceInit+0x18>

08006cf8 <USBH_CDC_ClassRequest>:
{   
 8006cf8:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;  
 8006cfa:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 8006cfe:	69d9      	ldr	r1, [r3, #28]
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006d00:	23a1      	movs	r3, #161	; 0xa1
 8006d02:	7403      	strb	r3, [r0, #16]
                              USB_REQ_RECIPIENT_INTERFACE;
  
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006d04:	2321      	movs	r3, #33	; 0x21
 8006d06:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0;
  phost->Control.setup.b.wIndex.w = 0;
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 8006d08:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0;
 8006d0e:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 8006d10:	82c2      	strh	r2, [r0, #22]
 
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d12:	3140      	adds	r1, #64	; 0x40
{   
 8006d14:	4604      	mov	r4, r0
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d16:	f000 f97d 	bl	8007014 <USBH_CtlReq>
  if(status == USBH_OK)
 8006d1a:	4605      	mov	r5, r0
 8006d1c:	b920      	cbnz	r0, 8006d28 <USBH_CDC_ClassRequest+0x30>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE); 
 8006d1e:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8006d22:	2102      	movs	r1, #2
 8006d24:	4620      	mov	r0, r4
 8006d26:	4798      	blx	r3
}
 8006d28:	4628      	mov	r0, r5
 8006d2a:	bd38      	pop	{r3, r4, r5, pc}

08006d2c <USBH_CDC_TransmitCallback>:
 8006d2c:	4770      	bx	lr

08006d2e <USBH_CDC_ReceiveCallback>:
 8006d2e:	4770      	bx	lr

08006d30 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006d30:	4770      	bx	lr

08006d32 <USBH_CDC_Process>:
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData; 
 8006d32:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
{
 8006d36:	b573      	push	{r0, r1, r4, r5, r6, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData; 
 8006d38:	69dc      	ldr	r4, [r3, #28]
  switch(CDC_Handle->state)
 8006d3a:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
{
 8006d3e:	4605      	mov	r5, r0
  switch(CDC_Handle->state)
 8006d40:	2b04      	cmp	r3, #4
 8006d42:	d83d      	bhi.n	8006dc0 <USBH_CDC_Process+0x8e>
 8006d44:	e8df f003 	tbb	[pc, r3]
 8006d48:	42170603 	.word	0x42170603
 8006d4c:	a8          	.byte	0xa8
 8006d4d:	00          	.byte	0x00
    status = USBH_OK;
 8006d4e:	2000      	movs	r0, #0
}
 8006d50:	b002      	add	sp, #8
 8006d52:	bd70      	pop	{r4, r5, r6, pc}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS | \
 8006d54:	2321      	movs	r3, #33	; 0x21
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006d56:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS | \
 8006d58:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006d5a:	2320      	movs	r3, #32
 8006d5c:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 8006d5e:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0;
 8006d60:	2300      	movs	r3, #0
 8006d62:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0;
 8006d64:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 8006d66:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecodin->Array , LINE_CODING_STRUCTURE_SIZE );  
 8006d68:	f000 f954 	bl	8007014 <USBH_CtlReq>
    if(req_status == USBH_OK)
 8006d6c:	bb50      	cbnz	r0, 8006dc4 <USBH_CDC_Process+0x92>
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE; 
 8006d6e:	2302      	movs	r3, #2
      CDC_Handle->state = CDC_ERROR_STATE; 
 8006d70:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8006d74:	e024      	b.n	8006dc0 <USBH_CDC_Process+0x8e>
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006d76:	23a1      	movs	r3, #161	; 0xa1
 8006d78:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006d7a:	2321      	movs	r3, #33	; 0x21
 8006d7c:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 8006d7e:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0;
 8006d80:	2300      	movs	r3, #0
 8006d82:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0;
 8006d84:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 8006d86:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d88:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8006d8c:	f000 f942 	bl	8007014 <USBH_CtlReq>
    if(req_status == USBH_OK)
 8006d90:	b9c0      	cbnz	r0, 8006dc4 <USBH_CDC_Process+0x92>
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) && 
 8006d92:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006d94:	6ca3      	ldr	r3, [r4, #72]	; 0x48
      CDC_Handle->state = CDC_IDLE_STATE; 
 8006d96:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) && 
 8006d9a:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 8006d9e:	685a      	ldr	r2, [r3, #4]
 8006da0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8006da4:	4291      	cmp	r1, r2
 8006da6:	d10b      	bne.n	8006dc0 <USBH_CDC_Process+0x8e>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006da8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006dac:	795a      	ldrb	r2, [r3, #5]
 8006dae:	4291      	cmp	r1, r2
 8006db0:	d106      	bne.n	8006dc0 <USBH_CDC_Process+0x8e>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006db2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d102      	bne.n	8006dc0 <USBH_CDC_Process+0x8e>
        USBH_CDC_LineCodingChanged(phost);
 8006dba:	4628      	mov	r0, r5
 8006dbc:	f7ff ffb8 	bl	8006d30 <USBH_CDC_LineCodingChanged>
  USBH_StatusTypeDef status = USBH_BUSY;
 8006dc0:	2001      	movs	r0, #1
 8006dc2:	e7c5      	b.n	8006d50 <USBH_CDC_Process+0x1e>
    else if(req_status != USBH_BUSY)
 8006dc4:	2801      	cmp	r0, #1
 8006dc6:	d0fb      	beq.n	8006dc0 <USBH_CDC_Process+0x8e>
      CDC_Handle->state = CDC_ERROR_STATE; 
 8006dc8:	2304      	movs	r3, #4
 8006dca:	e7d1      	b.n	8006d70 <USBH_CDC_Process+0x3e>
  switch(CDC_Handle->data_tx_state)
 8006dcc:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8006dd0:	2901      	cmp	r1, #1
 8006dd2:	d023      	beq.n	8006e1c <USBH_CDC_Process+0xea>
 8006dd4:	2902      	cmp	r1, #2
 8006dd6:	d030      	beq.n	8006e3a <USBH_CDC_Process+0x108>
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006dd8:	f8d5 3374 	ldr.w	r3, [r5, #884]	; 0x374
 8006ddc:	69de      	ldr	r6, [r3, #28]
  switch(CDC_Handle->data_rx_state)
 8006dde:	f896 304e 	ldrb.w	r3, [r6, #78]	; 0x4e
 8006de2:	2b03      	cmp	r3, #3
 8006de4:	d047      	beq.n	8006e76 <USBH_CDC_Process+0x144>
 8006de6:	2b04      	cmp	r3, #4
 8006de8:	d1ea      	bne.n	8006dc0 <USBH_CDC_Process+0x8e>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe); 
 8006dea:	7b31      	ldrb	r1, [r6, #12]
 8006dec:	4628      	mov	r0, r5
 8006dee:	f001 fe73 	bl	8008ad8 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE )
 8006df2:	2801      	cmp	r0, #1
 8006df4:	d1e4      	bne.n	8006dc0 <USBH_CDC_Process+0x8e>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006df6:	7b31      	ldrb	r1, [r6, #12]
 8006df8:	4628      	mov	r0, r5
 8006dfa:	f001 fe29 	bl	8008a50 <USBH_LL_GetLastXferSize>
      if(((CDC_Handle->RxDataLength - length) > 0) && (length > CDC_Handle->DataItf.InEpSize))
 8006dfe:	6ab3      	ldr	r3, [r6, #40]	; 0x28
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006e00:	b282      	uxth	r2, r0
      if(((CDC_Handle->RxDataLength - length) > 0) && (length > CDC_Handle->DataItf.InEpSize))
 8006e02:	4293      	cmp	r3, r2
 8006e04:	4610      	mov	r0, r2
 8006e06:	d040      	beq.n	8006e8a <USBH_CDC_Process+0x158>
 8006e08:	8b71      	ldrh	r1, [r6, #26]
 8006e0a:	4291      	cmp	r1, r2
 8006e0c:	d23d      	bcs.n	8006e8a <USBH_CDC_Process+0x158>
        CDC_Handle->RxDataLength -= length ;
 8006e0e:	1a9b      	subs	r3, r3, r2
 8006e10:	62b3      	str	r3, [r6, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8006e12:	6a33      	ldr	r3, [r6, #32]
 8006e14:	4418      	add	r0, r3
 8006e16:	6230      	str	r0, [r6, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA; 
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e033      	b.n	8006e84 <USBH_CDC_Process+0x152>
    if(CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006e1c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006e1e:	8b22      	ldrh	r2, [r4, #24]
 8006e20:	7b63      	ldrb	r3, [r4, #13]
      USBH_BulkSendData (phost,
 8006e22:	9100      	str	r1, [sp, #0]
    if(CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006e24:	4290      	cmp	r0, r2
      USBH_BulkSendData (phost,
 8006e26:	bf98      	it	ls
 8006e28:	b282      	uxthls	r2, r0
 8006e2a:	69e1      	ldr	r1, [r4, #28]
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	f000 f9f4 	bl	800721a <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006e32:	2302      	movs	r3, #2
      CDC_Handle->data_tx_state = CDC_SEND_DATA; 
 8006e34:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8006e38:	e7ce      	b.n	8006dd8 <USBH_CDC_Process+0xa6>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe); 
 8006e3a:	7b61      	ldrb	r1, [r4, #13]
 8006e3c:	f001 fe4c 	bl	8008ad8 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE )
 8006e40:	2801      	cmp	r0, #1
 8006e42:	d115      	bne.n	8006e70 <USBH_CDC_Process+0x13e>
      if(CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006e44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e46:	8b22      	ldrh	r2, [r4, #24]
 8006e48:	4293      	cmp	r3, r2
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize ;
 8006e4a:	bf83      	ittte	hi
 8006e4c:	1a9b      	subhi	r3, r3, r2
 8006e4e:	6263      	strhi	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006e50:	69e3      	ldrhi	r3, [r4, #28]
        CDC_Handle->TxDataLength = 0;
 8006e52:	2300      	movls	r3, #0
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006e54:	bf8a      	itet	hi
 8006e56:	189b      	addhi	r3, r3, r2
        CDC_Handle->TxDataLength = 0;
 8006e58:	6263      	strls	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006e5a:	61e3      	strhi	r3, [r4, #28]
      if( CDC_Handle->TxDataLength > 0)
 8006e5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e5e:	b10b      	cbz	r3, 8006e64 <USBH_CDC_Process+0x132>
      CDC_Handle->data_tx_state = CDC_SEND_DATA; 
 8006e60:	2301      	movs	r3, #1
 8006e62:	e7e7      	b.n	8006e34 <USBH_CDC_Process+0x102>
        CDC_Handle->data_tx_state = CDC_IDLE;    
 8006e64:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8006e68:	4628      	mov	r0, r5
 8006e6a:	f7ff ff5f 	bl	8006d2c <USBH_CDC_TransmitCallback>
 8006e6e:	e7b3      	b.n	8006dd8 <USBH_CDC_Process+0xa6>
    else if( URB_Status == USBH_URB_NOTREADY )
 8006e70:	2802      	cmp	r0, #2
 8006e72:	d1b1      	bne.n	8006dd8 <USBH_CDC_Process+0xa6>
 8006e74:	e7f4      	b.n	8006e60 <USBH_CDC_Process+0x12e>
    USBH_BulkReceiveData (phost,
 8006e76:	7b33      	ldrb	r3, [r6, #12]
 8006e78:	8b72      	ldrh	r2, [r6, #26]
 8006e7a:	6a31      	ldr	r1, [r6, #32]
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	f000 f9e3 	bl	8007248 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006e82:	2304      	movs	r3, #4
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA; 
 8006e84:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
 8006e88:	e79a      	b.n	8006dc0 <USBH_CDC_Process+0x8e>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8006e90:	4628      	mov	r0, r5
 8006e92:	f7ff ff4c 	bl	8006d2e <USBH_CDC_ReceiveCallback>
 8006e96:	e793      	b.n	8006dc0 <USBH_CDC_Process+0x8e>
    req_status = USBH_ClrFeature(phost, 0x00); 
 8006e98:	2100      	movs	r1, #0
 8006e9a:	f000 f978 	bl	800718e <USBH_ClrFeature>
    if(req_status == USBH_OK )
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	d18e      	bne.n	8006dc0 <USBH_CDC_Process+0x8e>
      CDC_Handle->state = CDC_IDLE_STATE ;
 8006ea2:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
 8006ea6:	e78b      	b.n	8006dc0 <USBH_CDC_Process+0x8e>

08006ea8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006ea8:	f500 735f 	add.w	r3, r0, #892	; 0x37c
 8006eac:	f500 726e 	add.w	r2, r0, #952	; 0x3b8
  uint32_t i = 0;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0;
 8006eb0:	2100      	movs	r1, #0
 8006eb2:	f843 1b04 	str.w	r1, [r3], #4
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d1fb      	bne.n	8006eb2 <DeInitStateMachine+0xa>
 8006eba:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8006ebe:	f500 7147 	add.w	r1, r0, #796	; 0x31c
  }
  
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	f802 3b01 	strb.w	r3, [r2], #1
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
 8006ec8:	4291      	cmp	r1, r2
 8006eca:	d1fb      	bne.n	8006ec4 <DeInitStateMachine+0x1c>
  }
  
  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 8006ecc:	2201      	movs	r2, #1
  phost->Timer = 0;  
  
  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;  
 8006ece:	2140      	movs	r1, #64	; 0x40
  phost->gState = HOST_IDLE;
 8006ed0:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 8006ed2:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 8006ed4:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0;  
 8006ed6:	f8c0 33b8 	str.w	r3, [r0, #952]	; 0x3b8
  phost->Control.state = CTRL_SETUP;
 8006eda:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;  
 8006edc:	7181      	strb	r1, [r0, #6]
  phost->Control.errorcount = 0;
 8006ede:	7643      	strb	r3, [r0, #25]
  
  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006ee0:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8006ee4:	f880 231d 	strb.w	r2, [r0, #797]	; 0x31d
  
  return USBH_OK;
}
 8006ee8:	2000      	movs	r0, #0
 8006eea:	4770      	bx	lr

08006eec <USBH_Init>:
{
 8006eec:	b538      	push	{r3, r4, r5, lr}
 8006eee:	460d      	mov	r5, r1
  if(phost == NULL)
 8006ef0:	4604      	mov	r4, r0
 8006ef2:	b180      	cbz	r0, 8006f16 <USBH_Init+0x2a>
  phost->pActiveClass = NULL;
 8006ef4:	2300      	movs	r3, #0
  phost->id = id;
 8006ef6:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  phost->pActiveClass = NULL;
 8006efa:	f8c0 3374 	str.w	r3, [r0, #884]	; 0x374
  phost->ClassNumber = 0;
 8006efe:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
  DeInitStateMachine(phost);
 8006f02:	f7ff ffd1 	bl	8006ea8 <DeInitStateMachine>
  if(pUsrFunc != NULL)
 8006f06:	b10d      	cbz	r5, 8006f0c <USBH_Init+0x20>
    phost->pUser = pUsrFunc;
 8006f08:	f8c4 53c4 	str.w	r5, [r4, #964]	; 0x3c4
  USBH_LL_Init(phost);
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	f001 fd5b 	bl	80089c8 <USBH_LL_Init>
  return USBH_OK;
 8006f12:	2000      	movs	r0, #0
 8006f14:	bd38      	pop	{r3, r4, r5, pc}
    return USBH_FAIL; 
 8006f16:	2002      	movs	r0, #2
}
 8006f18:	bd38      	pop	{r3, r4, r5, pc}

08006f1a <USBH_RegisterClass>:
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef   status = USBH_OK;
  
  if(pclass != 0)
 8006f1a:	b149      	cbz	r1, 8006f30 <USBH_RegisterClass+0x16>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006f1c:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8006f20:	b933      	cbnz	r3, 8006f30 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006f22:	2201      	movs	r2, #1
 8006f24:	f8c0 2378 	str.w	r2, [r0, #888]	; 0x378
 8006f28:	f8c0 1370 	str.w	r1, [r0, #880]	; 0x370
      status = USBH_OK;
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL; 
 8006f30:	2002      	movs	r0, #2
  }
  
  return status;
}
 8006f32:	4770      	bx	lr

08006f34 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;
  
  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8006f34:	f890 3336 	ldrb.w	r3, [r0, #822]	; 0x336
 8006f38:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 8006f3a:	bf86      	itte	hi
 8006f3c:	f880 131f 	strbhi.w	r1, [r0, #799]	; 0x31f
  USBH_StatusTypeDef   status = USBH_OK;
 8006f40:	2000      	movhi	r0, #0
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );                 
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL; 
 8006f42:	2002      	movls	r0, #2
  }
  return status;  
}
 8006f44:	4770      	bx	lr

08006f46 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006f46:	b530      	push	{r4, r5, lr}
 8006f48:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;  
  
  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFF))&&
 8006f4a:	f890 5341 	ldrb.w	r5, [r0, #833]	; 0x341
 8006f4e:	428d      	cmp	r5, r1
 8006f50:	d001      	beq.n	8006f56 <USBH_FindInterface+0x10>
 8006f52:	29ff      	cmp	r1, #255	; 0xff
 8006f54:	d10d      	bne.n	8006f72 <USBH_FindInterface+0x2c>
 8006f56:	f890 5342 	ldrb.w	r5, [r0, #834]	; 0x342
 8006f5a:	4295      	cmp	r5, r2
 8006f5c:	d001      	beq.n	8006f62 <USBH_FindInterface+0x1c>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 8006f5e:	2aff      	cmp	r2, #255	; 0xff
 8006f60:	d107      	bne.n	8006f72 <USBH_FindInterface+0x2c>
 8006f62:	f890 5343 	ldrb.w	r5, [r0, #835]	; 0x343
 8006f66:	429d      	cmp	r5, r3
 8006f68:	d101      	bne.n	8006f6e <USBH_FindInterface+0x28>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
    {
      return  if_ix;
 8006f6a:	b2e0      	uxtb	r0, r4
 8006f6c:	bd30      	pop	{r4, r5, pc}
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
 8006f6e:	2bff      	cmp	r3, #255	; 0xff
 8006f70:	d0fb      	beq.n	8006f6a <USBH_FindInterface+0x24>
 8006f72:	3401      	adds	r4, #1
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f74:	2c02      	cmp	r4, #2
 8006f76:	f100 001a 	add.w	r0, r0, #26
 8006f7a:	d1e6      	bne.n	8006f4a <USBH_FindInterface+0x4>
    }
    if_ix++;
  }
  return 0xFF;
 8006f7c:	20ff      	movs	r0, #255	; 0xff
}
 8006f7e:	bd30      	pop	{r4, r5, pc}

08006f80 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8006f80:	b510      	push	{r4, lr}
 8006f82:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006f84:	f001 fd48 	bl	8008a18 <USBH_LL_Start>
  
  /* Activate VBUS on the port */ 
  USBH_LL_DriverVBUS (phost, TRUE);
 8006f88:	2101      	movs	r1, #1
 8006f8a:	4620      	mov	r0, r4
 8006f8c:	f001 fda8 	bl	8008ae0 <USBH_LL_DriverVBUS>
  
  return USBH_OK;  
}
 8006f90:	2000      	movs	r0, #0
 8006f92:	bd10      	pop	{r4, pc}

08006f94 <USBH_LL_SetTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
  phost->Timer = time;
 8006f94:	f8c0 13b8 	str.w	r1, [r0, #952]	; 0x3b8
 8006f98:	4770      	bx	lr

08006f9a <USBH_LL_IncTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
  phost->Timer ++;
 8006f9a:	f8d0 23b8 	ldr.w	r2, [r0, #952]	; 0x3b8
 8006f9e:	3201      	adds	r2, #1
 8006fa0:	f8c0 23b8 	str.w	r2, [r0, #952]	; 0x3b8
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8006fa4:	7802      	ldrb	r2, [r0, #0]
 8006fa6:	2a0a      	cmp	r2, #10
 8006fa8:	d104      	bne.n	8006fb4 <USBH_LL_IncTimer+0x1a>
 8006faa:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 8006fae:	b10b      	cbz	r3, 8006fb4 <USBH_LL_IncTimer+0x1a>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006fb0:	699b      	ldr	r3, [r3, #24]
 8006fb2:	4718      	bx	r3
 8006fb4:	4770      	bx	lr

08006fb6 <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect  (USBH_HandleTypeDef *phost)
{
  if(phost->gState == HOST_IDLE )
 8006fb6:	7802      	ldrb	r2, [r0, #0]
{
 8006fb8:	b508      	push	{r3, lr}
  if(phost->gState == HOST_IDLE )
 8006fba:	b94a      	cbnz	r2, 8006fd0 <USBH_LL_Connect+0x1a>
  {
    phost->device.is_connected = 1;
    
    if(phost->pUser != NULL)
 8006fbc:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
    phost->device.is_connected = 1;
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	f880 231e 	strb.w	r2, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 8006fc6:	b10b      	cbz	r3, 8006fcc <USBH_LL_Connect+0x16>
    {    
      phost->pUser(phost, HOST_USER_CONNECTION);
 8006fc8:	2104      	movs	r1, #4
 8006fca:	4798      	blx	r3
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
}
 8006fcc:	2000      	movs	r0, #0
 8006fce:	bd08      	pop	{r3, pc}
  else if(phost->gState == HOST_DEV_WAIT_FOR_ATTACHMENT )
 8006fd0:	7802      	ldrb	r2, [r0, #0]
 8006fd2:	2a01      	cmp	r2, #1
    phost->gState = HOST_DEV_ATTACHED ;
 8006fd4:	bf04      	itt	eq
 8006fd6:	2202      	moveq	r2, #2
 8006fd8:	7002      	strbeq	r2, [r0, #0]
 8006fda:	e7f7      	b.n	8006fcc <USBH_LL_Connect+0x16>

08006fdc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8006fdc:	b510      	push	{r4, lr}
 8006fde:	4604      	mov	r4, r0
  /*Stop Host */ 
  USBH_LL_Stop(phost);  
 8006fe0:	f001 fd28 	bl	8008a34 <USBH_LL_Stop>
  
  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8006fe4:	7921      	ldrb	r1, [r4, #4]
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	f000 f96a 	bl	80072c0 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);  
 8006fec:	7961      	ldrb	r1, [r4, #5]
 8006fee:	4620      	mov	r0, r4
 8006ff0:	f000 f966 	bl	80072c0 <USBH_FreePipe>
   
  phost->device.is_connected = 0; 
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
   
  if(phost->pUser != NULL)
 8006ffa:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8006ffe:	b113      	cbz	r3, 8007006 <USBH_LL_Disconnect+0x2a>
  {    
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007000:	2105      	movs	r1, #5
 8007002:	4620      	mov	r0, r4
 8007004:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected"); 
  
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007006:	4620      	mov	r0, r4
 8007008:	f001 fd06 	bl	8008a18 <USBH_LL_Start>
  
  phost->gState = HOST_DEV_DISCONNECTED;
 800700c:	2303      	movs	r3, #3
 800700e:	7023      	strb	r3, [r4, #0]
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
}
 8007010:	2000      	movs	r0, #0
 8007012:	bd10      	pop	{r4, pc}

08007014 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
 8007014:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007016:	4604      	mov	r4, r0
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
  
  switch (phost->RequestState)
 8007018:	7880      	ldrb	r0, [r0, #2]
 800701a:	2801      	cmp	r0, #1
 800701c:	d003      	beq.n	8007026 <USBH_CtlReq+0x12>
 800701e:	2802      	cmp	r0, #2
 8007020:	d008      	beq.n	8007034 <USBH_CtlReq+0x20>
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 8007022:	2001      	movs	r0, #1
 8007024:	e004      	b.n	8007030 <USBH_CtlReq+0x1c>
    phost->RequestState = CMD_WAIT;
 8007026:	2302      	movs	r3, #2
    phost->Control.buff = buff; 
 8007028:	60a1      	str	r1, [r4, #8]
    phost->Control.length = length;
 800702a:	81a2      	strh	r2, [r4, #12]
    phost->Control.state = CTRL_SETUP;  
 800702c:	7620      	strb	r0, [r4, #24]
    phost->RequestState = CMD_WAIT;
 800702e:	70a3      	strb	r3, [r4, #2]
}
 8007030:	b003      	add	sp, #12
 8007032:	bd30      	pop	{r4, r5, pc}
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  
  switch (phost->Control.state)
 8007034:	7e23      	ldrb	r3, [r4, #24]
 8007036:	3b01      	subs	r3, #1
 8007038:	2b0a      	cmp	r3, #10
 800703a:	d8f2      	bhi.n	8007022 <USBH_CtlReq+0xe>
 800703c:	e8df f003 	tbb	[pc, r3]
 8007040:	31260f06 	.word	0x31260f06
 8007044:	6b604a3d 	.word	0x6b604a3d
 8007048:	897c      	.short	0x897c
 800704a:	92          	.byte	0x92
 800704b:	00          	.byte	0x00
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup     (phost, 
 800704c:	7962      	ldrb	r2, [r4, #5]
 800704e:	f104 0110 	add.w	r1, r4, #16
 8007052:	4620      	mov	r0, r4
 8007054:	f000 f8a9 	bl	80071aa <USBH_CtlSendSetup>
	                   (uint8_t *)phost->Control.setup.d8 , 
	                   phost->Control.pipe_out); 
    
    phost->Control.state = CTRL_SETUP_WAIT; 
 8007058:	2302      	movs	r3, #2
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
    
    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
    { 
      phost->Control.state = CTRL_STATUS_OUT;
 800705a:	7623      	strb	r3, [r4, #24]
 800705c:	e7e1      	b.n	8007022 <USBH_CtlReq+0xe>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out); 
 800705e:	7961      	ldrb	r1, [r4, #5]
 8007060:	4620      	mov	r0, r4
 8007062:	f001 fd39 	bl	8008ad8 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8007066:	2801      	cmp	r0, #1
 8007068:	d123      	bne.n	80070b2 <USBH_CtlReq+0x9e>
      if (phost->Control.setup.b.wLength.w != 0 )
 800706a:	8ae2      	ldrh	r2, [r4, #22]
 800706c:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8007070:	b132      	cbz	r2, 8007080 <USBH_CtlReq+0x6c>
        if (direction == USB_D2H)
 8007072:	2b00      	cmp	r3, #0
 8007074:	da02      	bge.n	800707c <USBH_CtlReq+0x68>
          phost->Control.state = CTRL_DATA_IN;
 8007076:	2303      	movs	r3, #3
 8007078:	7623      	strb	r3, [r4, #24]
 800707a:	e7d9      	b.n	8007030 <USBH_CtlReq+0x1c>
          phost->Control.state = CTRL_DATA_OUT;
 800707c:	2305      	movs	r3, #5
 800707e:	e7ec      	b.n	800705a <USBH_CtlReq+0x46>
        if (direction == USB_D2H)
 8007080:	2b00      	cmp	r3, #0
 8007082:	da01      	bge.n	8007088 <USBH_CtlReq+0x74>
      phost->Control.state = CTRL_STATUS_OUT;
 8007084:	2309      	movs	r3, #9
 8007086:	e7e8      	b.n	800705a <USBH_CtlReq+0x46>
          phost->Control.state = CTRL_STATUS_IN;
 8007088:	2307      	movs	r3, #7
 800708a:	e7e6      	b.n	800705a <USBH_CtlReq+0x46>
     phost->Control.timer = phost->Timer;
 800708c:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 8007090:	81e3      	strh	r3, [r4, #14]
    USBH_CtlReceiveData(phost,
 8007092:	89a2      	ldrh	r2, [r4, #12]
 8007094:	7923      	ldrb	r3, [r4, #4]
 8007096:	68a1      	ldr	r1, [r4, #8]
 8007098:	4620      	mov	r0, r4
 800709a:	f000 f8ae 	bl	80071fa <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 800709e:	2304      	movs	r3, #4
 80070a0:	e7db      	b.n	800705a <USBH_CtlReq+0x46>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 80070a2:	7921      	ldrb	r1, [r4, #4]
 80070a4:	4620      	mov	r0, r4
 80070a6:	f001 fd17 	bl	8008ad8 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 80070aa:	2801      	cmp	r0, #1
 80070ac:	d0ea      	beq.n	8007084 <USBH_CtlReq+0x70>
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
   
    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL) 
 80070ae:	2805      	cmp	r0, #5
 80070b0:	d01a      	beq.n	80070e8 <USBH_CtlReq+0xd4>
    else if(URB_Status == USBH_URB_ERROR)
 80070b2:	2804      	cmp	r0, #4
 80070b4:	d1b5      	bne.n	8007022 <USBH_CtlReq+0xe>
      phost->Control.state = CTRL_ERROR;
 80070b6:	230b      	movs	r3, #11
 80070b8:	e7cf      	b.n	800705a <USBH_CtlReq+0x46>
    }
    break;
    
  case CTRL_DATA_OUT:
    
    USBH_CtlSendData (phost,
 80070ba:	2501      	movs	r5, #1
 80070bc:	7963      	ldrb	r3, [r4, #5]
 80070be:	89a2      	ldrh	r2, [r4, #12]
 80070c0:	9500      	str	r5, [sp, #0]
 80070c2:	68a1      	ldr	r1, [r4, #8]
 80070c4:	4620      	mov	r0, r4
 80070c6:	f000 f881 	bl	80071cc <USBH_CtlSendData>
                      phost->Control.buff, 
                      phost->Control.length , 
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 80070ca:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 80070ce:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80070d0:	2306      	movs	r3, #6
 80070d2:	e7c2      	b.n	800705a <USBH_CtlReq+0x46>
    break;
    
  case CTRL_DATA_OUT_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);     
 80070d4:	7961      	ldrb	r1, [r4, #5]
 80070d6:	4620      	mov	r0, r4
 80070d8:	f001 fcfe 	bl	8008ad8 <USBH_LL_GetURBState>
    
    if  (URB_Status == USBH_URB_DONE)
 80070dc:	2801      	cmp	r0, #1
 80070de:	d0d3      	beq.n	8007088 <USBH_CtlReq+0x74>
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    
    /* handle error cases */
    else if  (URB_Status == USBH_URB_STALL) 
 80070e0:	2805      	cmp	r0, #5
 80070e2:	d103      	bne.n	80070ec <USBH_CtlReq+0xd8>
    { 
      /* In stall case, return to previous machine state*/
      phost->Control.state = CTRL_STALLED; 
 80070e4:	230c      	movs	r3, #12
 80070e6:	7623      	strb	r3, [r4, #24]
#endif      
    }
     else if(URB_Status == USBH_URB_STALL)
    {
      /* Control transfers completed, Exit the State Machine */
      status = USBH_NOT_SUPPORTED;
 80070e8:	2003      	movs	r0, #3
 80070ea:	e7a1      	b.n	8007030 <USBH_CtlReq+0x1c>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80070ec:	2802      	cmp	r0, #2
 80070ee:	d0c5      	beq.n	800707c <USBH_CtlReq+0x68>
    else if (URB_Status == USBH_URB_ERROR)
 80070f0:	2804      	cmp	r0, #4
 80070f2:	d196      	bne.n	8007022 <USBH_CtlReq+0xe>
      phost->Control.state = CTRL_ERROR;  
 80070f4:	230b      	movs	r3, #11
 80070f6:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 80070f8:	2301      	movs	r3, #1
 80070fa:	70a3      	strb	r3, [r4, #2]
      status = USBH_FAIL;
 80070fc:	2002      	movs	r0, #2
  return status;
 80070fe:	e797      	b.n	8007030 <USBH_CtlReq+0x1c>
    USBH_CtlReceiveData (phost,
 8007100:	2200      	movs	r2, #0
 8007102:	7923      	ldrb	r3, [r4, #4]
 8007104:	4611      	mov	r1, r2
 8007106:	4620      	mov	r0, r4
 8007108:	f000 f877 	bl	80071fa <USBH_CtlReceiveData>
    phost->Control.timer = phost->Timer;
 800710c:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 8007110:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007112:	2308      	movs	r3, #8
 8007114:	e7a1      	b.n	800705a <USBH_CtlReq+0x46>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 8007116:	7921      	ldrb	r1, [r4, #4]
 8007118:	4620      	mov	r0, r4
 800711a:	f001 fcdd 	bl	8008ad8 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 800711e:	2801      	cmp	r0, #1
 8007120:	d104      	bne.n	800712c <USBH_CtlReq+0x118>
      phost->RequestState = CMD_SEND;
 8007122:	2301      	movs	r3, #1
      phost->Control.state =CTRL_IDLE;  
 8007124:	2000      	movs	r0, #0
      phost->RequestState = CMD_SEND;
 8007126:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;  
 8007128:	7620      	strb	r0, [r4, #24]
 800712a:	e781      	b.n	8007030 <USBH_CtlReq+0x1c>
    else if (URB_Status == USBH_URB_ERROR)
 800712c:	2804      	cmp	r0, #4
 800712e:	d0c2      	beq.n	80070b6 <USBH_CtlReq+0xa2>
     else if(URB_Status == USBH_URB_STALL)
 8007130:	2805      	cmp	r0, #5
 8007132:	f47f af76 	bne.w	8007022 <USBH_CtlReq+0xe>
 8007136:	e7d7      	b.n	80070e8 <USBH_CtlReq+0xd4>
#endif      
    }
    break;
    
  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8007138:	2200      	movs	r2, #0
 800713a:	2501      	movs	r5, #1
 800713c:	7963      	ldrb	r3, [r4, #5]
 800713e:	9500      	str	r5, [sp, #0]
 8007140:	4611      	mov	r1, r2
 8007142:	4620      	mov	r0, r4
 8007144:	f000 f842 	bl	80071cc <USBH_CtlSendData>
                      0,
                      0,
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 8007148:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 800714c:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800714e:	230a      	movs	r3, #10
 8007150:	e783      	b.n	800705a <USBH_CtlReq+0x46>
    break;
    
  case CTRL_STATUS_OUT_WAIT: 
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);  
 8007152:	7961      	ldrb	r1, [r4, #5]
 8007154:	4620      	mov	r0, r4
 8007156:	f001 fcbf 	bl	8008ad8 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 800715a:	2801      	cmp	r0, #1
 800715c:	d0e1      	beq.n	8007122 <USBH_CtlReq+0x10e>
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    else if  (URB_Status == USBH_URB_NOTREADY)
 800715e:	2802      	cmp	r0, #2
 8007160:	d1a7      	bne.n	80070b2 <USBH_CtlReq+0x9e>
 8007162:	e78f      	b.n	8007084 <USBH_CtlReq+0x70>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be 
    required to clear the halt or error condition if the next Setup PID is not 
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007164:	7e63      	ldrb	r3, [r4, #25]
 8007166:	3301      	adds	r3, #1
 8007168:	b2db      	uxtb	r3, r3
 800716a:	2b02      	cmp	r3, #2
 800716c:	7663      	strb	r3, [r4, #25]
 800716e:	d806      	bhi.n	800717e <USBH_CtlReq+0x16a>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8007170:	4620      	mov	r0, r4
 8007172:	f001 fc5f 	bl	8008a34 <USBH_LL_Stop>
         
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
 8007176:	2001      	movs	r0, #1
 8007178:	7620      	strb	r0, [r4, #24]
      phost->RequestState = CMD_SEND;
 800717a:	70a0      	strb	r0, [r4, #2]
 800717c:	e758      	b.n	8007030 <USBH_CtlReq+0x1c>
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800717e:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8007182:	2106      	movs	r1, #6
 8007184:	4620      	mov	r0, r4
 8007186:	4798      	blx	r3
      phost->Control.errorcount = 0;
 8007188:	2300      	movs	r3, #0
 800718a:	7663      	strb	r3, [r4, #25]
 800718c:	e7b4      	b.n	80070f8 <USBH_CtlReq+0xe4>

0800718e <USBH_ClrFeature>:
  if(phost->RequestState == CMD_SEND)
 800718e:	7883      	ldrb	r3, [r0, #2]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d106      	bne.n	80071a2 <USBH_ClrFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | 
 8007194:	2202      	movs	r2, #2
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007196:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007198:	2300      	movs	r3, #0
    phost->Control.setup.b.bmRequestType = USB_H2D | 
 800719a:	7402      	strb	r2, [r0, #16]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800719c:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800719e:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0;           
 80071a0:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0 , 0 );   
 80071a2:	2200      	movs	r2, #0
 80071a4:	4611      	mov	r1, r2
 80071a6:	f7ff bf35 	b.w	8007014 <USBH_CtlReq>

080071aa <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint8_t pipe_num)
{
 80071aa:	b530      	push	{r4, r5, lr}
 80071ac:	b085      	sub	sp, #20

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80071ae:	2400      	movs	r4, #0
{
 80071b0:	4615      	mov	r5, r2
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80071b2:	2308      	movs	r3, #8
 80071b4:	9302      	str	r3, [sp, #8]
 80071b6:	9101      	str	r1, [sp, #4]
 80071b8:	9403      	str	r4, [sp, #12]
 80071ba:	9400      	str	r4, [sp, #0]
 80071bc:	4623      	mov	r3, r4
 80071be:	4622      	mov	r2, r4
 80071c0:	4629      	mov	r1, r5
 80071c2:	f001 fc6f 	bl	8008aa4 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */ 
                          0);
  return USBH_OK;  
}
 80071c6:	4620      	mov	r0, r4
 80071c8:	b005      	add	sp, #20
 80071ca:	bd30      	pop	{r4, r5, pc}

080071cc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 80071cc:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 80071ce:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 80071d2:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 80071d4:	2d00      	cmp	r5, #0
{
 80071d6:	461c      	mov	r4, r3
 80071d8:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0;
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80071dc:	9202      	str	r2, [sp, #8]
    do_ping = 0;
 80071de:	bf18      	it	ne
 80071e0:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80071e2:	9303      	str	r3, [sp, #12]
 80071e4:	2301      	movs	r3, #1
 80071e6:	9300      	str	r3, [sp, #0]
 80071e8:	2300      	movs	r3, #0
 80071ea:	9101      	str	r1, [sp, #4]
 80071ec:	461a      	mov	r2, r3
 80071ee:	4621      	mov	r1, r4
 80071f0:	f001 fc58 	bl	8008aa4 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          do_ping);             /* do ping (HS Only)*/
  
  return USBH_OK;
}
 80071f4:	2000      	movs	r0, #0
 80071f6:	b005      	add	sp, #20
 80071f8:	bd30      	pop	{r4, r5, pc}

080071fa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t* buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 80071fa:	b530      	push	{r4, r5, lr}
 80071fc:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80071fe:	2400      	movs	r4, #0
{
 8007200:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007202:	9202      	str	r2, [sp, #8]
 8007204:	2201      	movs	r2, #1
 8007206:	9101      	str	r1, [sp, #4]
 8007208:	9403      	str	r4, [sp, #12]
 800720a:	9200      	str	r2, [sp, #0]
 800720c:	4623      	mov	r3, r4
 800720e:	4629      	mov	r1, r5
 8007210:	f001 fc48 	bl	8008aa4 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          0);
  return USBH_OK;
  
}
 8007214:	4620      	mov	r0, r4
 8007216:	b005      	add	sp, #20
 8007218:	bd30      	pop	{r4, r5, pc}

0800721a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{ 
 800721a:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 800721c:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{ 
 8007220:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007222:	2d00      	cmp	r5, #0
{ 
 8007224:	461c      	mov	r4, r3
 8007226:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0;
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800722a:	9202      	str	r2, [sp, #8]
    do_ping = 0;
 800722c:	bf18      	it	ne
 800722e:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007230:	9303      	str	r3, [sp, #12]
 8007232:	2301      	movs	r3, #1
 8007234:	9101      	str	r1, [sp, #4]
 8007236:	9300      	str	r3, [sp, #0]
 8007238:	2200      	movs	r2, #0
 800723a:	2302      	movs	r3, #2
 800723c:	4621      	mov	r1, r4
 800723e:	f001 fc31 	bl	8008aa4 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8007242:	2000      	movs	r0, #0
 8007244:	b005      	add	sp, #20
 8007246:	bd30      	pop	{r4, r5, pc}

08007248 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007248:	b530      	push	{r4, r5, lr}
 800724a:	b085      	sub	sp, #20
 800724c:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800724e:	2400      	movs	r4, #0
 8007250:	9202      	str	r2, [sp, #8]
 8007252:	2201      	movs	r2, #1
 8007254:	9101      	str	r1, [sp, #4]
 8007256:	9403      	str	r4, [sp, #12]
 8007258:	9200      	str	r2, [sp, #0]
 800725a:	2302      	movs	r3, #2
 800725c:	4629      	mov	r1, r5
 800725e:	f001 fc21 	bl	8008aa4 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          0);
  return USBH_OK;
}
 8007262:	4620      	mov	r0, r4
 8007264:	b005      	add	sp, #20
 8007266:	bd30      	pop	{r4, r5, pc}

08007268 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8007268:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_OpenPipe(phost,
 800726a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800726e:	9402      	str	r4, [sp, #8]
 8007270:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8007274:	9401      	str	r4, [sp, #4]
 8007276:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800727a:	9400      	str	r4, [sp, #0]
 800727c:	f001 fbec 	bl	8008a58 <USBH_LL_OpenPipe>
                        ep_type,
                        mps);
  
  return USBH_OK; 

}
 8007280:	2000      	movs	r0, #0
 8007282:	b004      	add	sp, #16
 8007284:	bd10      	pop	{r4, pc}

08007286 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8007286:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 8007288:	f001 fbfe 	bl	8008a88 <USBH_LL_ClosePipe>
  
  return USBH_OK; 

}
 800728c:	2000      	movs	r0, #0
 800728e:	bd08      	pop	{r3, pc}

08007290 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007290:	b530      	push	{r4, r5, lr}
 8007292:	2300      	movs	r3, #0
 8007294:	f500 745f 	add.w	r4, r0, #892	; 0x37c
{
  uint8_t idx = 0;
  
  for (idx = 0 ; idx < 11 ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000) == 0)
 8007298:	f854 5b04 	ldr.w	r5, [r4], #4
 800729c:	042d      	lsls	r5, r5, #16
 800729e:	b2da      	uxtb	r2, r3
 80072a0:	d408      	bmi.n	80072b4 <USBH_AllocPipe+0x24>
	phost->Pipes[pipe] = 0x8000 | ep_addr;
 80072a2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80072a6:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
	{
	   return idx;
 80072aa:	b292      	uxth	r2, r2
	phost->Pipes[pipe] = 0x8000 | ep_addr;
 80072ac:	f8c0 137c 	str.w	r1, [r0, #892]	; 0x37c
}
 80072b0:	b2d0      	uxtb	r0, r2
 80072b2:	bd30      	pop	{r4, r5, pc}
 80072b4:	3301      	adds	r3, #1
  for (idx = 0 ; idx < 11 ; idx++)
 80072b6:	2b0b      	cmp	r3, #11
 80072b8:	d1ee      	bne.n	8007298 <USBH_AllocPipe+0x8>
	} 
  }
  return 0xFFFF;
 80072ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80072be:	e7f7      	b.n	80072b0 <USBH_AllocPipe+0x20>

080072c0 <USBH_FreePipe>:
   if(idx < 11)
 80072c0:	290a      	cmp	r1, #10
 80072c2:	bf9f      	itttt	ls
 80072c4:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
	 phost->Pipes[idx] &= 0x7FFF;
 80072c8:	f8d0 337c 	ldrls.w	r3, [r0, #892]	; 0x37c
 80072cc:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 80072d0:	f8c0 337c 	strls.w	r3, [r0, #892]	; 0x37c
}
 80072d4:	2000      	movs	r0, #0
 80072d6:	4770      	bx	lr

080072d8 <BSP_I2C1_DeInit>:
{
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80072d8:	4a09      	ldr	r2, [pc, #36]	; (8007300 <BSP_I2C1_DeInit+0x28>)
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 80072da:	480a      	ldr	r0, [pc, #40]	; (8007304 <BSP_I2C1_DeInit+0x2c>)
int32_t BSP_I2C1_DeInit(void) {
 80072dc:	b508      	push	{r3, lr}
    __HAL_RCC_I2C1_CLK_DISABLE();
 80072de:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80072e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80072e4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 80072e6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80072ea:	f7fc fa73 	bl	80037d4 <HAL_GPIO_DeInit>
  if (HAL_I2C_DeInit(&hi2c1) == HAL_OK) {
 80072ee:	4806      	ldr	r0, [pc, #24]	; (8007308 <BSP_I2C1_DeInit+0x30>)
 80072f0:	f7fd f984 	bl	80045fc <HAL_I2C_DeInit>
 80072f4:	2800      	cmp	r0, #0
}
 80072f6:	bf14      	ite	ne
 80072f8:	f06f 0007 	mvnne.w	r0, #7
 80072fc:	2000      	moveq	r0, #0
 80072fe:	bd08      	pop	{r3, pc}
 8007300:	40023800 	.word	0x40023800
 8007304:	40020400 	.word	0x40020400
 8007308:	200002f0 	.word	0x200002f0

0800730c <BSP_I2C1_WriteReg>:
int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t len) {
 800730c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if(HAL_I2C_Mem_Write(&hi2c1, (uint8_t)DevAddr,
 800730e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8007312:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
 8007316:	460a      	mov	r2, r1
 8007318:	2301      	movs	r3, #1
 800731a:	b2c1      	uxtb	r1, r0
 800731c:	4804      	ldr	r0, [pc, #16]	; (8007330 <BSP_I2C1_WriteReg+0x24>)
 800731e:	f7fd f987 	bl	8004630 <HAL_I2C_Mem_Write>
 8007322:	2800      	cmp	r0, #0
}
 8007324:	bf14      	ite	ne
 8007326:	f06f 0007 	mvnne.w	r0, #7
 800732a:	2000      	moveq	r0, #0
 800732c:	b004      	add	sp, #16
 800732e:	bd10      	pop	{r4, pc}
 8007330:	200002f0 	.word	0x200002f0

08007334 <BSP_I2C1_ReadReg>:
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t len) {
 8007334:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, (uint16_t)Reg,
 8007336:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800733a:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
 800733e:	460a      	mov	r2, r1
 8007340:	2301      	movs	r3, #1
 8007342:	4601      	mov	r1, r0
 8007344:	4804      	ldr	r0, [pc, #16]	; (8007358 <BSP_I2C1_ReadReg+0x24>)
 8007346:	f7fd fa09 	bl	800475c <HAL_I2C_Mem_Read>
 800734a:	2800      	cmp	r0, #0
}
 800734c:	bf14      	ite	ne
 800734e:	f06f 0007 	mvnne.w	r0, #7
 8007352:	2000      	moveq	r0, #0
 8007354:	b004      	add	sp, #16
 8007356:	bd10      	pop	{r4, pc}
 8007358:	200002f0 	.word	0x200002f0

0800735c <BSP_GetTick>:
  return HAL_GetTick();
 800735c:	f7fb be28 	b.w	8002fb0 <HAL_GetTick>

08007360 <MX_I2C1_Init>:
  hi2c->Init.ClockSpeed = 100000;
 8007360:	f8df c02c 	ldr.w	ip, [pc, #44]	; 8007390 <MX_I2C1_Init+0x30>
 8007364:	4a09      	ldr	r2, [pc, #36]	; (800738c <MX_I2C1_Init+0x2c>)
{
 8007366:	b508      	push	{r3, lr}
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007368:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  hi2c->Init.ClockSpeed = 100000;
 800736c:	e880 1004 	stmia.w	r0, {r2, ip}
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007370:	2200      	movs	r2, #0
 8007372:	6082      	str	r2, [r0, #8]
  hi2c->Init.OwnAddress1 = 0;
 8007374:	60c2      	str	r2, [r0, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007376:	6101      	str	r1, [r0, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007378:	6142      	str	r2, [r0, #20]
  hi2c->Init.OwnAddress2 = 0;
 800737a:	6182      	str	r2, [r0, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800737c:	61c2      	str	r2, [r0, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800737e:	6202      	str	r2, [r0, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8007380:	f7fd f8ce 	bl	8004520 <HAL_I2C_Init>
}
 8007384:	3000      	adds	r0, #0
 8007386:	bf18      	it	ne
 8007388:	2001      	movne	r0, #1
 800738a:	bd08      	pop	{r3, pc}
 800738c:	40005400 	.word	0x40005400
 8007390:	000186a0 	.word	0x000186a0

08007394 <BSP_I2C1_Init>:
int32_t BSP_I2C1_Init(void) {
 8007394:	b530      	push	{r4, r5, lr}
  hi2c1.Instance  = I2C1;
 8007396:	4c1a      	ldr	r4, [pc, #104]	; (8007400 <BSP_I2C1_Init+0x6c>)
 8007398:	4b1a      	ldr	r3, [pc, #104]	; (8007404 <BSP_I2C1_Init+0x70>)
 800739a:	6023      	str	r3, [r4, #0]
int32_t BSP_I2C1_Init(void) {
 800739c:	b087      	sub	sp, #28
  if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800739e:	4620      	mov	r0, r4
 80073a0:	f7fd faec 	bl	800497c <HAL_I2C_GetState>
 80073a4:	4605      	mov	r5, r0
 80073a6:	bb40      	cbnz	r0, 80073fa <BSP_I2C1_Init+0x66>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80073a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80073ac:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80073ae:	2312      	movs	r3, #18
 80073b0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80073b2:	2301      	movs	r3, #1
 80073b4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073b6:	2303      	movs	r3, #3
 80073b8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80073ba:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073bc:	eb0d 0103 	add.w	r1, sp, r3
 80073c0:	4811      	ldr	r0, [pc, #68]	; (8007408 <BSP_I2C1_Init+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80073c2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073c4:	f7fc f92c 	bl	8003620 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80073c8:	4b10      	ldr	r3, [pc, #64]	; (800740c <BSP_I2C1_Init+0x78>)
 80073ca:	9500      	str	r5, [sp, #0]
 80073cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073ce:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80073d2:	641a      	str	r2, [r3, #64]	; 0x40
 80073d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073da:	9300      	str	r3, [sp, #0]
    if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80073dc:	4620      	mov	r0, r4
    __HAL_RCC_I2C1_CLK_ENABLE();
 80073de:	9b00      	ldr	r3, [sp, #0]
    if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80073e0:	f7ff ffbe 	bl	8007360 <MX_I2C1_Init>
 80073e4:	4601      	mov	r1, r0
 80073e6:	b118      	cbz	r0, 80073f0 <BSP_I2C1_Init+0x5c>
      ret = BSP_ERROR_BUS_FAILURE;
 80073e8:	f06f 0007 	mvn.w	r0, #7
}
 80073ec:	b007      	add	sp, #28
 80073ee:	bd30      	pop	{r4, r5, pc}
    else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) 
 80073f0:	4620      	mov	r0, r4
 80073f2:	f7fd fac6 	bl	8004982 <HAL_I2CEx_ConfigAnalogFilter>
 80073f6:	2800      	cmp	r0, #0
 80073f8:	d1f6      	bne.n	80073e8 <BSP_I2C1_Init+0x54>
      ret = BSP_ERROR_NONE;
 80073fa:	2000      	movs	r0, #0
  return ret;
 80073fc:	e7f6      	b.n	80073ec <BSP_I2C1_Init+0x58>
 80073fe:	bf00      	nop
 8007400:	200002f0 	.word	0x200002f0
 8007404:	40005400 	.word	0x40005400
 8007408:	40020400 	.word	0x40020400
 800740c:	40023800 	.word	0x40023800

08007410 <MX_X_CUBE_MEMS1_Init>:
 static int32_t LSM6DSL_X_SelfTest(void);
 static int32_t LSM6DSL_G_SelfTest(void);


void MX_X_CUBE_MEMS1_Init(void)
{
 8007410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE END MEMS_Library_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  /* USER CODE BEGIN SV */ 
	BSP_MOTION_SENSOR_Init(LSM6DSL_0,MOTION_ACCELERO);
 8007412:	2102      	movs	r1, #2
 8007414:	2000      	movs	r0, #0
 8007416:	f000 f809 	bl	800742c <BSP_MOTION_SENSOR_Init>
	BSP_MOTION_SENSOR_GetAxes(LSM6DSL_0, MOTION_ACCELERO, &Axes);
 800741a:	aa01      	add	r2, sp, #4
 800741c:	2102      	movs	r1, #2
 800741e:	2000      	movs	r0, #0
 8007420:	f000 f97c 	bl	800771c <BSP_MOTION_SENSOR_GetAxes>
	/* USER CODE END SV */
  
  /* USER CODE BEGIN MEMS_Library_Init_PostTreatment */
  
  /* USER CODE END MEMS_Library_Init_PostTreatment */
}
 8007424:	b005      	add	sp, #20
 8007426:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800742c <BSP_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t BSP_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800742c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t function = MOTION_GYRO;
  uint32_t i;
  uint32_t component_functions = 0;
  MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8007430:	2801      	cmp	r0, #1
{
 8007432:	b091      	sub	sp, #68	; 0x44
 8007434:	4606      	mov	r6, r0
 8007436:	460f      	mov	r7, r1
  switch (Instance)
 8007438:	f000 8093 	beq.w	8007562 <BSP_MOTION_SENSOR_Init+0x136>
 800743c:	d305      	bcc.n	800744a <BSP_MOTION_SENSOR_Init+0x1e>
 800743e:	2802      	cmp	r0, #2
 8007440:	f000 80e1 	beq.w	8007606 <BSP_MOTION_SENSOR_Init+0x1da>
        component_functions |= MOTION_MAGNETO;
      }
      break;
#endif
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8007444:	f06f 0001 	mvn.w	r0, #1
 8007448:	e062      	b.n	8007510 <BSP_MOTION_SENSOR_Init+0xe4>
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 800744a:	2300      	movs	r3, #0
 800744c:	9304      	str	r3, [sp, #16]
  io_ctx.Address     = LSM6DSL_I2C_ADD_H; /* SA0 = VDD */
 800744e:	23d7      	movs	r3, #215	; 0xd7
 8007450:	f88d 3014 	strb.w	r3, [sp, #20]
  io_ctx.Init        = BSP_LSM6DSL_Init;
 8007454:	4b9d      	ldr	r3, [pc, #628]	; (80076cc <BSP_MOTION_SENSOR_Init+0x2a0>)
 8007456:	9302      	str	r3, [sp, #8]
  io_ctx.DeInit      = BSP_LSM6DSL_DeInit;
 8007458:	4b9d      	ldr	r3, [pc, #628]	; (80076d0 <BSP_MOTION_SENSOR_Init+0x2a4>)
 800745a:	9303      	str	r3, [sp, #12]
  io_ctx.ReadReg     = BSP_LSM6DSL_ReadReg;
  io_ctx.WriteReg    = BSP_LSM6DSL_WriteReg;
  io_ctx.GetTick     = BSP_GetTick;

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 800745c:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 8007714 <BSP_MOTION_SENSOR_Init+0x2e8>
  io_ctx.ReadReg     = BSP_LSM6DSL_ReadReg;
 8007460:	4b9c      	ldr	r3, [pc, #624]	; (80076d4 <BSP_MOTION_SENSOR_Init+0x2a8>)
 8007462:	9307      	str	r3, [sp, #28]
  io_ctx.WriteReg    = BSP_LSM6DSL_WriteReg;
 8007464:	4b9c      	ldr	r3, [pc, #624]	; (80076d8 <BSP_MOTION_SENSOR_Init+0x2ac>)
 8007466:	9306      	str	r3, [sp, #24]
  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 8007468:	a902      	add	r1, sp, #8
  io_ctx.GetTick     = BSP_GetTick;
 800746a:	4b9c      	ldr	r3, [pc, #624]	; (80076dc <BSP_MOTION_SENSOR_Init+0x2b0>)
 800746c:	9308      	str	r3, [sp, #32]
  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 800746e:	4640      	mov	r0, r8
 8007470:	f7fa fe40 	bl	80020f4 <LSM6DSL_RegisterBusIO>
 8007474:	2800      	cmp	r0, #0
 8007476:	d13d      	bne.n	80074f4 <BSP_MOTION_SENSOR_Init+0xc8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 8007478:	f10d 0107 	add.w	r1, sp, #7
 800747c:	4640      	mov	r0, r8
 800747e:	f7fa fa78 	bl	8001972 <LSM6DSL_ReadID>
 8007482:	4681      	mov	r9, r0
 8007484:	2800      	cmp	r0, #0
 8007486:	d135      	bne.n	80074f4 <BSP_MOTION_SENSOR_Init+0xc8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != LSM6DSL_ID)
 8007488:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800748c:	2b6a      	cmp	r3, #106	; 0x6a
 800748e:	d131      	bne.n	80074f4 <BSP_MOTION_SENSOR_Init+0xc8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 8007490:	a909      	add	r1, sp, #36	; 0x24
 8007492:	4640      	mov	r0, r8
 8007494:	f7fa f9e2 	bl	800185c <LSM6DSL_GetCapabilities>
    MotionCtx[LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8007498:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 800749c:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
 80074a0:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25

    MotionCompObj[LSM6DSL_0] = &lsm6dsl_obj_0;
 80074a4:	4c8e      	ldr	r4, [pc, #568]	; (80076e0 <BSP_MOTION_SENSOR_Init+0x2b4>)
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 80074a6:	4d8f      	ldr	r5, [pc, #572]	; (80076e4 <BSP_MOTION_SENSOR_Init+0x2b8>)
    MotionCompObj[LSM6DSL_0] = &lsm6dsl_obj_0;
 80074a8:	f8c4 8000 	str.w	r8, [r4]
    MotionCtx[LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80074b2:	498d      	ldr	r1, [pc, #564]	; (80076e8 <BSP_MOTION_SENSOR_Init+0x2bc>)
 80074b4:	4313      	orrs	r3, r2
 80074b6:	600b      	str	r3, [r1, #0]
    MotionDrv[LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 80074b8:	4b8c      	ldr	r3, [pc, #560]	; (80076ec <BSP_MOTION_SENSOR_Init+0x2c0>)
 80074ba:	602b      	str	r3, [r5, #0]

    if (((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 80074bc:	07f9      	lsls	r1, r7, #31
 80074be:	d50b      	bpl.n	80074d8 <BSP_MOTION_SENSOR_Init+0xac>
 80074c0:	2a01      	cmp	r2, #1
 80074c2:	d109      	bne.n	80074d8 <BSP_MOTION_SENSOR_Init+0xac>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 80074c4:	4a8a      	ldr	r2, [pc, #552]	; (80076f0 <BSP_MOTION_SENSOR_Init+0x2c4>)
 80074c6:	498b      	ldr	r1, [pc, #556]	; (80076f4 <BSP_MOTION_SENSOR_Init+0x2c8>)

      if (MotionDrv[LSM6DSL_0]->Init(MotionCompObj[LSM6DSL_0]) != LSM6DSL_OK)
 80074c8:	681b      	ldr	r3, [r3, #0]
      MotionFuncDrv[LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 80074ca:	6011      	str	r1, [r2, #0]
      if (MotionDrv[LSM6DSL_0]->Init(MotionCompObj[LSM6DSL_0]) != LSM6DSL_OK)
 80074cc:	4640      	mov	r0, r8
 80074ce:	4798      	blx	r3
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80074d0:	2800      	cmp	r0, #0
 80074d2:	bf18      	it	ne
 80074d4:	f06f 0904 	mvnne.w	r9, #4
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80074d8:	07bb      	lsls	r3, r7, #30
 80074da:	d50e      	bpl.n	80074fa <BSP_MOTION_SENSOR_Init+0xce>
 80074dc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d10a      	bne.n	80074fa <BSP_MOTION_SENSOR_Init+0xce>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_ACC_Driver;
 80074e4:	4b82      	ldr	r3, [pc, #520]	; (80076f0 <BSP_MOTION_SENSOR_Init+0x2c4>)
 80074e6:	4a84      	ldr	r2, [pc, #528]	; (80076f8 <BSP_MOTION_SENSOR_Init+0x2cc>)
 80074e8:	605a      	str	r2, [r3, #4]

      if (MotionDrv[LSM6DSL_0]->Init(MotionCompObj[LSM6DSL_0]) != LSM6DSL_OK)
 80074ea:	682b      	ldr	r3, [r5, #0]
 80074ec:	6820      	ldr	r0, [r4, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4798      	blx	r3
 80074f2:	b128      	cbz	r0, 8007500 <BSP_MOTION_SENSOR_Init+0xd4>
        return BSP_ERROR_NO_INIT;
 80074f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074f8:	e00a      	b.n	8007510 <BSP_MOTION_SENSOR_Init+0xe4>
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 80074fa:	f1b9 0f00 	cmp.w	r9, #0
 80074fe:	d1f9      	bne.n	80074f4 <BSP_MOTION_SENSOR_Init+0xc8>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007500:	682b      	ldr	r3, [r5, #0]
 8007502:	6820      	ldr	r0, [r4, #0]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	a909      	add	r1, sp, #36	; 0x24
 8007508:	4798      	blx	r3
 800750a:	b120      	cbz	r0, 8007516 <BSP_MOTION_SENSOR_Init+0xea>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800750c:	f06f 0006 	mvn.w	r0, #6
}
 8007510:	b011      	add	sp, #68	; 0x44
 8007512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (cap.Acc == 1U)
 8007516:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
        component_functions |= MOTION_ACCELERO;
 800751a:	2b01      	cmp	r3, #1
 800751c:	bf18      	it	ne
 800751e:	4634      	movne	r4, r6
      if (cap.Gyro == 1U)
 8007520:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
        component_functions |= MOTION_ACCELERO;
 8007524:	bf08      	it	eq
 8007526:	2402      	moveq	r4, #2
      if (cap.Gyro == 1U)
 8007528:	2b01      	cmp	r3, #1
      if (cap.Magneto == 1U)
 800752a:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
        component_functions |= MOTION_GYRO;
 800752e:	bf08      	it	eq
 8007530:	f044 0401 	orreq.w	r4, r4, #1
      if (cap.Magneto == 1U)
 8007534:	2b01      	cmp	r3, #1
 8007536:	d101      	bne.n	800753c <BSP_MOTION_SENSOR_Init+0x110>
        component_functions |= MOTION_MAGNETO;
 8007538:	f044 0404 	orr.w	r4, r4, #4
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800753c:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 80076e0 <BSP_MOTION_SENSOR_Init+0x2b4>
 8007540:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 80076f0 <BSP_MOTION_SENSOR_Init+0x2c4>
 8007544:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8007718 <BSP_MOTION_SENSOR_Init+0x2ec>
        component_functions |= MOTION_ACCELERO;
 8007548:	2503      	movs	r5, #3
 800754a:	f04f 0801 	mov.w	r8, #1
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800754e:	ea38 0307 	bics.w	r3, r8, r7
 8007552:	f000 80a6 	beq.w	80076a2 <BSP_MOTION_SENSOR_Init+0x276>
  for (i = 0; i < MOTION_FUNCTIONS_NBR; i++)
 8007556:	3d01      	subs	r5, #1
    function = function << 1;
 8007558:	ea4f 0848 	mov.w	r8, r8, lsl #1
  for (i = 0; i < MOTION_FUNCTIONS_NBR; i++)
 800755c:	d1f7      	bne.n	800754e <BSP_MOTION_SENSOR_Init+0x122>
 800755e:	4628      	mov	r0, r5
 8007560:	e7d6      	b.n	8007510 <BSP_MOTION_SENSOR_Init+0xe4>
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8007562:	2300      	movs	r3, #0
 8007564:	9304      	str	r3, [sp, #16]
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 8007566:	2333      	movs	r3, #51	; 0x33
 8007568:	f88d 3014 	strb.w	r3, [sp, #20]
  io_ctx.Init        = BSP_LSM303AGR_Init;
 800756c:	4b57      	ldr	r3, [pc, #348]	; (80076cc <BSP_MOTION_SENSOR_Init+0x2a0>)
 800756e:	9302      	str	r3, [sp, #8]
  io_ctx.DeInit      = BSP_LSM303AGR_DeInit;
 8007570:	4b57      	ldr	r3, [pc, #348]	; (80076d0 <BSP_MOTION_SENSOR_Init+0x2a4>)
 8007572:	9303      	str	r3, [sp, #12]
  io_ctx.ReadReg     = BSP_LSM303AGR_ReadReg;
  io_ctx.WriteReg    = BSP_LSM303AGR_WriteReg;
  io_ctx.GetTick     = BSP_GetTick;

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 8007574:	4c61      	ldr	r4, [pc, #388]	; (80076fc <BSP_MOTION_SENSOR_Init+0x2d0>)
  io_ctx.ReadReg     = BSP_LSM303AGR_ReadReg;
 8007576:	4b57      	ldr	r3, [pc, #348]	; (80076d4 <BSP_MOTION_SENSOR_Init+0x2a8>)
 8007578:	9307      	str	r3, [sp, #28]
  io_ctx.WriteReg    = BSP_LSM303AGR_WriteReg;
 800757a:	4b57      	ldr	r3, [pc, #348]	; (80076d8 <BSP_MOTION_SENSOR_Init+0x2ac>)
 800757c:	9306      	str	r3, [sp, #24]
  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 800757e:	a902      	add	r1, sp, #8
  io_ctx.GetTick     = BSP_GetTick;
 8007580:	4b56      	ldr	r3, [pc, #344]	; (80076dc <BSP_MOTION_SENSOR_Init+0x2b0>)
 8007582:	9308      	str	r3, [sp, #32]
  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 8007584:	4620      	mov	r0, r4
 8007586:	f7f9 ffd3 	bl	8001530 <LSM303AGR_ACC_RegisterBusIO>
 800758a:	2800      	cmp	r0, #0
 800758c:	d1b2      	bne.n	80074f4 <BSP_MOTION_SENSOR_Init+0xc8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 800758e:	f10d 0107 	add.w	r1, sp, #7
 8007592:	4620      	mov	r0, r4
 8007594:	f7f9 fc77 	bl	8000e86 <LSM303AGR_ACC_ReadID>
 8007598:	2800      	cmp	r0, #0
 800759a:	d1ab      	bne.n	80074f4 <BSP_MOTION_SENSOR_Init+0xc8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 800759c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80075a0:	2b33      	cmp	r3, #51	; 0x33
 80075a2:	d1a7      	bne.n	80074f4 <BSP_MOTION_SENSOR_Init+0xc8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 80075a4:	a909      	add	r1, sp, #36	; 0x24
 80075a6:	4620      	mov	r0, r4
 80075a8:	f7f9 fc04 	bl	8000db4 <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80075ac:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 80075b0:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26

    MotionCompObj[LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 80075b4:	494a      	ldr	r1, [pc, #296]	; (80076e0 <BSP_MOTION_SENSOR_Init+0x2b4>)
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 80075b6:	4d4b      	ldr	r5, [pc, #300]	; (80076e4 <BSP_MOTION_SENSOR_Init+0x2b8>)
    MotionCompObj[LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 80075b8:	604c      	str	r4, [r1, #4]
    MotionCtx[LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80075ba:	0043      	lsls	r3, r0, #1
 80075bc:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 80075c0:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 80075c4:	4313      	orrs	r3, r2
 80075c6:	4a48      	ldr	r2, [pc, #288]	; (80076e8 <BSP_MOTION_SENSOR_Init+0x2bc>)

    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80075c8:	f017 0f02 	tst.w	r7, #2
    MotionCtx[LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80075cc:	6053      	str	r3, [r2, #4]
    MotionDrv[LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 80075ce:	4a4c      	ldr	r2, [pc, #304]	; (8007700 <BSP_MOTION_SENSOR_Init+0x2d4>)
 80075d0:	606a      	str	r2, [r5, #4]
 80075d2:	4688      	mov	r8, r1
    if (((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80075d4:	d009      	beq.n	80075ea <BSP_MOTION_SENSOR_Init+0x1be>
 80075d6:	2801      	cmp	r0, #1
 80075d8:	d107      	bne.n	80075ea <BSP_MOTION_SENSOR_Init+0x1be>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80075da:	4b45      	ldr	r3, [pc, #276]	; (80076f0 <BSP_MOTION_SENSOR_Init+0x2c4>)
 80075dc:	4949      	ldr	r1, [pc, #292]	; (8007704 <BSP_MOTION_SENSOR_Init+0x2d8>)
 80075de:	6119      	str	r1, [r3, #16]
            void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[LSM303AGR_ACC_0]->Init(MotionCompObj[LSM303AGR_ACC_0]) != LSM303AGR_OK)
 80075e0:	4620      	mov	r0, r4
 80075e2:	6813      	ldr	r3, [r2, #0]
 80075e4:	4798      	blx	r3
 80075e6:	2800      	cmp	r0, #0
 80075e8:	d184      	bne.n	80074f4 <BSP_MOTION_SENSOR_Init+0xc8>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80075ea:	686b      	ldr	r3, [r5, #4]
 80075ec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	a909      	add	r1, sp, #36	; 0x24
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80075f4:	4798      	blx	r3
 80075f6:	2800      	cmp	r0, #0
 80075f8:	d188      	bne.n	800750c <BSP_MOTION_SENSOR_Init+0xe0>
      if (cap.Acc == 1U)
 80075fa:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
        component_functions |= MOTION_ACCELERO;
 80075fe:	2b01      	cmp	r3, #1
 8007600:	bf18      	it	ne
 8007602:	2400      	movne	r4, #0
 8007604:	e78c      	b.n	8007520 <BSP_MOTION_SENSOR_Init+0xf4>
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8007606:	2300      	movs	r3, #0
 8007608:	9304      	str	r3, [sp, #16]
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 800760a:	233d      	movs	r3, #61	; 0x3d
 800760c:	f88d 3014 	strb.w	r3, [sp, #20]
  io_ctx.Init        = BSP_LSM303AGR_Init;
 8007610:	4b2e      	ldr	r3, [pc, #184]	; (80076cc <BSP_MOTION_SENSOR_Init+0x2a0>)
 8007612:	9302      	str	r3, [sp, #8]
  io_ctx.DeInit      = BSP_LSM303AGR_DeInit;
 8007614:	4b2e      	ldr	r3, [pc, #184]	; (80076d0 <BSP_MOTION_SENSOR_Init+0x2a4>)
 8007616:	9303      	str	r3, [sp, #12]
  io_ctx.ReadReg     = BSP_LSM303AGR_ReadReg;
  io_ctx.WriteReg    = BSP_LSM303AGR_WriteReg;
  io_ctx.GetTick     = BSP_GetTick;

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 8007618:	4c3b      	ldr	r4, [pc, #236]	; (8007708 <BSP_MOTION_SENSOR_Init+0x2dc>)
  io_ctx.ReadReg     = BSP_LSM303AGR_ReadReg;
 800761a:	4b2e      	ldr	r3, [pc, #184]	; (80076d4 <BSP_MOTION_SENSOR_Init+0x2a8>)
 800761c:	9307      	str	r3, [sp, #28]
  io_ctx.WriteReg    = BSP_LSM303AGR_WriteReg;
 800761e:	4b2e      	ldr	r3, [pc, #184]	; (80076d8 <BSP_MOTION_SENSOR_Init+0x2ac>)
 8007620:	9306      	str	r3, [sp, #24]
  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 8007622:	a902      	add	r1, sp, #8
  io_ctx.GetTick     = BSP_GetTick;
 8007624:	4b2d      	ldr	r3, [pc, #180]	; (80076dc <BSP_MOTION_SENSOR_Init+0x2b0>)
 8007626:	9308      	str	r3, [sp, #32]
  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 8007628:	4620      	mov	r0, r4
 800762a:	f7f9 ffb3 	bl	8001594 <LSM303AGR_MAG_RegisterBusIO>
 800762e:	2800      	cmp	r0, #0
 8007630:	f47f af60 	bne.w	80074f4 <BSP_MOTION_SENSOR_Init+0xc8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 8007634:	f10d 0107 	add.w	r1, sp, #7
 8007638:	4620      	mov	r0, r4
 800763a:	f7f9 fd29 	bl	8001090 <LSM303AGR_MAG_ReadID>
 800763e:	2800      	cmp	r0, #0
 8007640:	f47f af58 	bne.w	80074f4 <BSP_MOTION_SENSOR_Init+0xc8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 8007644:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007648:	2b40      	cmp	r3, #64	; 0x40
 800764a:	f47f af53 	bne.w	80074f4 <BSP_MOTION_SENSOR_Init+0xc8>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 800764e:	a909      	add	r1, sp, #36	; 0x24
 8007650:	4620      	mov	r0, r4
 8007652:	f7f9 fbc1 	bl	8000dd8 <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8007656:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 800765a:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24

    MotionCompObj[LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 800765e:	4920      	ldr	r1, [pc, #128]	; (80076e0 <BSP_MOTION_SENSOR_Init+0x2b4>)
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 8007660:	4d20      	ldr	r5, [pc, #128]	; (80076e4 <BSP_MOTION_SENSOR_Init+0x2b8>)
    MotionCompObj[LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 8007662:	608c      	str	r4, [r1, #8]
    MotionCtx[LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8007664:	0083      	lsls	r3, r0, #2
 8007666:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800766a:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 800766e:	4313      	orrs	r3, r2
 8007670:	4a1d      	ldr	r2, [pc, #116]	; (80076e8 <BSP_MOTION_SENSOR_Init+0x2bc>)

    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8007672:	f017 0f04 	tst.w	r7, #4
    MotionCtx[LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8007676:	6093      	str	r3, [r2, #8]
    MotionDrv[LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 8007678:	4a24      	ldr	r2, [pc, #144]	; (800770c <BSP_MOTION_SENSOR_Init+0x2e0>)
 800767a:	60aa      	str	r2, [r5, #8]
 800767c:	4688      	mov	r8, r1
    if (((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800767e:	d00a      	beq.n	8007696 <BSP_MOTION_SENSOR_Init+0x26a>
 8007680:	2801      	cmp	r0, #1
 8007682:	d108      	bne.n	8007696 <BSP_MOTION_SENSOR_Init+0x26a>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM303AGR_MAG_Driver;
 8007684:	4b1a      	ldr	r3, [pc, #104]	; (80076f0 <BSP_MOTION_SENSOR_Init+0x2c4>)
 8007686:	4922      	ldr	r1, [pc, #136]	; (8007710 <BSP_MOTION_SENSOR_Init+0x2e4>)
 8007688:	6219      	str	r1, [r3, #32]

      if (MotionDrv[LSM303AGR_MAG_0]->Init(MotionCompObj[LSM303AGR_MAG_0]) != LSM303AGR_OK)
 800768a:	4620      	mov	r0, r4
 800768c:	6813      	ldr	r3, [r2, #0]
 800768e:	4798      	blx	r3
 8007690:	2800      	cmp	r0, #0
 8007692:	f47f af2f 	bne.w	80074f4 <BSP_MOTION_SENSOR_Init+0xc8>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007696:	68ab      	ldr	r3, [r5, #8]
 8007698:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	a909      	add	r1, sp, #36	; 0x24
 80076a0:	e7a8      	b.n	80075f4 <BSP_MOTION_SENSOR_Init+0x1c8>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80076a2:	ea38 0304 	bics.w	r3, r8, r4
 80076a6:	f47f af56 	bne.w	8007556 <BSP_MOTION_SENSOR_Init+0x12a>
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80076aa:	f859 2028 	ldr.w	r2, [r9, r8, lsl #2]
 80076ae:	f85b 0026 	ldr.w	r0, [fp, r6, lsl #2]
 80076b2:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80076b6:	4413      	add	r3, r2
 80076b8:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4798      	blx	r3
 80076c0:	2800      	cmp	r0, #0
 80076c2:	f43f af48 	beq.w	8007556 <BSP_MOTION_SENSOR_Init+0x12a>
        return BSP_ERROR_COMPONENT_FAILURE;
 80076c6:	f06f 0004 	mvn.w	r0, #4
 80076ca:	e721      	b.n	8007510 <BSP_MOTION_SENSOR_Init+0xe4>
 80076cc:	08007395 	.word	0x08007395
 80076d0:	080072d9 	.word	0x080072d9
 80076d4:	08007335 	.word	0x08007335
 80076d8:	0800730d 	.word	0x0800730d
 80076dc:	0800735d 	.word	0x0800735d
 80076e0:	20000344 	.word	0x20000344
 80076e4:	2000020c 	.word	0x2000020c
 80076e8:	20000200 	.word	0x20000200
 80076ec:	2000008c 	.word	0x2000008c
 80076f0:	20000218 	.word	0x20000218
 80076f4:	2000009c 	.word	0x2000009c
 80076f8:	20000068 	.word	0x20000068
 80076fc:	2000023c 	.word	0x2000023c
 8007700:	20000000 	.word	0x20000000
 8007704:	20000010 	.word	0x20000010
 8007708:	20000268 	.word	0x20000268
 800770c:	20000034 	.word	0x20000034
 8007710:	20000044 	.word	0x20000044
 8007714:	20000294 	.word	0x20000294
 8007718:	0800bb68 	.word	0x0800bb68

0800771c <BSP_MOTION_SENSOR_GetAxes>:
  if (Instance >= MOTION_INSTANCES_NBR)
 800771c:	2802      	cmp	r0, #2
{
 800771e:	b510      	push	{r4, lr}
  if (Instance >= MOTION_INSTANCES_NBR)
 8007720:	d819      	bhi.n	8007756 <BSP_MOTION_SENSOR_GetAxes+0x3a>
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8007722:	4b0e      	ldr	r3, [pc, #56]	; (800775c <BSP_MOTION_SENSOR_GetAxes+0x40>)
 8007724:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007728:	ea31 0303 	bics.w	r3, r1, r3
 800772c:	d113      	bne.n	8007756 <BSP_MOTION_SENSOR_GetAxes+0x3a>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800772e:	4c0c      	ldr	r4, [pc, #48]	; (8007760 <BSP_MOTION_SENSOR_GetAxes+0x44>)
 8007730:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8007734:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8007738:	440b      	add	r3, r1
 800773a:	490a      	ldr	r1, [pc, #40]	; (8007764 <BSP_MOTION_SENSOR_GetAxes+0x48>)
 800773c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007740:	4611      	mov	r1, r2
 8007742:	4a09      	ldr	r2, [pc, #36]	; (8007768 <BSP_MOTION_SENSOR_GetAxes+0x4c>)
 8007744:	69db      	ldr	r3, [r3, #28]
 8007746:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800774a:	4798      	blx	r3
 800774c:	2800      	cmp	r0, #0
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800774e:	bf18      	it	ne
 8007750:	f06f 0004 	mvnne.w	r0, #4
 8007754:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8007756:	f06f 0001 	mvn.w	r0, #1
}
 800775a:	bd10      	pop	{r4, pc}
 800775c:	20000200 	.word	0x20000200
 8007760:	0800bb68 	.word	0x0800bb68
 8007764:	20000218 	.word	0x20000218
 8007768:	20000344 	.word	0x20000344

0800776c <calibrate_HTS221>:
  /* USER CODE END 3 */
}


unsigned int calibrate_HTS221(void)
{
 800776c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	unsigned char reg;

    for (reg=CALIB_START; reg<=CALIB_END; reg++) {
        if ((reg!=CALIB_START+8) && (reg!=CALIB_START+9) && (reg!=CALIB_START+4)) {

            HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);
 8007770:	4f3e      	ldr	r7, [pc, #248]	; (800786c <calibrate_HTS221+0x100>)
                break;
            case CALIB_START+0xE:
                _T1_OUT = data;
                break;
            case CALIB_START+0xF:
                _T1_OUT |= data << 8;
 8007772:	4e3f      	ldr	r6, [pc, #252]	; (8007870 <calibrate_HTS221+0x104>)
                _T0_OUT += data << 8;
 8007774:	4d3f      	ldr	r5, [pc, #252]	; (8007874 <calibrate_HTS221+0x108>)
{
 8007776:	b086      	sub	sp, #24
 8007778:	2430      	movs	r4, #48	; 0x30
 800777a:	fa5f f884 	uxtb.w	r8, r4
        if ((reg!=CALIB_START+8) && (reg!=CALIB_START+9) && (reg!=CALIB_START+4)) {
 800777e:	f1a8 0338 	sub.w	r3, r8, #56	; 0x38
 8007782:	2b01      	cmp	r3, #1
 8007784:	d922      	bls.n	80077cc <calibrate_HTS221+0x60>
 8007786:	f1b8 0f34 	cmp.w	r8, #52	; 0x34
 800778a:	d01f      	beq.n	80077cc <calibrate_HTS221+0x60>
            HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);
 800778c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007790:	9302      	str	r3, [sp, #8]
 8007792:	f10d 0217 	add.w	r2, sp, #23
 8007796:	2301      	movs	r3, #1
 8007798:	9200      	str	r2, [sp, #0]
 800779a:	9301      	str	r3, [sp, #4]
 800779c:	4622      	mov	r2, r4
 800779e:	21be      	movs	r1, #190	; 0xbe
 80077a0:	4638      	mov	r0, r7
            switch (reg) {
 80077a2:	f1a8 0831 	sub.w	r8, r8, #49	; 0x31
            HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);
 80077a6:	f7fc ffd9 	bl	800475c <HAL_I2C_Mem_Read>
            switch (reg) {
 80077aa:	f1b8 0f0e 	cmp.w	r8, #14
 80077ae:	d809      	bhi.n	80077c4 <calibrate_HTS221+0x58>
 80077b0:	e8df f008 	tbb	[pc, r8]
 80077b4:	0c1c1814 	.word	0x0c1c1814
 80077b8:	0c353120 	.word	0x0c353120
 80077bc:	42403c0c 	.word	0x42403c0c
 80077c0:	5146      	.short	0x5146
 80077c2:	55          	.byte	0x55
 80077c3:	00          	.byte	0x00
                _h0_rH = data;
 80077c4:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80077c8:	4b2b      	ldr	r3, [pc, #172]	; (8007878 <calibrate_HTS221+0x10c>)
                _h1_rH = data;
 80077ca:	601a      	str	r2, [r3, #0]
 80077cc:	3401      	adds	r4, #1
 80077ce:	b2a4      	uxth	r4, r4
    for (reg=CALIB_START; reg<=CALIB_END; reg++) {
 80077d0:	2c40      	cmp	r4, #64	; 0x40
 80077d2:	d1d2      	bne.n	800777a <calibrate_HTS221+0xe>
            } /* switch */
        } /* if */
    }  /* for */
    return 1;

}
 80077d4:	2001      	movs	r0, #1
 80077d6:	b006      	add	sp, #24
 80077d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                _h1_rH = data;
 80077dc:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80077e0:	4b26      	ldr	r3, [pc, #152]	; (800787c <calibrate_HTS221+0x110>)
 80077e2:	e7f2      	b.n	80077ca <calibrate_HTS221+0x5e>
                _T0_degC = data;
 80077e4:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80077e8:	4b25      	ldr	r3, [pc, #148]	; (8007880 <calibrate_HTS221+0x114>)
 80077ea:	e7ee      	b.n	80077ca <calibrate_HTS221+0x5e>
                _T1_degC = data;
 80077ec:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80077f0:	4b24      	ldr	r3, [pc, #144]	; (8007884 <calibrate_HTS221+0x118>)
 80077f2:	e7ea      	b.n	80077ca <calibrate_HTS221+0x5e>
                _T0_degC = (data&0x3)<<8;
 80077f4:	f89d 3017 	ldrb.w	r3, [sp, #23]
                _T0_degC |= tmp;
 80077f8:	4821      	ldr	r0, [pc, #132]	; (8007880 <calibrate_HTS221+0x114>)
                _T0_degC = (data&0x3)<<8;
 80077fa:	0219      	lsls	r1, r3, #8
                _T0_degC |= tmp;
 80077fc:	7802      	ldrb	r2, [r0, #0]
                _T0_degC = (data&0x3)<<8;
 80077fe:	f401 7140 	and.w	r1, r1, #768	; 0x300
                _T0_degC |= tmp;
 8007802:	430a      	orrs	r2, r1
 8007804:	6002      	str	r2, [r0, #0]
                _T1_degC |= tmp;
 8007806:	4a1f      	ldr	r2, [pc, #124]	; (8007884 <calibrate_HTS221+0x118>)
                _T1_degC = ((data&0xC)>>2)<<8;
 8007808:	019b      	lsls	r3, r3, #6
                _T1_degC |= tmp;
 800780a:	7811      	ldrb	r1, [r2, #0]
                _T1_degC = ((data&0xC)>>2)<<8;
 800780c:	f403 7340 	and.w	r3, r3, #768	; 0x300
                _T1_degC |= tmp;
 8007810:	430b      	orrs	r3, r1
                _H0_T0 |= data<<8;
 8007812:	6013      	str	r3, [r2, #0]
                break;
 8007814:	e7da      	b.n	80077cc <calibrate_HTS221+0x60>
                _H0_T0 = data;
 8007816:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800781a:	4b1b      	ldr	r3, [pc, #108]	; (8007888 <calibrate_HTS221+0x11c>)
 800781c:	e7d5      	b.n	80077ca <calibrate_HTS221+0x5e>
                _H0_T0 |= data<<8;
 800781e:	4a1a      	ldr	r2, [pc, #104]	; (8007888 <calibrate_HTS221+0x11c>)
 8007820:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8007824:	6813      	ldr	r3, [r2, #0]
 8007826:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800782a:	e7f2      	b.n	8007812 <calibrate_HTS221+0xa6>
                _H1_T0 = data;
 800782c:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8007830:	4b16      	ldr	r3, [pc, #88]	; (800788c <calibrate_HTS221+0x120>)
 8007832:	e7ca      	b.n	80077ca <calibrate_HTS221+0x5e>
                _H1_T0 |= data <<8;
 8007834:	4a15      	ldr	r2, [pc, #84]	; (800788c <calibrate_HTS221+0x120>)
 8007836:	e7f3      	b.n	8007820 <calibrate_HTS221+0xb4>
                _T0_OUT = data;
 8007838:	f89d 3017 	ldrb.w	r3, [sp, #23]
                    _T0_OUT=_T0_OUT-0x10000;
 800783c:	602b      	str	r3, [r5, #0]
 800783e:	e7c5      	b.n	80077cc <calibrate_HTS221+0x60>
                _T0_OUT += data << 8;
 8007840:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8007844:	682b      	ldr	r3, [r5, #0]
 8007846:	eb03 2302 	add.w	r3, r3, r2, lsl #8
                if((_T0_OUT & 0x8000) > 0) {
 800784a:	041a      	lsls	r2, r3, #16
                _T0_OUT += data << 8;
 800784c:	602b      	str	r3, [r5, #0]
                if((_T0_OUT & 0x8000) > 0) {
 800784e:	d5bd      	bpl.n	80077cc <calibrate_HTS221+0x60>
                    _T0_OUT=_T0_OUT-0x10000;
 8007850:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8007854:	e7f2      	b.n	800783c <calibrate_HTS221+0xd0>
                _T1_OUT = data;
 8007856:	f89d 3017 	ldrb.w	r3, [sp, #23]
                _T1_OUT |= data << 8;
 800785a:	6033      	str	r3, [r6, #0]
                break;
 800785c:	e7b6      	b.n	80077cc <calibrate_HTS221+0x60>
                _T1_OUT |= data << 8;
 800785e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8007862:	6833      	ldr	r3, [r6, #0]
 8007864:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007868:	e7f7      	b.n	800785a <calibrate_HTS221+0xee>
 800786a:	bf00      	nop
 800786c:	20000388 	.word	0x20000388
 8007870:	200006b0 	.word	0x200006b0
 8007874:	20000414 	.word	0x20000414
 8007878:	20000598 	.word	0x20000598
 800787c:	200006b4 	.word	0x200006b4
 8007880:	200004e8 	.word	0x200004e8
 8007884:	200004a8 	.word	0x200004a8
 8007888:	200006b8 	.word	0x200006b8
 800788c:	200006bc 	.word	0x200006bc

08007890 <periodicActivity>:


void periodicActivity(void)
{
 8007890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007892:	b087      	sub	sp, #28
	unsigned char data;
	unsigned char buf[2];
	int t_out,deg,t_temp;
	int h_out,hum,h_temp;

	BSP_LED_On(LED3);
 8007894:	2000      	movs	r0, #0
    HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR, STATUS_REG, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);
 8007896:	2401      	movs	r4, #1
 8007898:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800789c:	f10d 0513 	add.w	r5, sp, #19
	BSP_LED_On(LED3);
 80078a0:	f7fb f8aa 	bl	80029f8 <BSP_LED_On>
    HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR, STATUS_REG, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);
 80078a4:	4623      	mov	r3, r4
 80078a6:	2227      	movs	r2, #39	; 0x27
 80078a8:	9602      	str	r6, [sp, #8]
 80078aa:	9401      	str	r4, [sp, #4]
 80078ac:	9500      	str	r5, [sp, #0]
 80078ae:	21be      	movs	r1, #190	; 0xbe
 80078b0:	4845      	ldr	r0, [pc, #276]	; (80079c8 <periodicActivity+0x138>)
 80078b2:	f7fc ff53 	bl	800475c <HAL_I2C_Mem_Read>

    if (data & TEMPERATURE_READY) {
 80078b6:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80078ba:	07da      	lsls	r2, r3, #31
 80078bc:	d53e      	bpl.n	800793c <periodicActivity+0xac>

    	HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR, TEMP_H_REG, I2C_MEMADD_SIZE_8BIT, &buf[1], 1, 1000);
 80078be:	f10d 0315 	add.w	r3, sp, #21
 80078c2:	9602      	str	r6, [sp, #8]
 80078c4:	9401      	str	r4, [sp, #4]
 80078c6:	9300      	str	r3, [sp, #0]
 80078c8:	222b      	movs	r2, #43	; 0x2b
 80078ca:	4623      	mov	r3, r4
 80078cc:	21be      	movs	r1, #190	; 0xbe
 80078ce:	483e      	ldr	r0, [pc, #248]	; (80079c8 <periodicActivity+0x138>)
 80078d0:	f7fc ff44 	bl	800475c <HAL_I2C_Mem_Read>
    	HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR, TEMP_L_REG, I2C_MEMADD_SIZE_8BIT, &buf[0], 1, 1000);
 80078d4:	ab05      	add	r3, sp, #20
 80078d6:	222a      	movs	r2, #42	; 0x2a
 80078d8:	9602      	str	r6, [sp, #8]
 80078da:	9401      	str	r4, [sp, #4]
 80078dc:	9300      	str	r3, [sp, #0]
 80078de:	21be      	movs	r1, #190	; 0xbe
 80078e0:	4623      	mov	r3, r4
 80078e2:	4839      	ldr	r0, [pc, #228]	; (80079c8 <periodicActivity+0x138>)
 80078e4:	f7fc ff3a 	bl	800475c <HAL_I2C_Mem_Read>
        t_out = (buf[1]<<8) + buf[0];

        // Decode Temperature
        deg    = ((_T1_degC) - (_T0_degC))/8.0; // remove x8 multiple
 80078e8:	4b38      	ldr	r3, [pc, #224]	; (80079cc <periodicActivity+0x13c>)
 80078ea:	681e      	ldr	r6, [r3, #0]

        // Calculate Temperature in decimal of grade centigrades i.e. 15.0 = 150.
        t_temp = ((t_out - _T0_OUT) * deg) / (_T1_OUT - _T0_OUT);
 80078ec:	4b38      	ldr	r3, [pc, #224]	; (80079d0 <periodicActivity+0x140>)
 80078ee:	681f      	ldr	r7, [r3, #0]
        deg    = ((_T1_degC) - (_T0_degC))/8.0; // remove x8 multiple
 80078f0:	4b38      	ldr	r3, [pc, #224]	; (80079d4 <periodicActivity+0x144>)
 80078f2:	6818      	ldr	r0, [r3, #0]
 80078f4:	1b80      	subs	r0, r0, r6
 80078f6:	f7f8 fe35 	bl	8000564 <__aeabi_i2d>
 80078fa:	2200      	movs	r2, #0
 80078fc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007900:	f7f8 fe96 	bl	8000630 <__aeabi_dmul>
 8007904:	f7f9 f8a6 	bl	8000a54 <__aeabi_d2iz>
        t_out = (buf[1]<<8) + buf[0];
 8007908:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800790c:	f89d 4014 	ldrb.w	r4, [sp, #20]
 8007910:	eb04 2403 	add.w	r4, r4, r3, lsl #8
        t_temp = ((t_out - _T0_OUT) * deg) / (_T1_OUT - _T0_OUT);
 8007914:	4b30      	ldr	r3, [pc, #192]	; (80079d8 <periodicActivity+0x148>)
 8007916:	1be4      	subs	r4, r4, r7
 8007918:	4344      	muls	r4, r0
 800791a:	6818      	ldr	r0, [r3, #0]
 800791c:	1bc0      	subs	r0, r0, r7
 800791e:	fb94 f4f0 	sdiv	r4, r4, r0
        deg    = (_T0_degC) / 8.0;     // remove x8 multiple
 8007922:	4630      	mov	r0, r6
 8007924:	f7f8 fe1e 	bl	8000564 <__aeabi_i2d>
 8007928:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800792c:	2200      	movs	r2, #0
 800792e:	f7f8 fe7f 	bl	8000630 <__aeabi_dmul>
 8007932:	f7f9 f88f 	bl	8000a54 <__aeabi_d2iz>
        _temperature = deg + t_temp;   // provide signed celsius measurement unit
 8007936:	4b29      	ldr	r3, [pc, #164]	; (80079dc <periodicActivity+0x14c>)
 8007938:	4420      	add	r0, r4
 800793a:	6018      	str	r0, [r3, #0]
//        console.log("T_out: "+t_out);
        //console.log("Temperature: "+_temperature);
//        console.log("------------");
    }

    if (data & HUMIDITY_READY) {
 800793c:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8007940:	079b      	lsls	r3, r3, #30
 8007942:	d53c      	bpl.n	80079be <periodicActivity+0x12e>
        HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR, HUMIDITY_H_REG, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);
 8007944:	2601      	movs	r6, #1
 8007946:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800794a:	e88d 0060 	stmia.w	sp, {r5, r6}
 800794e:	4633      	mov	r3, r6
 8007950:	9402      	str	r4, [sp, #8]
 8007952:	2229      	movs	r2, #41	; 0x29
 8007954:	21be      	movs	r1, #190	; 0xbe
 8007956:	481c      	ldr	r0, [pc, #112]	; (80079c8 <periodicActivity+0x138>)
 8007958:	f7fc ff00 	bl	800475c <HAL_I2C_Mem_Read>
        h_out = data << 8;  // MSB
        HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR, HUMIDITY_L_REG, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);
 800795c:	e88d 0060 	stmia.w	sp, {r5, r6}
 8007960:	4633      	mov	r3, r6
 8007962:	2228      	movs	r2, #40	; 0x28
 8007964:	9402      	str	r4, [sp, #8]
 8007966:	21be      	movs	r1, #190	; 0xbe
 8007968:	4817      	ldr	r0, [pc, #92]	; (80079c8 <periodicActivity+0x138>)
        h_out = data << 8;  // MSB
 800796a:	f89d 7013 	ldrb.w	r7, [sp, #19]
        HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR, HUMIDITY_L_REG, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);
 800796e:	f7fc fef5 	bl	800475c <HAL_I2C_Mem_Read>
        h_out |= data;      // LSB

        // Decode Humidity
        hum = ((_h1_rH) - (_h0_rH))/2.0;  // remove x2 multiple
 8007972:	4b1b      	ldr	r3, [pc, #108]	; (80079e0 <periodicActivity+0x150>)
 8007974:	681d      	ldr	r5, [r3, #0]

        // Calculate humidity in decimal of grade centigrades i.e. 15.0 = 150.
        h_temp = ((h_out - _H0_T0) * hum) / (_H1_T0 - _H0_T0);
 8007976:	4b1b      	ldr	r3, [pc, #108]	; (80079e4 <periodicActivity+0x154>)
 8007978:	681e      	ldr	r6, [r3, #0]
        hum = ((_h1_rH) - (_h0_rH))/2.0;  // remove x2 multiple
 800797a:	4b1b      	ldr	r3, [pc, #108]	; (80079e8 <periodicActivity+0x158>)
 800797c:	6818      	ldr	r0, [r3, #0]
 800797e:	1b40      	subs	r0, r0, r5
 8007980:	f7f8 fdf0 	bl	8000564 <__aeabi_i2d>
 8007984:	2200      	movs	r2, #0
 8007986:	4b19      	ldr	r3, [pc, #100]	; (80079ec <periodicActivity+0x15c>)
 8007988:	f7f8 fe52 	bl	8000630 <__aeabi_dmul>
 800798c:	f7f9 f862 	bl	8000a54 <__aeabi_d2iz>
        h_out |= data;      // LSB
 8007990:	f89d 4013 	ldrb.w	r4, [sp, #19]
        h_temp = ((h_out - _H0_T0) * hum) / (_H1_T0 - _H0_T0);
 8007994:	4b16      	ldr	r3, [pc, #88]	; (80079f0 <periodicActivity+0x160>)
        h_out = data << 8;  // MSB
 8007996:	023f      	lsls	r7, r7, #8
        h_out |= data;      // LSB
 8007998:	433c      	orrs	r4, r7
        h_temp = ((h_out - _H0_T0) * hum) / (_H1_T0 - _H0_T0);
 800799a:	1ba4      	subs	r4, r4, r6
 800799c:	4344      	muls	r4, r0
 800799e:	6818      	ldr	r0, [r3, #0]
 80079a0:	1b80      	subs	r0, r0, r6
 80079a2:	fb94 f4f0 	sdiv	r4, r4, r0
        hum    = (_h0_rH) / 2.0; // remove x2 multiple
 80079a6:	4628      	mov	r0, r5
 80079a8:	f7f8 fddc 	bl	8000564 <__aeabi_i2d>
 80079ac:	4b0f      	ldr	r3, [pc, #60]	; (80079ec <periodicActivity+0x15c>)
 80079ae:	2200      	movs	r2, #0
 80079b0:	f7f8 fe3e 	bl	8000630 <__aeabi_dmul>
 80079b4:	f7f9 f84e 	bl	8000a54 <__aeabi_d2iz>
        _humidity = ((hum + h_temp)); // provide signed % measurement unit
 80079b8:	4b0e      	ldr	r3, [pc, #56]	; (80079f4 <periodicActivity+0x164>)
 80079ba:	4420      	add	r0, r4
 80079bc:	6018      	str	r0, [r3, #0]
        //console.log("Humidity: "+_humidity);
        //console.log("------------");
    }


    BSP_LED_Off(LED3);
 80079be:	2000      	movs	r0, #0
 80079c0:	f7fb f828 	bl	8002a14 <BSP_LED_Off>


}
 80079c4:	b007      	add	sp, #28
 80079c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079c8:	20000388 	.word	0x20000388
 80079cc:	200004e8 	.word	0x200004e8
 80079d0:	20000414 	.word	0x20000414
 80079d4:	200004a8 	.word	0x200004a8
 80079d8:	200006b0 	.word	0x200006b0
 80079dc:	200004e4 	.word	0x200004e4
 80079e0:	20000598 	.word	0x20000598
 80079e4:	200006b8 	.word	0x200006b8
 80079e8:	200006b4 	.word	0x200006b4
 80079ec:	3fe00000 	.word	0x3fe00000
 80079f0:	200006bc 	.word	0x200006bc
 80079f4:	200006c0 	.word	0x200006c0

080079f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80079f8:	b530      	push	{r4, r5, lr}
 80079fa:	b0ab      	sub	sp, #172	; 0xac
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80079fc:	2234      	movs	r2, #52	; 0x34
 80079fe:	2100      	movs	r1, #0
 8007a00:	a807      	add	r0, sp, #28
 8007a02:	f001 f8f1 	bl	8008be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007a06:	2214      	movs	r2, #20
 8007a08:	2100      	movs	r1, #0
 8007a0a:	a802      	add	r0, sp, #8
 8007a0c:	f001 f8ec 	bl	8008be8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007a10:	2100      	movs	r1, #0
 8007a12:	2258      	movs	r2, #88	; 0x58
 8007a14:	a814      	add	r0, sp, #80	; 0x50
 8007a16:	f001 f8e7 	bl	8008be8 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007a1a:	2400      	movs	r4, #0
 8007a1c:	4b22      	ldr	r3, [pc, #136]	; (8007aa8 <SystemClock_Config+0xb0>)
 8007a1e:	9400      	str	r4, [sp, #0]
 8007a20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a22:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007a26:	641a      	str	r2, [r3, #64]	; 0x40
 8007a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007a32:	4b1e      	ldr	r3, [pc, #120]	; (8007aac <SystemClock_Config+0xb4>)
 8007a34:	9401      	str	r4, [sp, #4]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8007a3c:	601a      	str	r2, [r3, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007a44:	9301      	str	r3, [sp, #4]
 8007a46:	9b01      	ldr	r3, [sp, #4]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8007a48:	2303      	movs	r3, #3
 8007a4a:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8007a4c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8007a50:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007a52:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007a56:	2301      	movs	r3, #1
 8007a58:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007a5a:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007a5c:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLM = 15;
  RCC_OscInitStruct.PLL.PLLN = 144;
 8007a5e:	2290      	movs	r2, #144	; 0x90
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007a60:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8007a62:	250f      	movs	r5, #15
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007a64:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 144;
 8007a66:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 5;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007a68:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8007a6a:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007a6c:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007a6e:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8007a70:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8007a72:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8007a74:	950f      	str	r5, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007a76:	f7fd fac1 	bl	8004ffc <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8007a7a:	4621      	mov	r1, r4
 8007a7c:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007a7e:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8007a80:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007a82:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007a84:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007a86:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8007a88:	f7fd f84a 	bl	8004b20 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_SDIO
 8007a8c:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8007a90:	9314      	str	r3, [sp, #80]	; 0x50
                              |RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_SYSCLK;
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007a92:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_SYSCLK;
 8007a94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8007a98:	9420      	str	r4, [sp, #128]	; 0x80
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 8007a9a:	9421      	str	r4, [sp, #132]	; 0x84
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_SYSCLK;
 8007a9c:	931e      	str	r3, [sp, #120]	; 0x78
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 8007a9e:	941f      	str	r4, [sp, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007aa0:	f7fd f8f8 	bl	8004c94 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8007aa4:	b02b      	add	sp, #172	; 0xac
 8007aa6:	bd30      	pop	{r4, r5, pc}
 8007aa8:	40023800 	.word	0x40023800
 8007aac:	40007000 	.word	0x40007000

08007ab0 <main>:
{
 8007ab0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8007ab4:	b0a7      	sub	sp, #156	; 0x9c
  HAL_Init();
 8007ab6:	f7fb fa55 	bl	8002f64 <HAL_Init>
  SystemClock_Config();
 8007aba:	f7ff ff9d 	bl	80079f8 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007abe:	2214      	movs	r2, #20
 8007ac0:	2100      	movs	r1, #0
 8007ac2:	a812      	add	r0, sp, #72	; 0x48

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007ac4:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ac6:	f001 f88f 	bl	8008be8 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007aca:	4ba9      	ldr	r3, [pc, #676]	; (8007d70 <main+0x2c0>)
 8007acc:	9407      	str	r4, [sp, #28]
 8007ace:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8007ad0:	48a8      	ldr	r0, [pc, #672]	; (8007d74 <main+0x2c4>)
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007ad2:	4fa9      	ldr	r7, [pc, #676]	; (8007d78 <main+0x2c8>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007ad4:	f042 0210 	orr.w	r2, r2, #16
 8007ad8:	631a      	str	r2, [r3, #48]	; 0x30
 8007ada:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007adc:	f002 0210 	and.w	r2, r2, #16
 8007ae0:	9207      	str	r2, [sp, #28]
 8007ae2:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007ae4:	9408      	str	r4, [sp, #32]
 8007ae6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ae8:	f042 0204 	orr.w	r2, r2, #4
 8007aec:	631a      	str	r2, [r3, #48]	; 0x30
 8007aee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007af0:	f002 0204 	and.w	r2, r2, #4
 8007af4:	9208      	str	r2, [sp, #32]
 8007af6:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007af8:	9409      	str	r4, [sp, #36]	; 0x24
 8007afa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007afc:	f042 0220 	orr.w	r2, r2, #32
 8007b00:	631a      	str	r2, [r3, #48]	; 0x30
 8007b02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b04:	f002 0220 	and.w	r2, r2, #32
 8007b08:	9209      	str	r2, [sp, #36]	; 0x24
 8007b0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007b0c:	940a      	str	r4, [sp, #40]	; 0x28
 8007b0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007b14:	631a      	str	r2, [r3, #48]	; 0x30
 8007b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b18:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8007b1c:	920a      	str	r2, [sp, #40]	; 0x28
 8007b1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b20:	940b      	str	r4, [sp, #44]	; 0x2c
 8007b22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b24:	f042 0201 	orr.w	r2, r2, #1
 8007b28:	631a      	str	r2, [r3, #48]	; 0x30
 8007b2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b2c:	f002 0201 	and.w	r2, r2, #1
 8007b30:	920b      	str	r2, [sp, #44]	; 0x2c
 8007b32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b34:	940c      	str	r4, [sp, #48]	; 0x30
 8007b36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b38:	f042 0202 	orr.w	r2, r2, #2
 8007b3c:	631a      	str	r2, [r3, #48]	; 0x30
 8007b3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b40:	f002 0202 	and.w	r2, r2, #2
 8007b44:	920c      	str	r2, [sp, #48]	; 0x30
 8007b46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007b48:	940d      	str	r4, [sp, #52]	; 0x34
 8007b4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b50:	631a      	str	r2, [r3, #48]	; 0x30
 8007b52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b54:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8007b58:	920d      	str	r2, [sp, #52]	; 0x34
 8007b5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007b5c:	940e      	str	r4, [sp, #56]	; 0x38
 8007b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b60:	f042 0208 	orr.w	r2, r2, #8
 8007b64:	631a      	str	r2, [r3, #48]	; 0x30
 8007b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b68:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8007b6c:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007b6e:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8007b70:	2138      	movs	r1, #56	; 0x38
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007b72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8007b74:	f7fb fec2 	bl	80038fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8007b78:	4622      	mov	r2, r4
 8007b7a:	2120      	movs	r1, #32
 8007b7c:	487f      	ldr	r0, [pc, #508]	; (8007d7c <main+0x2cc>)
 8007b7e:	f7fb febd 	bl	80038fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin, GPIO_PIN_RESET);
 8007b82:	4622      	mov	r2, r4
 8007b84:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8007b88:	487d      	ldr	r0, [pc, #500]	; (8007d80 <main+0x2d0>)
 8007b8a:	f7fb feb7 	bl	80038fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin, GPIO_PIN_RESET);
 8007b8e:	4622      	mov	r2, r4
 8007b90:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8007b94:	487b      	ldr	r0, [pc, #492]	; (8007d84 <main+0x2d4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007b96:	2501      	movs	r5, #1
  HAL_GPIO_WritePin(GPIOG, USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin, GPIO_PIN_RESET);
 8007b98:	f7fb feb0 	bl	80038fc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 8007b9c:	2338      	movs	r3, #56	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007b9e:	a912      	add	r1, sp, #72	; 0x48
 8007ba0:	4874      	ldr	r0, [pc, #464]	; (8007d74 <main+0x2c4>)
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 8007ba2:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ba4:	2602      	movs	r6, #2
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8007ba6:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007baa:	9513      	str	r5, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bac:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007bae:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007bb0:	f7fb fd36 	bl	8003620 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8007bb4:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8007bb6:	a912      	add	r1, sp, #72	; 0x48
 8007bb8:	486e      	ldr	r0, [pc, #440]	; (8007d74 <main+0x2c4>)
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8007bba:	9312      	str	r3, [sp, #72]	; 0x48
 8007bbc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bbe:	9613      	str	r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bc0:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007bc2:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8007bc4:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8007bc8:	f7fb fd2a 	bl	8003620 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8007bcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8007bd0:	a912      	add	r1, sp, #72	; 0x48
 8007bd2:	486d      	ldr	r0, [pc, #436]	; (8007d88 <main+0x2d8>)
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8007bd4:	9212      	str	r2, [sp, #72]	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bd6:	9613      	str	r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bd8:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007bda:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8007bdc:	9616      	str	r6, [sp, #88]	; 0x58
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8007bde:	f7fb fd1f 	bl	8003620 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8007be2:	a912      	add	r1, sp, #72	; 0x48
 8007be4:	4865      	ldr	r0, [pc, #404]	; (8007d7c <main+0x2cc>)
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8007be6:	9612      	str	r6, [sp, #72]	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007be8:	9713      	str	r7, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bea:	9414      	str	r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8007bec:	f7fb fd18 	bl	8003620 <HAL_GPIO_Init>
  /*Configure GPIO pin : CODEC_ext_SD_Pin */
  GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8007bf0:	2206      	movs	r2, #6
  GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 8007bf2:	2304      	movs	r3, #4
  HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 8007bf4:	a912      	add	r1, sp, #72	; 0x48
 8007bf6:	4861      	ldr	r0, [pc, #388]	; (8007d7c <main+0x2cc>)
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8007bf8:	9216      	str	r2, [sp, #88]	; 0x58
 8007bfa:	9204      	str	r2, [sp, #16]
  GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 8007bfc:	9312      	str	r3, [sp, #72]	; 0x48

  /*Configure GPIO pin : CODEC_SD_Pin */
  GPIO_InitStruct.Pin = CODEC_SD_Pin;
 8007bfe:	f04f 0b08 	mov.w	fp, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007c02:	f04f 0a05 	mov.w	sl, #5
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c06:	9613      	str	r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c08:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c0a:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 8007c0c:	f7fb fd08 	bl	8003620 <HAL_GPIO_Init>
  HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 8007c10:	a912      	add	r1, sp, #72	; 0x48
 8007c12:	485a      	ldr	r0, [pc, #360]	; (8007d7c <main+0x2cc>)
  GPIO_InitStruct.Pin = CODEC_SD_Pin;
 8007c14:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c18:	9613      	str	r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c1a:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c1c:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007c1e:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
  HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 8007c22:	f7fb fcfd 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8007c26:	a912      	add	r1, sp, #72	; 0x48
 8007c28:	4858      	ldr	r0, [pc, #352]	; (8007d8c <main+0x2dc>)
  GPIO_InitStruct.Pin = B_USER_Pin;
 8007c2a:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007c2c:	9713      	str	r7, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c2e:	9414      	str	r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8007c30:	f7fb fcf6 	bl	8003620 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CODEC_MCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 8007c34:	a912      	add	r1, sp, #72	; 0x48
 8007c36:	4855      	ldr	r0, [pc, #340]	; (8007d8c <main+0x2dc>)
  GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 8007c38:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c3c:	9613      	str	r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c3e:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c40:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007c42:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
  HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 8007c46:	f7fb fceb 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 8007c4a:	2120      	movs	r1, #32
 8007c4c:	9112      	str	r1, [sp, #72]	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 8007c4e:	484b      	ldr	r0, [pc, #300]	; (8007d7c <main+0x2cc>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007c50:	9513      	str	r5, [sp, #76]	; 0x4c
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 8007c52:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c54:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c56:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 8007c58:	f7fb fce2 	bl	8003620 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8007c5c:	a912      	add	r1, sp, #72	; 0x48
 8007c5e:	4848      	ldr	r0, [pc, #288]	; (8007d80 <main+0x2d0>)
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8007c60:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c62:	9613      	str	r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c64:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c66:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007c68:	9616      	str	r6, [sp, #88]	; 0x58

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8007c6a:	f44f 6900 	mov.w	r9, #2048	; 0x800
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8007c6e:	f7fb fcd7 	bl	8003620 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8007c72:	a912      	add	r1, sp, #72	; 0x48
 8007c74:	4844      	ldr	r0, [pc, #272]	; (8007d88 <main+0x2d8>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007c76:	9713      	str	r7, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c78:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8007c7a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8007c7e:	f7fb fccf 	bl	8003620 <HAL_GPIO_Init>
  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8007c82:	2107      	movs	r1, #7
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 8007c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8007c88:	9116      	str	r1, [sp, #88]	; 0x58
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8007c8a:	483d      	ldr	r0, [pc, #244]	; (8007d80 <main+0x2d0>)
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 8007c8c:	9312      	str	r3, [sp, #72]	; 0x48
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8007c8e:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c90:	9613      	str	r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c92:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c94:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8007c98:	f7fb fcc2 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin;
 8007c9c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8007ca0:	9112      	str	r1, [sp, #72]	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ca2:	4837      	ldr	r0, [pc, #220]	; (8007d80 <main+0x2d0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007ca4:	9513      	str	r5, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ca6:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ca8:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007caa:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007cac:	f7fb fcb8 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_Pin CODEC_INT_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin|CODEC_INT_Pin;
 8007cb0:	f248 0180 	movw	r1, #32896	; 0x8080
 8007cb4:	9112      	str	r1, [sp, #72]	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007cb6:	4833      	ldr	r0, [pc, #204]	; (8007d84 <main+0x2d4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007cb8:	9713      	str	r7, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007cba:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cbc:	9414      	str	r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007cbe:	f7fb fcaf 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin;
 8007cc2:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8007cc6:	9112      	str	r1, [sp, #72]	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007cc8:	482e      	ldr	r0, [pc, #184]	; (8007d84 <main+0x2d4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007cca:	9513      	str	r5, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007ccc:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cce:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cd0:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007cd2:	f7fb fca5 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D10_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin;
 8007cd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007cda:	9112      	str	r1, [sp, #72]	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
  HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 8007cdc:	482b      	ldr	r0, [pc, #172]	; (8007d8c <main+0x2dc>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cde:	9613      	str	r6, [sp, #76]	; 0x4c
  HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 8007ce0:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ce2:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ce4:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007ce6:	9516      	str	r5, [sp, #88]	; 0x58
  HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 8007ce8:	f7fb fc9a 	bl	8003620 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CODEC_CK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 8007cec:	a912      	add	r1, sp, #72	; 0x48
 8007cee:	4828      	ldr	r0, [pc, #160]	; (8007d90 <main+0x2e0>)
  GPIO_InitStruct.Pin = CODEC_CK_Pin;
 8007cf0:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cf4:	9613      	str	r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cf6:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cf8:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007cfa:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
  HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 8007cfe:	f7fb fc8f 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8007d02:	2130      	movs	r1, #48	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007d04:	9a04      	ldr	r2, [sp, #16]
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8007d06:	9112      	str	r1, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d08:	481d      	ldr	r0, [pc, #116]	; (8007d80 <main+0x2d0>)
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007d0a:	9216      	str	r2, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d0c:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d0e:	9613      	str	r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d10:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d12:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d16:	f7fb fc83 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8007d1a:	9b05      	ldr	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007d1c:	9713      	str	r7, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8007d1e:	a912      	add	r1, sp, #72	; 0x48
  ADC_ChannelConfTypeDef sConfig = {0};
 8007d20:	2710      	movs	r7, #16
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8007d22:	4817      	ldr	r0, [pc, #92]	; (8007d80 <main+0x2d0>)
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8007d24:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d26:	9414      	str	r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8007d28:	f7fb fc7a 	bl	8003620 <HAL_GPIO_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8007d2c:	463a      	mov	r2, r7
 8007d2e:	4621      	mov	r1, r4
 8007d30:	a812      	add	r0, sp, #72	; 0x48
 8007d32:	f000 ff59 	bl	8008be8 <memset>
  hadc1.Instance = ADC1;
 8007d36:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8007d9c <main+0x2ec>
 8007d3a:	4b16      	ldr	r3, [pc, #88]	; (8007d94 <main+0x2e4>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007d3c:	f8c8 4008 	str.w	r4, [r8, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8007d40:	e888 0018 	stmia.w	r8, {r3, r4}
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007d44:	4640      	mov	r0, r8
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007d46:	4b14      	ldr	r3, [pc, #80]	; (8007d98 <main+0x2e8>)
  hadc1.Init.ScanConvMode = DISABLE;
 8007d48:	f8c8 4010 	str.w	r4, [r8, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8007d4c:	f8c8 4018 	str.w	r4, [r8, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007d50:	f8c8 4020 	str.w	r4, [r8, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007d54:	f8c8 402c 	str.w	r4, [r8, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007d58:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007d5c:	f8c8 400c 	str.w	r4, [r8, #12]
  hadc1.Init.NbrOfConversion = 1;
 8007d60:	f8c8 501c 	str.w	r5, [r8, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8007d64:	f8c8 4030 	str.w	r4, [r8, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007d68:	f8c8 5014 	str.w	r5, [r8, #20]
 8007d6c:	e018      	b.n	8007da0 <main+0x2f0>
 8007d6e:	bf00      	nop
 8007d70:	40023800 	.word	0x40023800
 8007d74:	40021000 	.word	0x40021000
 8007d78:	10110000 	.word	0x10110000
 8007d7c:	40020800 	.word	0x40020800
 8007d80:	40020400 	.word	0x40020400
 8007d84:	40021800 	.word	0x40021800
 8007d88:	40021400 	.word	0x40021400
 8007d8c:	40020000 	.word	0x40020000
 8007d90:	40020c00 	.word	0x40020c00
 8007d94:	40012000 	.word	0x40012000
 8007d98:	0f000001 	.word	0x0f000001
 8007d9c:	200004ec 	.word	0x200004ec
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007da0:	f7fb f920 	bl	8002fe4 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007da4:	4640      	mov	r0, r8
  hdac.Instance = DAC;
 8007da6:	f8df 833c 	ldr.w	r8, [pc, #828]	; 80080e4 <main+0x634>
  sConfig.Rank = 1;
 8007daa:	9513      	str	r5, [sp, #76]	; 0x4c
  sConfig.Channel = ADC_CHANNEL_10;
 8007dac:	230a      	movs	r3, #10
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007dae:	a912      	add	r1, sp, #72	; 0x48
  sConfig.Channel = ADC_CHANNEL_10;
 8007db0:	9312      	str	r3, [sp, #72]	; 0x48
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8007db2:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007db4:	f7fb f9ba 	bl	800312c <HAL_ADC_ConfigChannel>
  hdac.Instance = DAC;
 8007db8:	4bab      	ldr	r3, [pc, #684]	; (8008068 <main+0x5b8>)
 8007dba:	f8c8 3000 	str.w	r3, [r8]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8007dbe:	4640      	mov	r0, r8
  DAC_ChannelConfTypeDef sConfig = {0};
 8007dc0:	9412      	str	r4, [sp, #72]	; 0x48
 8007dc2:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8007dc4:	f7fb fab0 	bl	8003328 <HAL_DAC_Init>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8007dc8:	4622      	mov	r2, r4
 8007dca:	a912      	add	r1, sp, #72	; 0x48
 8007dcc:	4640      	mov	r0, r8
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8007dce:	9412      	str	r4, [sp, #72]	; 0x48
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8007dd0:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8007dd2:	f7fb fabc 	bl	800334e <HAL_DAC_ConfigChannel>
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8007dd6:	48a5      	ldr	r0, [pc, #660]	; (800806c <main+0x5bc>)
 8007dd8:	4ba5      	ldr	r3, [pc, #660]	; (8008070 <main+0x5c0>)
 8007dda:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8007ddc:	7105      	strb	r5, [r0, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8007dde:	6084      	str	r4, [r0, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8007de0:	60c6      	str	r6, [r0, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8007de2:	6104      	str	r4, [r0, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8007de4:	6144      	str	r4, [r0, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8007de6:	6184      	str	r4, [r0, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8007de8:	61c6      	str	r6, [r0, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8007dea:	6204      	str	r4, [r0, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8007dec:	6244      	str	r4, [r0, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8007dee:	6285      	str	r5, [r0, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8007df0:	62c4      	str	r4, [r0, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8007df2:	6304      	str	r4, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8007df4:	f7fb fb0a 	bl	800340c <HAL_DFSDM_ChannelInit>
  hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 8007df8:	489e      	ldr	r0, [pc, #632]	; (8008074 <main+0x5c4>)
 8007dfa:	4b9f      	ldr	r3, [pc, #636]	; (8008078 <main+0x5c8>)
 8007dfc:	6003      	str	r3, [r0, #0]
  hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 8007dfe:	7105      	strb	r5, [r0, #4]
  hdfsdm2_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8007e00:	6084      	str	r4, [r0, #8]
  hdfsdm2_channel1.Init.OutputClock.Divider = 2;
 8007e02:	60c6      	str	r6, [r0, #12]
  hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8007e04:	6104      	str	r4, [r0, #16]
  hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8007e06:	6144      	str	r4, [r0, #20]
  hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8007e08:	6184      	str	r4, [r0, #24]
  hdfsdm2_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8007e0a:	61c6      	str	r6, [r0, #28]
  hdfsdm2_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8007e0c:	6204      	str	r4, [r0, #32]
  hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8007e0e:	6244      	str	r4, [r0, #36]	; 0x24
  hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 8007e10:	6285      	str	r5, [r0, #40]	; 0x28
  hdfsdm2_channel1.Init.Offset = 0;
 8007e12:	62c4      	str	r4, [r0, #44]	; 0x2c
  hdfsdm2_channel1.Init.RightBitShift = 0x00;
 8007e14:	6304      	str	r4, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK)
 8007e16:	f7fb faf9 	bl	800340c <HAL_DFSDM_ChannelInit>
  hdfsdm2_channel7.Instance = DFSDM2_Channel7;
 8007e1a:	4898      	ldr	r0, [pc, #608]	; (800807c <main+0x5cc>)
 8007e1c:	4b98      	ldr	r3, [pc, #608]	; (8008080 <main+0x5d0>)
  hdfsdm2_channel7.Init.OutputClock.Divider = 2;
 8007e1e:	60c6      	str	r6, [r0, #12]
  hdfsdm2_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8007e20:	61c6      	str	r6, [r0, #28]
  hfmpi2c1.Instance = FMPI2C1;
 8007e22:	4e98      	ldr	r6, [pc, #608]	; (8008084 <main+0x5d4>)
  hdfsdm2_channel7.Instance = DFSDM2_Channel7;
 8007e24:	6003      	str	r3, [r0, #0]
  hdfsdm2_channel7.Init.OutputClock.Activation = ENABLE;
 8007e26:	7105      	strb	r5, [r0, #4]
  hdfsdm2_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8007e28:	6084      	str	r4, [r0, #8]
  hdfsdm2_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8007e2a:	6104      	str	r4, [r0, #16]
  hdfsdm2_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8007e2c:	6144      	str	r4, [r0, #20]
  hdfsdm2_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8007e2e:	6184      	str	r4, [r0, #24]
  hdfsdm2_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8007e30:	6204      	str	r4, [r0, #32]
  hdfsdm2_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8007e32:	6244      	str	r4, [r0, #36]	; 0x24
  hdfsdm2_channel7.Init.Awd.Oversampling = 1;
 8007e34:	6285      	str	r5, [r0, #40]	; 0x28
  hdfsdm2_channel7.Init.Offset = 0;
 8007e36:	62c4      	str	r4, [r0, #44]	; 0x2c
  hdfsdm2_channel7.Init.RightBitShift = 0x00;
 8007e38:	6304      	str	r4, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel7) != HAL_OK)
 8007e3a:	f7fb fae7 	bl	800340c <HAL_DFSDM_ChannelInit>
  hfmpi2c1.Init.Timing = 0x00303D5B;
 8007e3e:	4a92      	ldr	r2, [pc, #584]	; (8008088 <main+0x5d8>)
 8007e40:	4b92      	ldr	r3, [pc, #584]	; (800808c <main+0x5dc>)
  hfmpi2c1.Init.OwnAddress1 = 0;
 8007e42:	60b4      	str	r4, [r6, #8]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8007e44:	4630      	mov	r0, r6
  hfmpi2c1.Init.Timing = 0x00303D5B;
 8007e46:	e886 000c 	stmia.w	r6, {r2, r3}
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8007e4a:	60f5      	str	r5, [r6, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8007e4c:	6134      	str	r4, [r6, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 8007e4e:	6174      	str	r4, [r6, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8007e50:	61b4      	str	r4, [r6, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8007e52:	61f4      	str	r4, [r6, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8007e54:	6234      	str	r4, [r6, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8007e56:	f7fb fb6b 	bl	8003530 <HAL_FMPI2C_Init>
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007e5a:	4621      	mov	r1, r4
 8007e5c:	4630      	mov	r0, r6
 8007e5e:	f7fb fbb8 	bl	80035d2 <HAL_FMPI2CEx_ConfigAnalogFilter>
{
  FSMC_NORSRAM_TimingTypeDef Timing;

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8007e62:	488b      	ldr	r0, [pc, #556]	; (8008090 <main+0x5e0>)
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8007e64:	f8df b280 	ldr.w	fp, [pc, #640]	; 80080e8 <main+0x638>
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8007e68:	6084      	str	r4, [r0, #8]
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
  /* Timing */
  Timing.AddressSetupTime = 15;
 8007e6a:	260f      	movs	r6, #15
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8007e6c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
  Timing.AddressHoldTime = 15;
  Timing.DataSetupTime = 255;
 8007e70:	f04f 08ff 	mov.w	r8, #255	; 0xff
  Timing.CLKDivision = 16;
  Timing.DataLatency = 17;
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8007e74:	4622      	mov	r2, r4
  Timing.DataLatency = 17;
 8007e76:	f04f 0a11 	mov.w	sl, #17
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8007e7a:	a912      	add	r1, sp, #72	; 0x48
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8007e7c:	6003      	str	r3, [r0, #0]
 8007e7e:	9304      	str	r3, [sp, #16]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8007e80:	60c4      	str	r4, [r0, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8007e82:	6104      	str	r4, [r0, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8007e84:	6147      	str	r7, [r0, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8007e86:	6184      	str	r4, [r0, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8007e88:	61c4      	str	r4, [r0, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8007e8a:	6244      	str	r4, [r0, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8007e8c:	6284      	str	r4, [r0, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8007e8e:	62c4      	str	r4, [r0, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8007e90:	6304      	str	r4, [r0, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8007e92:	6344      	str	r4, [r0, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8007e94:	6384      	str	r4, [r0, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8007e96:	63c4      	str	r4, [r0, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8007e98:	6404      	str	r4, [r0, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8007e9a:	6444      	str	r4, [r0, #68]	; 0x44
  Timing.DataSetupTime = 255;
 8007e9c:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  Timing.CLKDivision = 16;
 8007ea0:	9716      	str	r7, [sp, #88]	; 0x58
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8007ea2:	9418      	str	r4, [sp, #96]	; 0x60
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8007ea4:	f8c0 b004 	str.w	fp, [r0, #4]
  Timing.AddressSetupTime = 15;
 8007ea8:	9612      	str	r6, [sp, #72]	; 0x48
  Timing.AddressHoldTime = 15;
 8007eaa:	9613      	str	r6, [sp, #76]	; 0x4c
  Timing.BusTurnAroundDuration = 15;
 8007eac:	9615      	str	r6, [sp, #84]	; 0x54
  Timing.DataLatency = 17;
 8007eae:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8007eb2:	f7fd fcf7 	bl	80058a4 <HAL_SRAM_Init>
    Error_Handler( );
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 8007eb6:	4877      	ldr	r0, [pc, #476]	; (8008094 <main+0x5e4>)
 8007eb8:	9b04      	ldr	r3, [sp, #16]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8007eba:	60c4      	str	r4, [r0, #12]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8007ebc:	e880 0808 	stmia.w	r0, {r3, fp}
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 8007ec0:	2304      	movs	r3, #4
  Timing.CLKDivision = 16;
  Timing.DataLatency = 17;
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8007ec2:	4622      	mov	r2, r4
 8007ec4:	a912      	add	r1, sp, #72	; 0x48
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 8007ec6:	6083      	str	r3, [r0, #8]
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8007ec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8007ecc:	6104      	str	r4, [r0, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8007ece:	6147      	str	r7, [r0, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8007ed0:	6184      	str	r4, [r0, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8007ed2:	61c4      	str	r4, [r0, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8007ed4:	6244      	str	r4, [r0, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8007ed6:	6283      	str	r3, [r0, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8007ed8:	62c4      	str	r4, [r0, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8007eda:	6304      	str	r4, [r0, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8007edc:	6344      	str	r4, [r0, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8007ede:	6384      	str	r4, [r0, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8007ee0:	63c4      	str	r4, [r0, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8007ee2:	6404      	str	r4, [r0, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8007ee4:	6444      	str	r4, [r0, #68]	; 0x44
  Timing.DataSetupTime = 255;
 8007ee6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  Timing.CLKDivision = 16;
 8007eea:	9716      	str	r7, [sp, #88]	; 0x58
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8007eec:	9418      	str	r4, [sp, #96]	; 0x60
  Timing.AddressSetupTime = 15;
 8007eee:	9612      	str	r6, [sp, #72]	; 0x48
  Timing.AddressHoldTime = 15;
 8007ef0:	9613      	str	r6, [sp, #76]	; 0x4c
  Timing.BusTurnAroundDuration = 15;
 8007ef2:	9615      	str	r6, [sp, #84]	; 0x54
  Timing.DataLatency = 17;
 8007ef4:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8007ef8:	f7fd fcd4 	bl	80058a4 <HAL_SRAM_Init>
  hqspi.Instance = QUADSPI;
 8007efc:	4866      	ldr	r0, [pc, #408]	; (8008098 <main+0x5e8>)
 8007efe:	4b67      	ldr	r3, [pc, #412]	; (800809c <main+0x5ec>)
  hsd.Instance = SDIO;
 8007f00:	4f67      	ldr	r7, [pc, #412]	; (80080a0 <main+0x5f0>)
  hqspi.Init.FifoThreshold = 1;
 8007f02:	6085      	str	r5, [r0, #8]
  hqspi.Init.ClockPrescaler = 255;
 8007f04:	e880 0108 	stmia.w	r0, {r3, r8}
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8007f08:	60c4      	str	r4, [r0, #12]
  hqspi.Init.FlashSize = 1;
 8007f0a:	6105      	str	r5, [r0, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8007f0c:	6144      	str	r4, [r0, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8007f0e:	6184      	str	r4, [r0, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8007f10:	61c4      	str	r4, [r0, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8007f12:	6204      	str	r4, [r0, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8007f14:	f7fc fd7a 	bl	8004a0c <HAL_QSPI_Init>
  hsd.Instance = SDIO;
 8007f18:	4b62      	ldr	r3, [pc, #392]	; (80080a4 <main+0x5f4>)
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8007f1a:	60bc      	str	r4, [r7, #8]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8007f1c:	4638      	mov	r0, r7
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8007f1e:	e887 0018 	stmia.w	r7, {r3, r4}
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007f22:	60fc      	str	r4, [r7, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8007f24:	613c      	str	r4, [r7, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007f26:	617c      	str	r4, [r7, #20]
  hsd.Init.ClockDiv = 0;
 8007f28:	61bc      	str	r4, [r7, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8007f2a:	f7fd fc1d 	bl	8005768 <HAL_SD_Init>
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8007f2e:	4649      	mov	r1, r9
 8007f30:	4638      	mov	r0, r7
 8007f32:	f7fd fc33 	bl	800579c <HAL_SD_ConfigWideBusOperation>
  huart10.Instance = UART10;
 8007f36:	485c      	ldr	r0, [pc, #368]	; (80080a8 <main+0x5f8>)
  huart10.Init.BaudRate = 115200;
 8007f38:	4b5c      	ldr	r3, [pc, #368]	; (80080ac <main+0x5fc>)
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8007f3a:	6084      	str	r4, [r0, #8]
  huart10.Init.BaudRate = 115200;
 8007f3c:	f44f 38e1 	mov.w	r8, #115200	; 0x1c200
  huart10.Init.Mode = UART_MODE_TX_RX;
 8007f40:	270c      	movs	r7, #12
  huart10.Init.BaudRate = 115200;
 8007f42:	e880 0108 	stmia.w	r0, {r3, r8}
  huart10.Init.StopBits = UART_STOPBITS_1;
 8007f46:	60c4      	str	r4, [r0, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8007f48:	6104      	str	r4, [r0, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8007f4a:	6147      	str	r7, [r0, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007f4c:	6184      	str	r4, [r0, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8007f4e:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8007f50:	f7fd fdec 	bl	8005b2c <HAL_UART_Init>
  huart6.Instance = USART6;
 8007f54:	4856      	ldr	r0, [pc, #344]	; (80080b0 <main+0x600>)
 8007f56:	4b57      	ldr	r3, [pc, #348]	; (80080b4 <main+0x604>)
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8007f58:	6084      	str	r4, [r0, #8]
  huart6.Init.BaudRate = 115200;
 8007f5a:	e880 0108 	stmia.w	r0, {r3, r8}
  huart6.Init.StopBits = UART_STOPBITS_1;
 8007f5e:	60c4      	str	r4, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8007f60:	6104      	str	r4, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8007f62:	6147      	str	r7, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007f64:	6184      	str	r4, [r0, #24]
  hi2c2.Instance = I2C2;
 8007f66:	4f54      	ldr	r7, [pc, #336]	; (80080b8 <main+0x608>)
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8007f68:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8007f6a:	f7fd fddf 	bl	8005b2c <HAL_UART_Init>
  MX_USB_HOST_Init();
 8007f6e:	f000 fccb 	bl	8008908 <MX_USB_HOST_Init>
  hi2c2.Init.ClockSpeed = 100000;
 8007f72:	4952      	ldr	r1, [pc, #328]	; (80080bc <main+0x60c>)
 8007f74:	4b52      	ldr	r3, [pc, #328]	; (80080c0 <main+0x610>)
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007f76:	60bc      	str	r4, [r7, #8]
  hi2c2.Init.ClockSpeed = 100000;
 8007f78:	e887 000a 	stmia.w	r7, {r1, r3}
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007f7c:	4638      	mov	r0, r7
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007f7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007f82:	613b      	str	r3, [r7, #16]
  hi2c2.Init.OwnAddress1 = 0;
 8007f84:	60fc      	str	r4, [r7, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007f86:	617c      	str	r4, [r7, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8007f88:	61bc      	str	r4, [r7, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007f8a:	61fc      	str	r4, [r7, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007f8c:	623c      	str	r4, [r7, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007f8e:	f7fc fac7 	bl	8004520 <HAL_I2C_Init>
  MX_X_CUBE_MEMS1_Init();
 8007f92:	f7ff fa3d 	bl	8007410 <MX_X_CUBE_MEMS1_Init>
  BSP_LED_Init(LED3);
 8007f96:	4620      	mov	r0, r4
 8007f98:	f7fa fcf8 	bl	800298c <BSP_LED_Init>
  BSP_LED_Init(LED4);
 8007f9c:	4628      	mov	r0, r5
 8007f9e:	f7fa fcf5 	bl	800298c <BSP_LED_Init>
  HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR, WHO_AM_I_REG, I2C_MEMADD_SIZE_8BIT, buffer, 1, 1000);
 8007fa2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
  printf("Initializing...\n");
 8007fa6:	4847      	ldr	r0, [pc, #284]	; (80080c4 <main+0x614>)
  HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR, WHO_AM_I_REG, I2C_MEMADD_SIZE_8BIT, buffer, 1, 1000);
 8007fa8:	f10d 083c 	add.w	r8, sp, #60	; 0x3c
  printf("Initializing...\n");
 8007fac:	f000 ff2c 	bl	8008e08 <puts>
  HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR, WHO_AM_I_REG, I2C_MEMADD_SIZE_8BIT, buffer, 1, 1000);
 8007fb0:	462b      	mov	r3, r5
 8007fb2:	9501      	str	r5, [sp, #4]
 8007fb4:	9402      	str	r4, [sp, #8]
 8007fb6:	f8cd 8000 	str.w	r8, [sp]
 8007fba:	4632      	mov	r2, r6
 8007fbc:	21be      	movs	r1, #190	; 0xbe
 8007fbe:	4638      	mov	r0, r7
 8007fc0:	f7fc fbcc 	bl	800475c <HAL_I2C_Mem_Read>
  if(buffer[0]!=0xbc) {
 8007fc4:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8007fc8:	2bbc      	cmp	r3, #188	; 0xbc
 8007fca:	4625      	mov	r5, r4
 8007fcc:	d002      	beq.n	8007fd4 <main+0x524>
	  printf("Error initializing HTS221\n");
 8007fce:	483e      	ldr	r0, [pc, #248]	; (80080c8 <main+0x618>)
 8007fd0:	f000 ff1a 	bl	8008e08 <puts>
  HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR, CTRL_REG1, I2C_MEMADD_SIZE_8BIT, buffer, 1, 1000);
 8007fd4:	2401      	movs	r4, #1
 8007fd6:	9502      	str	r5, [sp, #8]
 8007fd8:	4623      	mov	r3, r4
 8007fda:	2220      	movs	r2, #32
 8007fdc:	21be      	movs	r1, #190	; 0xbe
 8007fde:	9401      	str	r4, [sp, #4]
 8007fe0:	f8cd 8000 	str.w	r8, [sp]
 8007fe4:	4834      	ldr	r0, [pc, #208]	; (80080b8 <main+0x608>)
    sprintf(strbuf,"Temperature: %d",_temperature);
 8007fe6:	4e39      	ldr	r6, [pc, #228]	; (80080cc <main+0x61c>)
  HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR, CTRL_REG1, I2C_MEMADD_SIZE_8BIT, buffer, 1, 1000);
 8007fe8:	f7fc fbb8 	bl	800475c <HAL_I2C_Mem_Read>
  buffer[0] |= ODR0_SET;
 8007fec:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
  HAL_I2C_Mem_Write(&hi2c2, HTS221_ADDR, CTRL_REG1, I2C_MEMADD_SIZE_8BIT, buffer, 1, 1000);
 8007ff0:	9502      	str	r5, [sp, #8]
  buffer[0] |= ODR0_SET;
 8007ff2:	f063 037e 	orn	r3, r3, #126	; 0x7e
  HAL_I2C_Mem_Write(&hi2c2, HTS221_ADDR, CTRL_REG1, I2C_MEMADD_SIZE_8BIT, buffer, 1, 1000);
 8007ff6:	2220      	movs	r2, #32
 8007ff8:	21be      	movs	r1, #190	; 0xbe
  buffer[0] |= ODR0_SET;
 8007ffa:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
  HAL_I2C_Mem_Write(&hi2c2, HTS221_ADDR, CTRL_REG1, I2C_MEMADD_SIZE_8BIT, buffer, 1, 1000);
 8007ffe:	9401      	str	r4, [sp, #4]
 8008000:	4623      	mov	r3, r4
 8008002:	f8cd 8000 	str.w	r8, [sp]
 8008006:	482c      	ldr	r0, [pc, #176]	; (80080b8 <main+0x608>)
    sprintf(strbuf,"Temperature: %d",_temperature);
 8008008:	4d31      	ldr	r5, [pc, #196]	; (80080d0 <main+0x620>)
  HAL_I2C_Mem_Write(&hi2c2, HTS221_ADDR, CTRL_REG1, I2C_MEMADD_SIZE_8BIT, buffer, 1, 1000);
 800800a:	f7fc fb11 	bl	8004630 <HAL_I2C_Mem_Write>
  calibrate_HTS221();
 800800e:	f7ff fbad 	bl	800776c <calibrate_HTS221>
  BSP_LCD_Init();
 8008012:	f7fa ff7f 	bl	8002f14 <BSP_LCD_Init>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8008016:	482f      	ldr	r0, [pc, #188]	; (80080d4 <main+0x624>)
 8008018:	f7fa fdd2 	bl	8002bc0 <BSP_LCD_SetFont>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800801c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008020:	f7fa fdc8 	bl	8002bb4 <BSP_LCD_SetBackColor>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8008024:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008028:	f7fa fea4 	bl	8002d74 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 800802c:	2010      	movs	r0, #16
 800802e:	f7fa fdbb 	bl	8002ba8 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, 2, (uint8_t *)"Ambient Demo", CENTER_MODE);
 8008032:	4623      	mov	r3, r4
 8008034:	4a28      	ldr	r2, [pc, #160]	; (80080d8 <main+0x628>)
 8008036:	2102      	movs	r1, #2
 8008038:	2000      	movs	r0, #0
 800803a:	f7fa fe23 	bl	8002c84 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 14, (uint8_t *)"Welcome", CENTER_MODE);
 800803e:	4623      	mov	r3, r4
 8008040:	4a26      	ldr	r2, [pc, #152]	; (80080dc <main+0x62c>)
 8008042:	210e      	movs	r1, #14
 8008044:	2000      	movs	r0, #0
 8008046:	f7fa fe1d 	bl	8002c84 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 800804a:	4822      	ldr	r0, [pc, #136]	; (80080d4 <main+0x624>)
 800804c:	f7fa fdb8 	bl	8002bc0 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()-12, (uint8_t *)"Antonio Luque 2018", CENTER_MODE);
 8008050:	f7fa fda2 	bl	8002b98 <BSP_LCD_GetYSize>
 8008054:	f1a0 010c 	sub.w	r1, r0, #12
 8008058:	4623      	mov	r3, r4
 800805a:	4a21      	ldr	r2, [pc, #132]	; (80080e0 <main+0x630>)
 800805c:	b289      	uxth	r1, r1
 800805e:	2000      	movs	r0, #0
 8008060:	f7fa fe10 	bl	8002c84 <BSP_LCD_DisplayStringAt>
 8008064:	e042      	b.n	80080ec <main+0x63c>
 8008066:	bf00      	nop
 8008068:	40007400 	.word	0x40007400
 800806c:	20000350 	.word	0x20000350
 8008070:	40016020 	.word	0x40016020
 8008074:	200004ac 	.word	0x200004ac
 8008078:	40016420 	.word	0x40016420
 800807c:	200003dc 	.word	0x200003dc
 8008080:	400164e0 	.word	0x400164e0
 8008084:	20000548 	.word	0x20000548
 8008088:	40006000 	.word	0x40006000
 800808c:	00303d5b 	.word	0x00303d5b
 8008090:	20000458 	.word	0x20000458
 8008094:	2000059c 	.word	0x2000059c
 8008098:	200006c4 	.word	0x200006c4
 800809c:	a0001000 	.word	0xa0001000
 80080a0:	200005ec 	.word	0x200005ec
 80080a4:	40012c00 	.word	0x40012c00
 80080a8:	20000418 	.word	0x20000418
 80080ac:	40011c00 	.word	0x40011c00
 80080b0:	20000670 	.word	0x20000670
 80080b4:	40011400 	.word	0x40011400
 80080b8:	20000388 	.word	0x20000388
 80080bc:	40005800 	.word	0x40005800
 80080c0:	000186a0 	.word	0x000186a0
 80080c4:	0800bb7c 	.word	0x0800bb7c
 80080c8:	0800bb8c 	.word	0x0800bb8c
 80080cc:	200004e4 	.word	0x200004e4
 80080d0:	0800bbce 	.word	0x0800bbce
 80080d4:	20000104 	.word	0x20000104
 80080d8:	0800bba6 	.word	0x0800bba6
 80080dc:	0800bbb3 	.word	0x0800bbb3
 80080e0:	0800bbbb 	.word	0x0800bbbb
 80080e4:	20000534 	.word	0x20000534
 80080e8:	a0000104 	.word	0xa0000104
    periodicActivity();
 80080ec:	f7ff fbd0 	bl	8007890 <periodicActivity>
    sprintf(strbuf,"Temperature: %d",_temperature);
 80080f0:	6832      	ldr	r2, [r6, #0]
 80080f2:	4629      	mov	r1, r5
 80080f4:	a812      	add	r0, sp, #72	; 0x48
 80080f6:	f000 fe9f 	bl	8008e38 <siprintf>
    BSP_LCD_SetFont(&Font12);
 80080fa:	481c      	ldr	r0, [pc, #112]	; (800816c <main+0x6bc>)
 80080fc:	f7fa fd60 	bl	8002bc0 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8008100:	201f      	movs	r0, #31
 8008102:	f7fa fd51 	bl	8002ba8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(0, BSP_LCD_GetYSize()/2 + 1, BSP_LCD_GetXSize(), 60);
 8008106:	f7fa fd47 	bl	8002b98 <BSP_LCD_GetYSize>
 800810a:	4604      	mov	r4, r0
 800810c:	f7fa fd3c 	bl	8002b88 <BSP_LCD_GetXSize>
 8008110:	0861      	lsrs	r1, r4, #1
 8008112:	3101      	adds	r1, #1
 8008114:	b282      	uxth	r2, r0
 8008116:	233c      	movs	r3, #60	; 0x3c
 8008118:	b289      	uxth	r1, r1
 800811a:	2000      	movs	r0, #0
 800811c:	f7fa fe42 	bl	8002da4 <BSP_LCD_FillRect>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008120:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008124:	f7fa fd40 	bl	8002ba8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8008128:	201f      	movs	r0, #31
 800812a:	f7fa fd43 	bl	8002bb4 <BSP_LCD_SetBackColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 20, (uint8_t *)strbuf, CENTER_MODE);
 800812e:	f7fa fd33 	bl	8002b98 <BSP_LCD_GetYSize>
 8008132:	0841      	lsrs	r1, r0, #1
 8008134:	3114      	adds	r1, #20
 8008136:	aa12      	add	r2, sp, #72	; 0x48
 8008138:	2301      	movs	r3, #1
 800813a:	b289      	uxth	r1, r1
 800813c:	2000      	movs	r0, #0
 800813e:	f7fa fda1 	bl	8002c84 <BSP_LCD_DisplayStringAt>
    sprintf(strbuf,"Humidity: %d", _humidity);
 8008142:	4b0b      	ldr	r3, [pc, #44]	; (8008170 <main+0x6c0>)
 8008144:	490b      	ldr	r1, [pc, #44]	; (8008174 <main+0x6c4>)
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	a812      	add	r0, sp, #72	; 0x48
 800814a:	f000 fe75 	bl	8008e38 <siprintf>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 40, (uint8_t *)strbuf, CENTER_MODE);
 800814e:	f7fa fd23 	bl	8002b98 <BSP_LCD_GetYSize>
 8008152:	0841      	lsrs	r1, r0, #1
 8008154:	3128      	adds	r1, #40	; 0x28
 8008156:	2301      	movs	r3, #1
 8008158:	aa12      	add	r2, sp, #72	; 0x48
 800815a:	b289      	uxth	r1, r1
 800815c:	2000      	movs	r0, #0
 800815e:	f7fa fd91 	bl	8002c84 <BSP_LCD_DisplayStringAt>
    HAL_Delay(5000);
 8008162:	f241 3088 	movw	r0, #5000	; 0x1388
 8008166:	f7fa ff29 	bl	8002fbc <HAL_Delay>
 800816a:	e7bf      	b.n	80080ec <main+0x63c>
 800816c:	20000104 	.word	0x20000104
 8008170:	200006c0 	.word	0x200006c0
 8008174:	0800bbde 	.word	0x0800bbde

08008178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008178:	4770      	bx	lr
	...

0800817c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800817c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800817e:	4b0c      	ldr	r3, [pc, #48]	; (80081b0 <HAL_MspInit+0x34>)
 8008180:	2100      	movs	r1, #0
 8008182:	9100      	str	r1, [sp, #0]
 8008184:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008186:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800818a:	645a      	str	r2, [r3, #68]	; 0x44
 800818c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800818e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8008192:	9200      	str	r2, [sp, #0]
 8008194:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008196:	9101      	str	r1, [sp, #4]
 8008198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800819a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800819e:	641a      	str	r2, [r3, #64]	; 0x40
 80081a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081a6:	9301      	str	r3, [sp, #4]
 80081a8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80081aa:	b002      	add	sp, #8
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	40023800 	.word	0x40023800

080081b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80081b4:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081b6:	2214      	movs	r2, #20
{
 80081b8:	b08b      	sub	sp, #44	; 0x2c
 80081ba:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081bc:	2100      	movs	r1, #0
 80081be:	eb0d 0002 	add.w	r0, sp, r2
 80081c2:	f000 fd11 	bl	8008be8 <memset>
  if(hadc->Instance==ADC1)
 80081c6:	6822      	ldr	r2, [r4, #0]
 80081c8:	4b23      	ldr	r3, [pc, #140]	; (8008258 <HAL_ADC_MspInit+0xa4>)
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d142      	bne.n	8008254 <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80081ce:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80081d2:	2400      	movs	r4, #0
 80081d4:	9401      	str	r4, [sp, #4]
 80081d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80081d8:	4820      	ldr	r0, [pc, #128]	; (800825c <HAL_ADC_MspInit+0xa8>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80081da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081de:	645a      	str	r2, [r3, #68]	; 0x44
 80081e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081e2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80081e6:	9201      	str	r2, [sp, #4]
 80081e8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80081ea:	9402      	str	r4, [sp, #8]
 80081ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081ee:	f042 0204 	orr.w	r2, r2, #4
 80081f2:	631a      	str	r2, [r3, #48]	; 0x30
 80081f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081f6:	f002 0204 	and.w	r2, r2, #4
 80081fa:	9202      	str	r2, [sp, #8]
 80081fc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081fe:	9403      	str	r4, [sp, #12]
 8008200:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008202:	f042 0201 	orr.w	r2, r2, #1
 8008206:	631a      	str	r2, [r3, #48]	; 0x30
 8008208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800820a:	f002 0201 	and.w	r2, r2, #1
 800820e:	9203      	str	r2, [sp, #12]
 8008210:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008212:	9404      	str	r4, [sp, #16]
 8008214:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008216:	f042 0202 	orr.w	r2, r2, #2
 800821a:	631a      	str	r2, [r3, #48]	; 0x30
 800821c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800821e:	f003 0302 	and.w	r3, r3, #2
 8008222:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008224:	2503      	movs	r5, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008226:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008228:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 800822a:	2311      	movs	r3, #17
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800822c:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 800822e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008230:	f7fb f9f6 	bl	8003620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 8008234:	2326      	movs	r3, #38	; 0x26
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008236:	a905      	add	r1, sp, #20
 8008238:	4809      	ldr	r0, [pc, #36]	; (8008260 <HAL_ADC_MspInit+0xac>)
    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 800823a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800823c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800823e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008240:	f7fb f9ee 	bl	8003620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A4_Pin;
 8008244:	2302      	movs	r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 8008246:	a905      	add	r1, sp, #20
 8008248:	4806      	ldr	r0, [pc, #24]	; (8008264 <HAL_ADC_MspInit+0xb0>)
    GPIO_InitStruct.Pin = ARD_A4_Pin;
 800824a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800824c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800824e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 8008250:	f7fb f9e6 	bl	8003620 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8008254:	b00b      	add	sp, #44	; 0x2c
 8008256:	bd30      	pop	{r4, r5, pc}
 8008258:	40012000 	.word	0x40012000
 800825c:	40020800 	.word	0x40020800
 8008260:	40020000 	.word	0x40020000
 8008264:	40020400 	.word	0x40020400

08008268 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8008268:	b510      	push	{r4, lr}
 800826a:	4604      	mov	r4, r0
 800826c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800826e:	2214      	movs	r2, #20
 8008270:	2100      	movs	r1, #0
 8008272:	a803      	add	r0, sp, #12
 8008274:	f000 fcb8 	bl	8008be8 <memset>
  if(hdac->Instance==DAC)
 8008278:	6822      	ldr	r2, [r4, #0]
 800827a:	4b12      	ldr	r3, [pc, #72]	; (80082c4 <HAL_DAC_MspInit+0x5c>)
 800827c:	429a      	cmp	r2, r3
 800827e:	d11e      	bne.n	80082be <HAL_DAC_MspInit+0x56>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8008280:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8008284:	2100      	movs	r1, #0
 8008286:	9101      	str	r1, [sp, #4]
 8008288:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 800828a:	480f      	ldr	r0, [pc, #60]	; (80082c8 <HAL_DAC_MspInit+0x60>)
    __HAL_RCC_DAC_CLK_ENABLE();
 800828c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8008290:	641a      	str	r2, [r3, #64]	; 0x40
 8008292:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008294:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8008298:	9201      	str	r2, [sp, #4]
 800829a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800829c:	9102      	str	r1, [sp, #8]
 800829e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082a0:	f042 0201 	orr.w	r2, r2, #1
 80082a4:	631a      	str	r2, [r3, #48]	; 0x30
 80082a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a8:	f003 0301 	and.w	r3, r3, #1
 80082ac:	9302      	str	r3, [sp, #8]
 80082ae:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 80082b0:	2310      	movs	r3, #16
 80082b2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 80082b4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80082b6:	2303      	movs	r3, #3
 80082b8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 80082ba:	f7fb f9b1 	bl	8003620 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80082be:	b008      	add	sp, #32
 80082c0:	bd10      	pop	{r4, pc}
 80082c2:	bf00      	nop
 80082c4:	40007400 	.word	0x40007400
 80082c8:	40020000 	.word	0x40020000

080082cc <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80082cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082ce:	4604      	mov	r4, r0
 80082d0:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082d2:	2214      	movs	r2, #20
 80082d4:	2100      	movs	r1, #0
 80082d6:	a807      	add	r0, sp, #28
 80082d8:	f000 fc86 	bl	8008be8 <memset>
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 80082dc:	6823      	ldr	r3, [r4, #0]
 80082de:	4a50      	ldr	r2, [pc, #320]	; (8008420 <HAL_DFSDM_ChannelMspInit+0x154>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d008      	beq.n	80082f6 <HAL_DFSDM_ChannelMspInit+0x2a>
 80082e4:	3220      	adds	r2, #32
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d005      	beq.n	80082f6 <HAL_DFSDM_ChannelMspInit+0x2a>
 80082ea:	3220      	adds	r2, #32
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d002      	beq.n	80082f6 <HAL_DFSDM_ChannelMspInit+0x2a>
 80082f0:	3220      	adds	r2, #32
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d148      	bne.n	8008388 <HAL_DFSDM_ChannelMspInit+0xbc>
 80082f6:	4d4b      	ldr	r5, [pc, #300]	; (8008424 <HAL_DFSDM_ChannelMspInit+0x158>)
 80082f8:	682c      	ldr	r4, [r5, #0]
 80082fa:	2c00      	cmp	r4, #0
 80082fc:	d138      	bne.n	8008370 <HAL_DFSDM_ChannelMspInit+0xa4>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80082fe:	4b4a      	ldr	r3, [pc, #296]	; (8008428 <HAL_DFSDM_ChannelMspInit+0x15c>)
 8008300:	9400      	str	r4, [sp, #0]
 8008302:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8008304:	4849      	ldr	r0, [pc, #292]	; (800842c <HAL_DFSDM_ChannelMspInit+0x160>)
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8008306:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800830a:	645a      	str	r2, [r3, #68]	; 0x44
 800830c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800830e:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 8008312:	9200      	str	r2, [sp, #0]
 8008314:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008316:	9401      	str	r4, [sp, #4]
 8008318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800831a:	f042 0201 	orr.w	r2, r2, #1
 800831e:	631a      	str	r2, [r3, #48]	; 0x30
 8008320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008322:	f002 0201 	and.w	r2, r2, #1
 8008326:	9201      	str	r2, [sp, #4]
 8008328:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800832a:	9402      	str	r4, [sp, #8]
 800832c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800832e:	f042 0208 	orr.w	r2, r2, #8
 8008332:	631a      	str	r2, [r3, #48]	; 0x30
 8008334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008336:	f003 0308 	and.w	r3, r3, #8
 800833a:	9302      	str	r3, [sp, #8]
 800833c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800833e:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8008340:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8008344:	2606      	movs	r6, #6
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8008346:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8008348:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800834a:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800834c:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 800834e:	f7fb f967 	bl	8003620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 8008352:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8008354:	4836      	ldr	r0, [pc, #216]	; (8008430 <HAL_DFSDM_ChannelMspInit+0x164>)
    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 8008356:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008358:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800835a:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800835c:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800835e:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8008360:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 8008362:	f7fb f95d 	bl	8003620 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM2_MspInit 1 */

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
 8008366:	682b      	ldr	r3, [r5, #0]
 8008368:	3301      	adds	r3, #1
 800836a:	602b      	str	r3, [r5, #0]
  }

}
 800836c:	b00d      	add	sp, #52	; 0x34
 800836e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 8008370:	4a2b      	ldr	r2, [pc, #172]	; (8008420 <HAL_DFSDM_ChannelMspInit+0x154>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d0fa      	beq.n	800836c <HAL_DFSDM_ChannelMspInit+0xa0>
 8008376:	3220      	adds	r2, #32
 8008378:	4293      	cmp	r3, r2
 800837a:	d0f7      	beq.n	800836c <HAL_DFSDM_ChannelMspInit+0xa0>
 800837c:	3220      	adds	r2, #32
 800837e:	4293      	cmp	r3, r2
 8008380:	d0f4      	beq.n	800836c <HAL_DFSDM_ChannelMspInit+0xa0>
 8008382:	3220      	adds	r2, #32
 8008384:	4293      	cmp	r3, r2
 8008386:	d0f1      	beq.n	800836c <HAL_DFSDM_ChannelMspInit+0xa0>
 8008388:	4d2a      	ldr	r5, [pc, #168]	; (8008434 <HAL_DFSDM_ChannelMspInit+0x168>)
 800838a:	682c      	ldr	r4, [r5, #0]
 800838c:	2c00      	cmp	r4, #0
 800838e:	d1ed      	bne.n	800836c <HAL_DFSDM_ChannelMspInit+0xa0>
    __HAL_RCC_DFSDM2_CLK_ENABLE();
 8008390:	4b25      	ldr	r3, [pc, #148]	; (8008428 <HAL_DFSDM_ChannelMspInit+0x15c>)
 8008392:	9403      	str	r4, [sp, #12]
 8008394:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8008396:	4825      	ldr	r0, [pc, #148]	; (800842c <HAL_DFSDM_ChannelMspInit+0x160>)
    __HAL_RCC_DFSDM2_CLK_ENABLE();
 8008398:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800839c:	645a      	str	r2, [r3, #68]	; 0x44
 800839e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083a0:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80083a4:	9203      	str	r2, [sp, #12]
 80083a6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083a8:	9404      	str	r4, [sp, #16]
 80083aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083ac:	f042 0201 	orr.w	r2, r2, #1
 80083b0:	631a      	str	r2, [r3, #48]	; 0x30
 80083b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083b4:	f002 0201 	and.w	r2, r2, #1
 80083b8:	9204      	str	r2, [sp, #16]
 80083ba:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80083bc:	9405      	str	r4, [sp, #20]
 80083be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083c0:	f042 0208 	orr.w	r2, r2, #8
 80083c4:	631a      	str	r2, [r3, #48]	; 0x30
 80083c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083c8:	f002 0208 	and.w	r2, r2, #8
 80083cc:	9205      	str	r2, [sp, #20]
 80083ce:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80083d0:	9406      	str	r4, [sp, #24]
 80083d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083d4:	f042 0202 	orr.w	r2, r2, #2
 80083d8:	631a      	str	r2, [r3, #48]	; 0x30
 80083da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083dc:	f003 0302 	and.w	r3, r3, #2
 80083e0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083e2:	2602      	movs	r6, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80083e4:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083e6:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 80083e8:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 80083ea:	2780      	movs	r7, #128	; 0x80
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 80083ec:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 80083ee:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 80083f0:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 80083f2:	f7fb f915 	bl	8003620 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 80083f6:	2304      	movs	r3, #4
 80083f8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80083fa:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 80083fc:	2303      	movs	r3, #3
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80083fe:	480c      	ldr	r0, [pc, #48]	; (8008430 <HAL_DFSDM_ChannelMspInit+0x164>)
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 8008400:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008402:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008404:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008406:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8008408:	f7fb f90a 	bl	8003620 <HAL_GPIO_Init>
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 800840c:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 800840e:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008410:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008412:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008414:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 8008416:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 8008418:	a907      	add	r1, sp, #28
 800841a:	4807      	ldr	r0, [pc, #28]	; (8008438 <HAL_DFSDM_ChannelMspInit+0x16c>)
 800841c:	e7a1      	b.n	8008362 <HAL_DFSDM_ChannelMspInit+0x96>
 800841e:	bf00      	nop
 8008420:	40016000 	.word	0x40016000
 8008424:	200002c4 	.word	0x200002c4
 8008428:	40023800 	.word	0x40023800
 800842c:	40020000 	.word	0x40020000
 8008430:	40020c00 	.word	0x40020c00
 8008434:	200002c8 	.word	0x200002c8
 8008438:	40020400 	.word	0x40020400

0800843c <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 800843c:	b530      	push	{r4, r5, lr}
 800843e:	4604      	mov	r4, r0
 8008440:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008442:	2214      	movs	r2, #20
 8008444:	2100      	movs	r1, #0
 8008446:	a803      	add	r0, sp, #12
 8008448:	f000 fbce 	bl	8008be8 <memset>
  if(hfmpi2c->Instance==FMPI2C1)
 800844c:	6822      	ldr	r2, [r4, #0]
 800844e:	4b14      	ldr	r3, [pc, #80]	; (80084a0 <HAL_FMPI2C_MspInit+0x64>)
 8008450:	429a      	cmp	r2, r3
 8008452:	d123      	bne.n	800849c <HAL_FMPI2C_MspInit+0x60>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008454:	4c13      	ldr	r4, [pc, #76]	; (80084a4 <HAL_FMPI2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008456:	4814      	ldr	r0, [pc, #80]	; (80084a8 <HAL_FMPI2C_MspInit+0x6c>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008458:	2500      	movs	r5, #0
 800845a:	9501      	str	r5, [sp, #4]
 800845c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800845e:	f043 0304 	orr.w	r3, r3, #4
 8008462:	6323      	str	r3, [r4, #48]	; 0x30
 8008464:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008466:	f003 0304 	and.w	r3, r3, #4
 800846a:	9301      	str	r3, [sp, #4]
 800846c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 800846e:	23c0      	movs	r3, #192	; 0xc0
 8008470:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008472:	2312      	movs	r3, #18
 8008474:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008476:	2301      	movs	r3, #1
 8008478:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800847a:	2303      	movs	r3, #3
 800847c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800847e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8008480:	2304      	movs	r3, #4
 8008482:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008484:	f7fb f8cc 	bl	8003620 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8008488:	9502      	str	r5, [sp, #8]
 800848a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800848c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008490:	6423      	str	r3, [r4, #64]	; 0x40
 8008492:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008494:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008498:	9302      	str	r3, [sp, #8]
 800849a:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 800849c:	b009      	add	sp, #36	; 0x24
 800849e:	bd30      	pop	{r4, r5, pc}
 80084a0:	40006000 	.word	0x40006000
 80084a4:	40023800 	.word	0x40023800
 80084a8:	40020800 	.word	0x40020800

080084ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80084ac:	b530      	push	{r4, r5, lr}
 80084ae:	4604      	mov	r4, r0
 80084b0:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084b2:	2214      	movs	r2, #20
 80084b4:	2100      	movs	r1, #0
 80084b6:	a803      	add	r0, sp, #12
 80084b8:	f000 fb96 	bl	8008be8 <memset>
  if(hi2c->Instance==I2C2)
 80084bc:	6822      	ldr	r2, [r4, #0]
 80084be:	4b15      	ldr	r3, [pc, #84]	; (8008514 <HAL_I2C_MspInit+0x68>)
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d124      	bne.n	800850e <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80084c4:	4c14      	ldr	r4, [pc, #80]	; (8008518 <HAL_I2C_MspInit+0x6c>)
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084c6:	4815      	ldr	r0, [pc, #84]	; (800851c <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80084c8:	2500      	movs	r5, #0
 80084ca:	9501      	str	r5, [sp, #4]
 80084cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80084ce:	f043 0302 	orr.w	r3, r3, #2
 80084d2:	6323      	str	r3, [r4, #48]	; 0x30
 80084d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80084d6:	f003 0302 	and.w	r3, r3, #2
 80084da:	9301      	str	r3, [sp, #4]
 80084dc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80084de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80084e2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80084e4:	2312      	movs	r3, #18
 80084e6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80084e8:	2301      	movs	r3, #1
 80084ea:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084ec:	2303      	movs	r3, #3
 80084ee:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084f0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80084f2:	2304      	movs	r3, #4
 80084f4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084f6:	f7fb f893 	bl	8003620 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80084fa:	9502      	str	r5, [sp, #8]
 80084fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80084fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008502:	6423      	str	r3, [r4, #64]	; 0x40
 8008504:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800850a:	9302      	str	r3, [sp, #8]
 800850c:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800850e:	b009      	add	sp, #36	; 0x24
 8008510:	bd30      	pop	{r4, r5, pc}
 8008512:	bf00      	nop
 8008514:	40005800 	.word	0x40005800
 8008518:	40023800 	.word	0x40023800
 800851c:	40020400 	.word	0x40020400

08008520 <HAL_I2C_MspDeInit>:
*/

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{

  if(hi2c->Instance==I2C2)
 8008520:	6802      	ldr	r2, [r0, #0]
 8008522:	4b07      	ldr	r3, [pc, #28]	; (8008540 <HAL_I2C_MspDeInit+0x20>)
 8008524:	429a      	cmp	r2, r3
 8008526:	d109      	bne.n	800853c <HAL_I2C_MspDeInit+0x1c>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8008528:	4a06      	ldr	r2, [pc, #24]	; (8008544 <HAL_I2C_MspDeInit+0x24>)
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, ARD_D15_Pin|ARD_D14_Pin);
 800852a:	4807      	ldr	r0, [pc, #28]	; (8008548 <HAL_I2C_MspDeInit+0x28>)
    __HAL_RCC_I2C2_CLK_DISABLE();
 800852c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800852e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8008532:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, ARD_D15_Pin|ARD_D14_Pin);
 8008534:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8008538:	f7fb b94c 	b.w	80037d4 <HAL_GPIO_DeInit>
 800853c:	4770      	bx	lr
 800853e:	bf00      	nop
 8008540:	40005800 	.word	0x40005800
 8008544:	40023800 	.word	0x40023800
 8008548:	40020400 	.word	0x40020400

0800854c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800854c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008550:	4604      	mov	r4, r0
 8008552:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008554:	2214      	movs	r2, #20
 8008556:	2100      	movs	r1, #0
 8008558:	a807      	add	r0, sp, #28
 800855a:	f000 fb45 	bl	8008be8 <memset>
  if(hqspi->Instance==QUADSPI)
 800855e:	6822      	ldr	r2, [r4, #0]
 8008560:	4b3f      	ldr	r3, [pc, #252]	; (8008660 <HAL_QSPI_MspInit+0x114>)
 8008562:	429a      	cmp	r2, r3
 8008564:	d179      	bne.n	800865a <HAL_QSPI_MspInit+0x10e>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8008566:	4b3f      	ldr	r3, [pc, #252]	; (8008664 <HAL_QSPI_MspInit+0x118>)
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8008568:	483f      	ldr	r0, [pc, #252]	; (8008668 <HAL_QSPI_MspInit+0x11c>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 800856a:	2400      	movs	r4, #0
 800856c:	9401      	str	r4, [sp, #4]
 800856e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008570:	f042 0202 	orr.w	r2, r2, #2
 8008574:	639a      	str	r2, [r3, #56]	; 0x38
 8008576:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008578:	f002 0202 	and.w	r2, r2, #2
 800857c:	9201      	str	r2, [sp, #4]
 800857e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008580:	9402      	str	r4, [sp, #8]
 8008582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008584:	f042 0210 	orr.w	r2, r2, #16
 8008588:	631a      	str	r2, [r3, #48]	; 0x30
 800858a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800858c:	f002 0210 	and.w	r2, r2, #16
 8008590:	9202      	str	r2, [sp, #8]
 8008592:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008594:	9403      	str	r4, [sp, #12]
 8008596:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008598:	f042 0220 	orr.w	r2, r2, #32
 800859c:	631a      	str	r2, [r3, #48]	; 0x30
 800859e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085a0:	f002 0220 	and.w	r2, r2, #32
 80085a4:	9203      	str	r2, [sp, #12]
 80085a6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80085a8:	9404      	str	r4, [sp, #16]
 80085aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085ac:	f042 0202 	orr.w	r2, r2, #2
 80085b0:	631a      	str	r2, [r3, #48]	; 0x30
 80085b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085b4:	f002 0202 	and.w	r2, r2, #2
 80085b8:	9204      	str	r2, [sp, #16]
 80085ba:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80085bc:	9405      	str	r4, [sp, #20]
 80085be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085c0:	f042 0208 	orr.w	r2, r2, #8
 80085c4:	631a      	str	r2, [r3, #48]	; 0x30
 80085c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085c8:	f002 0208 	and.w	r2, r2, #8
 80085cc:	9205      	str	r2, [sp, #20]
 80085ce:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80085d0:	9406      	str	r4, [sp, #24]
 80085d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085d8:	631a      	str	r2, [r3, #48]	; 0x30
 80085da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085e0:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085e2:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80085e4:	2709      	movs	r7, #9
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80085e6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 80085e8:	f04f 0904 	mov.w	r9, #4
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 80085ec:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80085ee:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 80085f0:	f8cd 901c 	str.w	r9, [sp, #28]

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80085f4:	f04f 080a 	mov.w	r8, #10
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085f8:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085fa:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80085fc:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 80085fe:	f7fb f80f 	bl	8003620 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8008602:	f44f 7340 	mov.w	r3, #768	; 0x300
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008606:	a907      	add	r1, sp, #28
 8008608:	4818      	ldr	r0, [pc, #96]	; (800866c <HAL_QSPI_MspInit+0x120>)
    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 800860a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800860c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800860e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008610:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008612:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008616:	f7fb f803 	bl	8003620 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 800861a:	a907      	add	r1, sp, #28
 800861c:	4814      	ldr	r0, [pc, #80]	; (8008670 <HAL_QSPI_MspInit+0x124>)
    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 800861e:	f8cd 901c 	str.w	r9, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008622:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008624:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008626:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8008628:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 800862a:	f7fa fff9 	bl	8003620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 800862e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 8008632:	a907      	add	r1, sp, #28
 8008634:	480f      	ldr	r0, [pc, #60]	; (8008674 <HAL_QSPI_MspInit+0x128>)
    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 8008636:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008638:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800863a:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800863c:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 800863e:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 8008640:	f7fa ffee 	bl	8003620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8008644:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8008646:	a907      	add	r1, sp, #28
 8008648:	480b      	ldr	r0, [pc, #44]	; (8008678 <HAL_QSPI_MspInit+0x12c>)
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 800864a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800864c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800864e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008650:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008652:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8008656:	f7fa ffe3 	bl	8003620 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800865a:	b00d      	add	sp, #52	; 0x34
 800865c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008660:	a0001000 	.word	0xa0001000
 8008664:	40023800 	.word	0x40023800
 8008668:	40021000 	.word	0x40021000
 800866c:	40021400 	.word	0x40021400
 8008670:	40020400 	.word	0x40020400
 8008674:	40020c00 	.word	0x40020c00
 8008678:	40021800 	.word	0x40021800

0800867c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800867c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800867e:	4604      	mov	r4, r0
 8008680:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008682:	2214      	movs	r2, #20
 8008684:	2100      	movs	r1, #0
 8008686:	a803      	add	r0, sp, #12
 8008688:	f000 faae 	bl	8008be8 <memset>
  if(hsd->Instance==SDIO)
 800868c:	6822      	ldr	r2, [r4, #0]
 800868e:	4b1f      	ldr	r3, [pc, #124]	; (800870c <HAL_SD_MspInit+0x90>)
 8008690:	429a      	cmp	r2, r3
 8008692:	d139      	bne.n	8008708 <HAL_SD_MspInit+0x8c>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8008694:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8008698:	2400      	movs	r4, #0
 800869a:	9400      	str	r4, [sp, #0]
 800869c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = SD_CMD_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 800869e:	481c      	ldr	r0, [pc, #112]	; (8008710 <HAL_SD_MspInit+0x94>)
    __HAL_RCC_SDIO_CLK_ENABLE();
 80086a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086a4:	645a      	str	r2, [r3, #68]	; 0x44
 80086a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086a8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80086ac:	9200      	str	r2, [sp, #0]
 80086ae:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086b0:	9401      	str	r4, [sp, #4]
 80086b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086b4:	f042 0201 	orr.w	r2, r2, #1
 80086b8:	631a      	str	r2, [r3, #48]	; 0x30
 80086ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086bc:	f002 0201 	and.w	r2, r2, #1
 80086c0:	9201      	str	r2, [sp, #4]
 80086c2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80086c4:	9402      	str	r4, [sp, #8]
 80086c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086c8:	f042 0204 	orr.w	r2, r2, #4
 80086cc:	631a      	str	r2, [r3, #48]	; 0x30
 80086ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d0:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80086d4:	250c      	movs	r5, #12
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80086d6:	9302      	str	r3, [sp, #8]
 80086d8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80086da:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 80086dc:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086de:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086e0:	2603      	movs	r6, #3
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 80086e2:	eb0d 0105 	add.w	r1, sp, r5
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 80086e6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086e8:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086ea:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 80086ec:	f7fa ff98 	bl	8003620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin 
 80086f0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
                          |SD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80086f4:	eb0d 0105 	add.w	r1, sp, r5
 80086f8:	4806      	ldr	r0, [pc, #24]	; (8008714 <HAL_SD_MspInit+0x98>)
    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin 
 80086fa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086fc:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086fe:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008700:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8008702:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008704:	f7fa ff8c 	bl	8003620 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8008708:	b009      	add	sp, #36	; 0x24
 800870a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800870c:	40012c00 	.word	0x40012c00
 8008710:	40020000 	.word	0x40020000
 8008714:	40020800 	.word	0x40020800

08008718 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008718:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800871a:	2214      	movs	r2, #20
{
 800871c:	b08a      	sub	sp, #40	; 0x28
 800871e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008720:	2100      	movs	r1, #0
 8008722:	eb0d 0002 	add.w	r0, sp, r2
 8008726:	f000 fa5f 	bl	8008be8 <memset>
  if(huart->Instance==UART10)
 800872a:	6823      	ldr	r3, [r4, #0]
 800872c:	4a26      	ldr	r2, [pc, #152]	; (80087c8 <HAL_UART_MspInit+0xb0>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d126      	bne.n	8008780 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN UART10_MspInit 0 */

  /* USER CODE END UART10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART10_CLK_ENABLE();
 8008732:	4b26      	ldr	r3, [pc, #152]	; (80087cc <HAL_UART_MspInit+0xb4>)
 8008734:	2100      	movs	r1, #0
 8008736:	9101      	str	r1, [sp, #4]
 8008738:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800873a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800873e:	645a      	str	r2, [r3, #68]	; 0x44
 8008740:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008742:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8008746:	9201      	str	r2, [sp, #4]
 8008748:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800874a:	9102      	str	r1, [sp, #8]
 800874c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800874e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008752:	631a      	str	r2, [r3, #48]	; 0x30
 8008754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800875a:	9302      	str	r3, [sp, #8]
 800875c:	9b02      	ldr	r3, [sp, #8]
    /**UART10 GPIO Configuration    
    PG11     ------> UART10_RX
    PG12     ------> UART10_TX 
    */
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 800875e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008762:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008764:	2302      	movs	r3, #2
 8008766:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008768:	2301      	movs	r3, #1
 800876a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800876c:	2303      	movs	r3, #3
 800876e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 8008770:	230b      	movs	r3, #11
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008772:	a905      	add	r1, sp, #20
 8008774:	4816      	ldr	r0, [pc, #88]	; (80087d0 <HAL_UART_MspInit+0xb8>)
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8008776:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008778:	f7fa ff52 	bl	8003620 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800877c:	b00a      	add	sp, #40	; 0x28
 800877e:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART6)
 8008780:	4a14      	ldr	r2, [pc, #80]	; (80087d4 <HAL_UART_MspInit+0xbc>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d1fa      	bne.n	800877c <HAL_UART_MspInit+0x64>
    __HAL_RCC_USART6_CLK_ENABLE();
 8008786:	4b11      	ldr	r3, [pc, #68]	; (80087cc <HAL_UART_MspInit+0xb4>)
 8008788:	2100      	movs	r1, #0
 800878a:	9103      	str	r1, [sp, #12]
 800878c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800878e:	f042 0220 	orr.w	r2, r2, #32
 8008792:	645a      	str	r2, [r3, #68]	; 0x44
 8008794:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008796:	f002 0220 	and.w	r2, r2, #32
 800879a:	9203      	str	r2, [sp, #12]
 800879c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800879e:	9104      	str	r1, [sp, #16]
 80087a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087a6:	631a      	str	r2, [r3, #48]	; 0x30
 80087a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ae:	9304      	str	r3, [sp, #16]
 80087b0:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 80087b2:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80087b6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087b8:	2302      	movs	r3, #2
 80087ba:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80087bc:	2301      	movs	r3, #1
 80087be:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087c0:	2303      	movs	r3, #3
 80087c2:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80087c4:	2308      	movs	r3, #8
 80087c6:	e7d4      	b.n	8008772 <HAL_UART_MspInit+0x5a>
 80087c8:	40011c00 	.word	0x40011c00
 80087cc:	40023800 	.word	0x40023800
 80087d0:	40021800 	.word	0x40021800
 80087d4:	40011400 	.word	0x40011400

080087d8 <HAL_SRAM_MspInit>:
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80087d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FSMC_Initialized) {
 80087da:	4b21      	ldr	r3, [pc, #132]	; (8008860 <HAL_SRAM_MspInit+0x88>)
 80087dc:	681c      	ldr	r4, [r3, #0]
void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80087de:	b087      	sub	sp, #28
  if (FSMC_Initialized) {
 80087e0:	2c00      	cmp	r4, #0
 80087e2:	d13b      	bne.n	800885c <HAL_SRAM_MspInit+0x84>
  FSMC_Initialized = 1;
 80087e4:	2201      	movs	r2, #1
 80087e6:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FSMC_CLK_ENABLE();
 80087e8:	4b1e      	ldr	r3, [pc, #120]	; (8008864 <HAL_SRAM_MspInit+0x8c>)
 80087ea:	9400      	str	r4, [sp, #0]
 80087ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80087ee:	481e      	ldr	r0, [pc, #120]	; (8008868 <HAL_SRAM_MspInit+0x90>)
  __HAL_RCC_FSMC_CLK_ENABLE();
 80087f0:	f042 0201 	orr.w	r2, r2, #1
 80087f4:	639a      	str	r2, [r3, #56]	; 0x38
 80087f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087f8:	9403      	str	r4, [sp, #12]
  __HAL_RCC_FSMC_CLK_ENABLE();
 80087fa:	f003 0301 	and.w	r3, r3, #1
 80087fe:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008800:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008802:	2603      	movs	r6, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8008804:	250c      	movs	r5, #12
  __HAL_RCC_FSMC_CLK_ENABLE();
 8008806:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008808:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin 
 800880a:	f24f 033f 	movw	r3, #61503	; 0xf03f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800880e:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin 
 8008810:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008812:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8008814:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008816:	f7fa ff03 	bl	8003620 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin 
 800881a:	f240 433f 	movw	r3, #1087	; 0x43f
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800881e:	a901      	add	r1, sp, #4
 8008820:	4812      	ldr	r0, [pc, #72]	; (800886c <HAL_SRAM_MspInit+0x94>)
  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin 
 8008822:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008824:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008826:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008828:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800882a:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800882c:	f7fa fef8 	bl	8003620 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin 
 8008830:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008834:	a901      	add	r1, sp, #4
 8008836:	480e      	ldr	r0, [pc, #56]	; (8008870 <HAL_SRAM_MspInit+0x98>)
  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin 
 8008838:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800883a:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800883c:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800883e:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8008840:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008842:	f7fa feed 	bl	8003620 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin 
 8008846:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800884a:	a901      	add	r1, sp, #4
 800884c:	4809      	ldr	r0, [pc, #36]	; (8008874 <HAL_SRAM_MspInit+0x9c>)
  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin 
 800884e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008850:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008852:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008854:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8008856:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008858:	f7fa fee2 	bl	8003620 <HAL_GPIO_Init>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800885c:	b007      	add	sp, #28
 800885e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008860:	200002cc 	.word	0x200002cc
 8008864:	40023800 	.word	0x40023800
 8008868:	40021400 	.word	0x40021400
 800886c:	40021800 	.word	0x40021800
 8008870:	40021000 	.word	0x40021000
 8008874:	40020c00 	.word	0x40020c00

08008878 <NMI_Handler>:
 8008878:	4770      	bx	lr

0800887a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800887a:	e7fe      	b.n	800887a <HardFault_Handler>

0800887c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800887c:	e7fe      	b.n	800887c <MemManage_Handler>

0800887e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800887e:	e7fe      	b.n	800887e <BusFault_Handler>

08008880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008880:	e7fe      	b.n	8008880 <UsageFault_Handler>

08008882 <SVC_Handler>:
 8008882:	4770      	bx	lr

08008884 <DebugMon_Handler>:
 8008884:	4770      	bx	lr

08008886 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008886:	4770      	bx	lr

08008888 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008888:	f7fa bb86 	b.w	8002f98 <HAL_IncTick>

0800888c <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800888c:	4801      	ldr	r0, [pc, #4]	; (8008894 <OTG_FS_IRQHandler+0x8>)
 800888e:	f7fb b939 	b.w	8003b04 <HAL_HCD_IRQHandler>
 8008892:	bf00      	nop
 8008894:	20000ad8 	.word	0x20000ad8

08008898 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008898:	490f      	ldr	r1, [pc, #60]	; (80088d8 <SystemInit+0x40>)
 800889a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800889e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80088a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80088a6:	4b0d      	ldr	r3, [pc, #52]	; (80088dc <SystemInit+0x44>)
 80088a8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80088aa:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80088ac:	f042 0201 	orr.w	r2, r2, #1
 80088b0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80088b2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80088ba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80088be:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80088c0:	4a07      	ldr	r2, [pc, #28]	; (80088e0 <SystemInit+0x48>)
 80088c2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80088ca:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80088cc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80088ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80088d2:	608b      	str	r3, [r1, #8]
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop
 80088d8:	e000ed00 	.word	0xe000ed00
 80088dc:	40023800 	.word	0x40023800
 80088e0:	24003010 	.word	0x24003010

080088e4 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80088e4:	2904      	cmp	r1, #4
 80088e6:	d00a      	beq.n	80088fe <USBH_UserProcess+0x1a>
 80088e8:	2905      	cmp	r1, #5
 80088ea:	d004      	beq.n	80088f6 <USBH_UserProcess+0x12>
 80088ec:	2902      	cmp	r1, #2
 80088ee:	d105      	bne.n	80088fc <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80088f0:	4b04      	ldr	r3, [pc, #16]	; (8008904 <USBH_UserProcess+0x20>)
 80088f2:	7019      	strb	r1, [r3, #0]
  break;
 80088f4:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 80088f6:	2203      	movs	r2, #3

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80088f8:	4b02      	ldr	r3, [pc, #8]	; (8008904 <USBH_UserProcess+0x20>)
 80088fa:	701a      	strb	r2, [r3, #0]
 80088fc:	4770      	bx	lr
 80088fe:	2201      	movs	r2, #1
 8008900:	e7fa      	b.n	80088f8 <USBH_UserProcess+0x14>
 8008902:	bf00      	nop
 8008904:	200002d0 	.word	0x200002d0

08008908 <MX_USB_HOST_Init>:
{
 8008908:	b510      	push	{r4, lr}
  USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS);
 800890a:	4c07      	ldr	r4, [pc, #28]	; (8008928 <MX_USB_HOST_Init+0x20>)
 800890c:	4907      	ldr	r1, [pc, #28]	; (800892c <MX_USB_HOST_Init+0x24>)
 800890e:	2201      	movs	r2, #1
 8008910:	4620      	mov	r0, r4
 8008912:	f7fe faeb 	bl	8006eec <USBH_Init>
  USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS);
 8008916:	4620      	mov	r0, r4
 8008918:	4905      	ldr	r1, [pc, #20]	; (8008930 <MX_USB_HOST_Init+0x28>)
 800891a:	f7fe fafe 	bl	8006f1a <USBH_RegisterClass>
  USBH_Start(&hUsbHostFS);
 800891e:	4620      	mov	r0, r4
}
 8008920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBH_Start(&hUsbHostFS);
 8008924:	f7fe bb2c 	b.w	8006f80 <USBH_Start>
 8008928:	20000710 	.word	0x20000710
 800892c:	080088e5 	.word	0x080088e5
 8008930:	2000011c 	.word	0x2000011c

08008934 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008934:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcdHandle->Instance==USB_OTG_FS)
 8008936:	6803      	ldr	r3, [r0, #0]
 8008938:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 800893c:	b086      	sub	sp, #24
  if(hcdHandle->Instance==USB_OTG_FS)
 800893e:	d12e      	bne.n	800899e <HAL_HCD_MspInit+0x6a>
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008940:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8008942:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8008946:	a901      	add	r1, sp, #4
 8008948:	4816      	ldr	r0, [pc, #88]	; (80089a4 <HAL_HCD_MspInit+0x70>)
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800894a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800894c:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800894e:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8008950:	f7fa fe66 	bl	8003620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8008954:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008958:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800895a:	2302      	movs	r3, #2
 800895c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800895e:	2303      	movs	r3, #3
 8008960:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008962:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008964:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008966:	480f      	ldr	r0, [pc, #60]	; (80089a4 <HAL_HCD_MspInit+0x70>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008968:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800896a:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800896c:	f7fa fe58 	bl	8003620 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008970:	4b0d      	ldr	r3, [pc, #52]	; (80089a8 <HAL_HCD_MspInit+0x74>)
 8008972:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008974:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008978:	635a      	str	r2, [r3, #52]	; 0x34
 800897a:	9400      	str	r4, [sp, #0]
 800897c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800897e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008982:	645a      	str	r2, [r3, #68]	; 0x44
 8008984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800898a:	9300      	str	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800898c:	2043      	movs	r0, #67	; 0x43
 800898e:	4622      	mov	r2, r4
 8008990:	4621      	mov	r1, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008992:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008994:	f7fa fc72 	bl	800327c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008998:	2043      	movs	r0, #67	; 0x43
 800899a:	f7fa fca3 	bl	80032e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800899e:	b006      	add	sp, #24
 80089a0:	bd10      	pop	{r4, pc}
 80089a2:	bf00      	nop
 80089a4:	40020000 	.word	0x40020000
 80089a8:	40023800 	.word	0x40023800

080089ac <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 80089ac:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 80089b0:	f7fe baf3 	b.w	8006f9a <USBH_LL_IncTimer>

080089b4 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 80089b4:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 80089b8:	f7fe bafd 	b.w	8006fb6 <USBH_LL_Connect>

080089bc <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 80089bc:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 80089c0:	f7fe bb0c 	b.w	8006fdc <USBH_LL_Disconnect>

080089c4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80089c4:	4770      	bx	lr
	...

080089c8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80089c8:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80089ca:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80089ce:	2b01      	cmp	r3, #1
{
 80089d0:	4604      	mov	r4, r0
  if (phost->id == HOST_FS) {
 80089d2:	d11c      	bne.n	8008a0e <USBH_LL_Init+0x46>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80089d4:	480f      	ldr	r0, [pc, #60]	; (8008a14 <USBH_LL_Init+0x4c>)
  phost->pData = &hhcd_USB_OTG_FS;
 80089d6:	f8c4 03c0 	str.w	r0, [r4, #960]	; 0x3c0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80089da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80089de:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 80089e0:	230c      	movs	r3, #12
 80089e2:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80089e4:	2303      	movs	r3, #3
 80089e6:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80089e8:	2202      	movs	r2, #2
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80089ea:	2300      	movs	r3, #0
  hhcd_USB_OTG_FS.pData = phost;
 80089ec:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80089f0:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80089f2:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80089f4:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80089f6:	f7fa ffc9 	bl	800398c <HAL_HCD_Init>
 80089fa:	b108      	cbz	r0, 8008a00 <USBH_LL_Init+0x38>
  {
    Error_Handler( );
 80089fc:	f7ff fbbc 	bl	8008178 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008a00:	4804      	ldr	r0, [pc, #16]	; (8008a14 <USBH_LL_Init+0x4c>)
 8008a02:	f7fb fbc0 	bl	8004186 <HAL_HCD_GetCurrentFrame>
 8008a06:	4601      	mov	r1, r0
 8008a08:	4620      	mov	r0, r4
 8008a0a:	f7fe fac3 	bl	8006f94 <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 8008a0e:	2000      	movs	r0, #0
 8008a10:	bd10      	pop	{r4, pc}
 8008a12:	bf00      	nop
 8008a14:	20000ad8 	.word	0x20000ad8

08008a18 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008a18:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 8008a1a:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8008a1e:	f7fb fb7f 	bl	8004120 <HAL_HCD_Start>
 8008a22:	2803      	cmp	r0, #3
 8008a24:	bf9a      	itte	ls
 8008a26:	4b02      	ldrls	r3, [pc, #8]	; (8008a30 <USBH_LL_Start+0x18>)
 8008a28:	5c18      	ldrbls	r0, [r3, r0]
 8008a2a:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8008a2c:	bd08      	pop	{r3, pc}
 8008a2e:	bf00      	nop
 8008a30:	0800bc03 	.word	0x0800bc03

08008a34 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008a34:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 8008a36:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8008a3a:	f7fb fb87 	bl	800414c <HAL_HCD_Stop>
 8008a3e:	2803      	cmp	r0, #3
 8008a40:	bf9a      	itte	ls
 8008a42:	4b02      	ldrls	r3, [pc, #8]	; (8008a4c <USBH_LL_Stop+0x18>)
 8008a44:	5c18      	ldrbls	r0, [r3, r0]
 8008a46:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8008a48:	bd08      	pop	{r3, pc}
 8008a4a:	bf00      	nop
 8008a4c:	0800bc03 	.word	0x0800bc03

08008a50 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008a50:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8008a54:	f7fb bb92 	b.w	800417c <HAL_HCD_HC_GetXferCount>

08008a58 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008a58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008a5a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8008a5e:	9402      	str	r4, [sp, #8]
 8008a60:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8008a64:	9401      	str	r4, [sp, #4]
 8008a66:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8008a6a:	9400      	str	r4, [sp, #0]
 8008a6c:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8008a70:	f7fa ff49 	bl	8003906 <HAL_HCD_HC_Init>
 8008a74:	2803      	cmp	r0, #3
 8008a76:	bf9a      	itte	ls
 8008a78:	4b02      	ldrls	r3, [pc, #8]	; (8008a84 <USBH_LL_OpenPipe+0x2c>)
 8008a7a:	5c18      	ldrbls	r0, [r3, r0]
 8008a7c:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8008a7e:	b004      	add	sp, #16
 8008a80:	bd10      	pop	{r4, pc}
 8008a82:	bf00      	nop
 8008a84:	0800bc03 	.word	0x0800bc03

08008a88 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008a88:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008a8a:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8008a8e:	f7fa ff6b 	bl	8003968 <HAL_HCD_HC_Halt>
 8008a92:	2803      	cmp	r0, #3
 8008a94:	bf9a      	itte	ls
 8008a96:	4b02      	ldrls	r3, [pc, #8]	; (8008aa0 <USBH_LL_ClosePipe+0x18>)
 8008a98:	5c18      	ldrbls	r0, [r3, r0]
 8008a9a:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8008a9c:	bd08      	pop	{r3, pc}
 8008a9e:	bf00      	nop
 8008aa0:	0800bc03 	.word	0x0800bc03

08008aa4 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008aa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008aa6:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8008aaa:	9403      	str	r4, [sp, #12]
 8008aac:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8008ab0:	9402      	str	r4, [sp, #8]
 8008ab2:	9c07      	ldr	r4, [sp, #28]
 8008ab4:	9401      	str	r4, [sp, #4]
 8008ab6:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8008aba:	9400      	str	r4, [sp, #0]
 8008abc:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8008ac0:	f7fa ffa0 	bl	8003a04 <HAL_HCD_HC_SubmitRequest>
 8008ac4:	2803      	cmp	r0, #3
 8008ac6:	bf9a      	itte	ls
 8008ac8:	4b02      	ldrls	r3, [pc, #8]	; (8008ad4 <USBH_LL_SubmitURB+0x30>)
 8008aca:	5c18      	ldrbls	r0, [r3, r0]
 8008acc:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8008ace:	b004      	add	sp, #16
 8008ad0:	bd10      	pop	{r4, pc}
 8008ad2:	bf00      	nop
 8008ad4:	0800bc03 	.word	0x0800bc03

08008ad8 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008ad8:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8008adc:	f7fb bb48 	b.w	8004170 <HAL_HCD_HC_GetURBState>

08008ae0 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008ae0:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 8008ae2:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d102      	bne.n	8008af0 <USBH_LL_DriverVBUS+0x10>
    MX_DriverVbusFS(state);
 8008aea:	4608      	mov	r0, r1
 8008aec:	f000 f814 	bl	8008b18 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008af0:	20c8      	movs	r0, #200	; 0xc8
 8008af2:	f7fa fa63 	bl	8002fbc <HAL_Delay>
  return USBH_OK;
}
 8008af6:	2000      	movs	r0, #0
 8008af8:	bd08      	pop	{r3, pc}

08008afa <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008afa:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0

  if(pHandle->hc[pipe].ep_is_in)
 8008afe:	2328      	movs	r3, #40	; 0x28
 8008b00:	fb03 0101 	mla	r1, r3, r1, r0
 8008b04:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 8008b08:	b11b      	cbz	r3, 8008b12 <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008b0a:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 8008b0e:	2000      	movs	r0, #0
 8008b10:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 8008b12:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 8008b16:	e7fa      	b.n	8008b0e <USBH_LL_SetToggle+0x14>

08008b18 <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 8008b18:	fab0 f280 	clz	r2, r0
 8008b1c:	0952      	lsrs	r2, r2, #5
 8008b1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008b22:	4801      	ldr	r0, [pc, #4]	; (8008b28 <MX_DriverVbusFS+0x10>)
 8008b24:	f7fa beea 	b.w	80038fc <HAL_GPIO_WritePin>
 8008b28:	40021800 	.word	0x40021800

08008b2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8008b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008b64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8008b30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008b32:	e003      	b.n	8008b3c <LoopCopyDataInit>

08008b34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008b34:	4b0c      	ldr	r3, [pc, #48]	; (8008b68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008b36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008b38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008b3a:	3104      	adds	r1, #4

08008b3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008b3c:	480b      	ldr	r0, [pc, #44]	; (8008b6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008b3e:	4b0c      	ldr	r3, [pc, #48]	; (8008b70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008b40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008b42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008b44:	d3f6      	bcc.n	8008b34 <CopyDataInit>
  ldr  r2, =_sbss
 8008b46:	4a0b      	ldr	r2, [pc, #44]	; (8008b74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008b48:	e002      	b.n	8008b50 <LoopFillZerobss>

08008b4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8008b4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008b4c:	f842 3b04 	str.w	r3, [r2], #4

08008b50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008b50:	4b09      	ldr	r3, [pc, #36]	; (8008b78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008b52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008b54:	d3f9      	bcc.n	8008b4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008b56:	f7ff fe9f 	bl	8008898 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008b5a:	f000 f811 	bl	8008b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008b5e:	f7fe ffa7 	bl	8007ab0 <main>
  bx  lr    
 8008b62:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8008b64:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8008b68:	0800bcb0 	.word	0x0800bcb0
  ldr  r0, =_sdata
 8008b6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008b70:	200001a4 	.word	0x200001a4
  ldr  r2, =_sbss
 8008b74:	200001a4 	.word	0x200001a4
  ldr  r3, = _ebss
 8008b78:	20000d74 	.word	0x20000d74

08008b7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008b7c:	e7fe      	b.n	8008b7c <ADC_IRQHandler>
	...

08008b80 <__libc_init_array>:
 8008b80:	b570      	push	{r4, r5, r6, lr}
 8008b82:	4e0d      	ldr	r6, [pc, #52]	; (8008bb8 <__libc_init_array+0x38>)
 8008b84:	4c0d      	ldr	r4, [pc, #52]	; (8008bbc <__libc_init_array+0x3c>)
 8008b86:	1ba4      	subs	r4, r4, r6
 8008b88:	10a4      	asrs	r4, r4, #2
 8008b8a:	2500      	movs	r5, #0
 8008b8c:	42a5      	cmp	r5, r4
 8008b8e:	d109      	bne.n	8008ba4 <__libc_init_array+0x24>
 8008b90:	4e0b      	ldr	r6, [pc, #44]	; (8008bc0 <__libc_init_array+0x40>)
 8008b92:	4c0c      	ldr	r4, [pc, #48]	; (8008bc4 <__libc_init_array+0x44>)
 8008b94:	f001 f83c 	bl	8009c10 <_init>
 8008b98:	1ba4      	subs	r4, r4, r6
 8008b9a:	10a4      	asrs	r4, r4, #2
 8008b9c:	2500      	movs	r5, #0
 8008b9e:	42a5      	cmp	r5, r4
 8008ba0:	d105      	bne.n	8008bae <__libc_init_array+0x2e>
 8008ba2:	bd70      	pop	{r4, r5, r6, pc}
 8008ba4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ba8:	4798      	blx	r3
 8008baa:	3501      	adds	r5, #1
 8008bac:	e7ee      	b.n	8008b8c <__libc_init_array+0xc>
 8008bae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008bb2:	4798      	blx	r3
 8008bb4:	3501      	adds	r5, #1
 8008bb6:	e7f2      	b.n	8008b9e <__libc_init_array+0x1e>
 8008bb8:	0800bca8 	.word	0x0800bca8
 8008bbc:	0800bca8 	.word	0x0800bca8
 8008bc0:	0800bca8 	.word	0x0800bca8
 8008bc4:	0800bcac 	.word	0x0800bcac

08008bc8 <malloc>:
 8008bc8:	4b02      	ldr	r3, [pc, #8]	; (8008bd4 <malloc+0xc>)
 8008bca:	4601      	mov	r1, r0
 8008bcc:	6818      	ldr	r0, [r3, #0]
 8008bce:	f000 b861 	b.w	8008c94 <_malloc_r>
 8008bd2:	bf00      	nop
 8008bd4:	20000140 	.word	0x20000140

08008bd8 <free>:
 8008bd8:	4b02      	ldr	r3, [pc, #8]	; (8008be4 <free+0xc>)
 8008bda:	4601      	mov	r1, r0
 8008bdc:	6818      	ldr	r0, [r3, #0]
 8008bde:	f000 b80b 	b.w	8008bf8 <_free_r>
 8008be2:	bf00      	nop
 8008be4:	20000140 	.word	0x20000140

08008be8 <memset>:
 8008be8:	4402      	add	r2, r0
 8008bea:	4603      	mov	r3, r0
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d100      	bne.n	8008bf2 <memset+0xa>
 8008bf0:	4770      	bx	lr
 8008bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8008bf6:	e7f9      	b.n	8008bec <memset+0x4>

08008bf8 <_free_r>:
 8008bf8:	b538      	push	{r3, r4, r5, lr}
 8008bfa:	4605      	mov	r5, r0
 8008bfc:	2900      	cmp	r1, #0
 8008bfe:	d045      	beq.n	8008c8c <_free_r+0x94>
 8008c00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c04:	1f0c      	subs	r4, r1, #4
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	bfb8      	it	lt
 8008c0a:	18e4      	addlt	r4, r4, r3
 8008c0c:	f000 fbd8 	bl	80093c0 <__malloc_lock>
 8008c10:	4a1f      	ldr	r2, [pc, #124]	; (8008c90 <_free_r+0x98>)
 8008c12:	6813      	ldr	r3, [r2, #0]
 8008c14:	4610      	mov	r0, r2
 8008c16:	b933      	cbnz	r3, 8008c26 <_free_r+0x2e>
 8008c18:	6063      	str	r3, [r4, #4]
 8008c1a:	6014      	str	r4, [r2, #0]
 8008c1c:	4628      	mov	r0, r5
 8008c1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c22:	f000 bbce 	b.w	80093c2 <__malloc_unlock>
 8008c26:	42a3      	cmp	r3, r4
 8008c28:	d90c      	bls.n	8008c44 <_free_r+0x4c>
 8008c2a:	6821      	ldr	r1, [r4, #0]
 8008c2c:	1862      	adds	r2, r4, r1
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	bf04      	itt	eq
 8008c32:	681a      	ldreq	r2, [r3, #0]
 8008c34:	685b      	ldreq	r3, [r3, #4]
 8008c36:	6063      	str	r3, [r4, #4]
 8008c38:	bf04      	itt	eq
 8008c3a:	1852      	addeq	r2, r2, r1
 8008c3c:	6022      	streq	r2, [r4, #0]
 8008c3e:	6004      	str	r4, [r0, #0]
 8008c40:	e7ec      	b.n	8008c1c <_free_r+0x24>
 8008c42:	4613      	mov	r3, r2
 8008c44:	685a      	ldr	r2, [r3, #4]
 8008c46:	b10a      	cbz	r2, 8008c4c <_free_r+0x54>
 8008c48:	42a2      	cmp	r2, r4
 8008c4a:	d9fa      	bls.n	8008c42 <_free_r+0x4a>
 8008c4c:	6819      	ldr	r1, [r3, #0]
 8008c4e:	1858      	adds	r0, r3, r1
 8008c50:	42a0      	cmp	r0, r4
 8008c52:	d10b      	bne.n	8008c6c <_free_r+0x74>
 8008c54:	6820      	ldr	r0, [r4, #0]
 8008c56:	4401      	add	r1, r0
 8008c58:	1858      	adds	r0, r3, r1
 8008c5a:	4282      	cmp	r2, r0
 8008c5c:	6019      	str	r1, [r3, #0]
 8008c5e:	d1dd      	bne.n	8008c1c <_free_r+0x24>
 8008c60:	6810      	ldr	r0, [r2, #0]
 8008c62:	6852      	ldr	r2, [r2, #4]
 8008c64:	605a      	str	r2, [r3, #4]
 8008c66:	4401      	add	r1, r0
 8008c68:	6019      	str	r1, [r3, #0]
 8008c6a:	e7d7      	b.n	8008c1c <_free_r+0x24>
 8008c6c:	d902      	bls.n	8008c74 <_free_r+0x7c>
 8008c6e:	230c      	movs	r3, #12
 8008c70:	602b      	str	r3, [r5, #0]
 8008c72:	e7d3      	b.n	8008c1c <_free_r+0x24>
 8008c74:	6820      	ldr	r0, [r4, #0]
 8008c76:	1821      	adds	r1, r4, r0
 8008c78:	428a      	cmp	r2, r1
 8008c7a:	bf04      	itt	eq
 8008c7c:	6811      	ldreq	r1, [r2, #0]
 8008c7e:	6852      	ldreq	r2, [r2, #4]
 8008c80:	6062      	str	r2, [r4, #4]
 8008c82:	bf04      	itt	eq
 8008c84:	1809      	addeq	r1, r1, r0
 8008c86:	6021      	streq	r1, [r4, #0]
 8008c88:	605c      	str	r4, [r3, #4]
 8008c8a:	e7c7      	b.n	8008c1c <_free_r+0x24>
 8008c8c:	bd38      	pop	{r3, r4, r5, pc}
 8008c8e:	bf00      	nop
 8008c90:	200002d4 	.word	0x200002d4

08008c94 <_malloc_r>:
 8008c94:	b570      	push	{r4, r5, r6, lr}
 8008c96:	1ccd      	adds	r5, r1, #3
 8008c98:	f025 0503 	bic.w	r5, r5, #3
 8008c9c:	3508      	adds	r5, #8
 8008c9e:	2d0c      	cmp	r5, #12
 8008ca0:	bf38      	it	cc
 8008ca2:	250c      	movcc	r5, #12
 8008ca4:	2d00      	cmp	r5, #0
 8008ca6:	4606      	mov	r6, r0
 8008ca8:	db01      	blt.n	8008cae <_malloc_r+0x1a>
 8008caa:	42a9      	cmp	r1, r5
 8008cac:	d903      	bls.n	8008cb6 <_malloc_r+0x22>
 8008cae:	230c      	movs	r3, #12
 8008cb0:	6033      	str	r3, [r6, #0]
 8008cb2:	2000      	movs	r0, #0
 8008cb4:	bd70      	pop	{r4, r5, r6, pc}
 8008cb6:	f000 fb83 	bl	80093c0 <__malloc_lock>
 8008cba:	4a23      	ldr	r2, [pc, #140]	; (8008d48 <_malloc_r+0xb4>)
 8008cbc:	6814      	ldr	r4, [r2, #0]
 8008cbe:	4621      	mov	r1, r4
 8008cc0:	b991      	cbnz	r1, 8008ce8 <_malloc_r+0x54>
 8008cc2:	4c22      	ldr	r4, [pc, #136]	; (8008d4c <_malloc_r+0xb8>)
 8008cc4:	6823      	ldr	r3, [r4, #0]
 8008cc6:	b91b      	cbnz	r3, 8008cd0 <_malloc_r+0x3c>
 8008cc8:	4630      	mov	r0, r6
 8008cca:	f000 f8a5 	bl	8008e18 <_sbrk_r>
 8008cce:	6020      	str	r0, [r4, #0]
 8008cd0:	4629      	mov	r1, r5
 8008cd2:	4630      	mov	r0, r6
 8008cd4:	f000 f8a0 	bl	8008e18 <_sbrk_r>
 8008cd8:	1c43      	adds	r3, r0, #1
 8008cda:	d126      	bne.n	8008d2a <_malloc_r+0x96>
 8008cdc:	230c      	movs	r3, #12
 8008cde:	6033      	str	r3, [r6, #0]
 8008ce0:	4630      	mov	r0, r6
 8008ce2:	f000 fb6e 	bl	80093c2 <__malloc_unlock>
 8008ce6:	e7e4      	b.n	8008cb2 <_malloc_r+0x1e>
 8008ce8:	680b      	ldr	r3, [r1, #0]
 8008cea:	1b5b      	subs	r3, r3, r5
 8008cec:	d41a      	bmi.n	8008d24 <_malloc_r+0x90>
 8008cee:	2b0b      	cmp	r3, #11
 8008cf0:	d90f      	bls.n	8008d12 <_malloc_r+0x7e>
 8008cf2:	600b      	str	r3, [r1, #0]
 8008cf4:	50cd      	str	r5, [r1, r3]
 8008cf6:	18cc      	adds	r4, r1, r3
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	f000 fb62 	bl	80093c2 <__malloc_unlock>
 8008cfe:	f104 000b 	add.w	r0, r4, #11
 8008d02:	1d23      	adds	r3, r4, #4
 8008d04:	f020 0007 	bic.w	r0, r0, #7
 8008d08:	1ac3      	subs	r3, r0, r3
 8008d0a:	d01b      	beq.n	8008d44 <_malloc_r+0xb0>
 8008d0c:	425a      	negs	r2, r3
 8008d0e:	50e2      	str	r2, [r4, r3]
 8008d10:	bd70      	pop	{r4, r5, r6, pc}
 8008d12:	428c      	cmp	r4, r1
 8008d14:	bf0d      	iteet	eq
 8008d16:	6863      	ldreq	r3, [r4, #4]
 8008d18:	684b      	ldrne	r3, [r1, #4]
 8008d1a:	6063      	strne	r3, [r4, #4]
 8008d1c:	6013      	streq	r3, [r2, #0]
 8008d1e:	bf18      	it	ne
 8008d20:	460c      	movne	r4, r1
 8008d22:	e7e9      	b.n	8008cf8 <_malloc_r+0x64>
 8008d24:	460c      	mov	r4, r1
 8008d26:	6849      	ldr	r1, [r1, #4]
 8008d28:	e7ca      	b.n	8008cc0 <_malloc_r+0x2c>
 8008d2a:	1cc4      	adds	r4, r0, #3
 8008d2c:	f024 0403 	bic.w	r4, r4, #3
 8008d30:	42a0      	cmp	r0, r4
 8008d32:	d005      	beq.n	8008d40 <_malloc_r+0xac>
 8008d34:	1a21      	subs	r1, r4, r0
 8008d36:	4630      	mov	r0, r6
 8008d38:	f000 f86e 	bl	8008e18 <_sbrk_r>
 8008d3c:	3001      	adds	r0, #1
 8008d3e:	d0cd      	beq.n	8008cdc <_malloc_r+0x48>
 8008d40:	6025      	str	r5, [r4, #0]
 8008d42:	e7d9      	b.n	8008cf8 <_malloc_r+0x64>
 8008d44:	bd70      	pop	{r4, r5, r6, pc}
 8008d46:	bf00      	nop
 8008d48:	200002d4 	.word	0x200002d4
 8008d4c:	200002d8 	.word	0x200002d8

08008d50 <_puts_r>:
 8008d50:	b570      	push	{r4, r5, r6, lr}
 8008d52:	460e      	mov	r6, r1
 8008d54:	4605      	mov	r5, r0
 8008d56:	b118      	cbz	r0, 8008d60 <_puts_r+0x10>
 8008d58:	6983      	ldr	r3, [r0, #24]
 8008d5a:	b90b      	cbnz	r3, 8008d60 <_puts_r+0x10>
 8008d5c:	f000 fa42 	bl	80091e4 <__sinit>
 8008d60:	69ab      	ldr	r3, [r5, #24]
 8008d62:	68ac      	ldr	r4, [r5, #8]
 8008d64:	b913      	cbnz	r3, 8008d6c <_puts_r+0x1c>
 8008d66:	4628      	mov	r0, r5
 8008d68:	f000 fa3c 	bl	80091e4 <__sinit>
 8008d6c:	4b23      	ldr	r3, [pc, #140]	; (8008dfc <_puts_r+0xac>)
 8008d6e:	429c      	cmp	r4, r3
 8008d70:	d117      	bne.n	8008da2 <_puts_r+0x52>
 8008d72:	686c      	ldr	r4, [r5, #4]
 8008d74:	89a3      	ldrh	r3, [r4, #12]
 8008d76:	071b      	lsls	r3, r3, #28
 8008d78:	d51d      	bpl.n	8008db6 <_puts_r+0x66>
 8008d7a:	6923      	ldr	r3, [r4, #16]
 8008d7c:	b1db      	cbz	r3, 8008db6 <_puts_r+0x66>
 8008d7e:	3e01      	subs	r6, #1
 8008d80:	68a3      	ldr	r3, [r4, #8]
 8008d82:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008d86:	3b01      	subs	r3, #1
 8008d88:	60a3      	str	r3, [r4, #8]
 8008d8a:	b9e9      	cbnz	r1, 8008dc8 <_puts_r+0x78>
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	da2e      	bge.n	8008dee <_puts_r+0x9e>
 8008d90:	4622      	mov	r2, r4
 8008d92:	210a      	movs	r1, #10
 8008d94:	4628      	mov	r0, r5
 8008d96:	f000 f873 	bl	8008e80 <__swbuf_r>
 8008d9a:	3001      	adds	r0, #1
 8008d9c:	d011      	beq.n	8008dc2 <_puts_r+0x72>
 8008d9e:	200a      	movs	r0, #10
 8008da0:	bd70      	pop	{r4, r5, r6, pc}
 8008da2:	4b17      	ldr	r3, [pc, #92]	; (8008e00 <_puts_r+0xb0>)
 8008da4:	429c      	cmp	r4, r3
 8008da6:	d101      	bne.n	8008dac <_puts_r+0x5c>
 8008da8:	68ac      	ldr	r4, [r5, #8]
 8008daa:	e7e3      	b.n	8008d74 <_puts_r+0x24>
 8008dac:	4b15      	ldr	r3, [pc, #84]	; (8008e04 <_puts_r+0xb4>)
 8008dae:	429c      	cmp	r4, r3
 8008db0:	bf08      	it	eq
 8008db2:	68ec      	ldreq	r4, [r5, #12]
 8008db4:	e7de      	b.n	8008d74 <_puts_r+0x24>
 8008db6:	4621      	mov	r1, r4
 8008db8:	4628      	mov	r0, r5
 8008dba:	f000 f8b3 	bl	8008f24 <__swsetup_r>
 8008dbe:	2800      	cmp	r0, #0
 8008dc0:	d0dd      	beq.n	8008d7e <_puts_r+0x2e>
 8008dc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008dc6:	bd70      	pop	{r4, r5, r6, pc}
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	da04      	bge.n	8008dd6 <_puts_r+0x86>
 8008dcc:	69a2      	ldr	r2, [r4, #24]
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	db06      	blt.n	8008de0 <_puts_r+0x90>
 8008dd2:	290a      	cmp	r1, #10
 8008dd4:	d004      	beq.n	8008de0 <_puts_r+0x90>
 8008dd6:	6823      	ldr	r3, [r4, #0]
 8008dd8:	1c5a      	adds	r2, r3, #1
 8008dda:	6022      	str	r2, [r4, #0]
 8008ddc:	7019      	strb	r1, [r3, #0]
 8008dde:	e7cf      	b.n	8008d80 <_puts_r+0x30>
 8008de0:	4622      	mov	r2, r4
 8008de2:	4628      	mov	r0, r5
 8008de4:	f000 f84c 	bl	8008e80 <__swbuf_r>
 8008de8:	3001      	adds	r0, #1
 8008dea:	d1c9      	bne.n	8008d80 <_puts_r+0x30>
 8008dec:	e7e9      	b.n	8008dc2 <_puts_r+0x72>
 8008dee:	6823      	ldr	r3, [r4, #0]
 8008df0:	200a      	movs	r0, #10
 8008df2:	1c5a      	adds	r2, r3, #1
 8008df4:	6022      	str	r2, [r4, #0]
 8008df6:	7018      	strb	r0, [r3, #0]
 8008df8:	bd70      	pop	{r4, r5, r6, pc}
 8008dfa:	bf00      	nop
 8008dfc:	0800bc28 	.word	0x0800bc28
 8008e00:	0800bc48 	.word	0x0800bc48
 8008e04:	0800bc08 	.word	0x0800bc08

08008e08 <puts>:
 8008e08:	4b02      	ldr	r3, [pc, #8]	; (8008e14 <puts+0xc>)
 8008e0a:	4601      	mov	r1, r0
 8008e0c:	6818      	ldr	r0, [r3, #0]
 8008e0e:	f7ff bf9f 	b.w	8008d50 <_puts_r>
 8008e12:	bf00      	nop
 8008e14:	20000140 	.word	0x20000140

08008e18 <_sbrk_r>:
 8008e18:	b538      	push	{r3, r4, r5, lr}
 8008e1a:	4c06      	ldr	r4, [pc, #24]	; (8008e34 <_sbrk_r+0x1c>)
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	4605      	mov	r5, r0
 8008e20:	4608      	mov	r0, r1
 8008e22:	6023      	str	r3, [r4, #0]
 8008e24:	f000 fede 	bl	8009be4 <_sbrk>
 8008e28:	1c43      	adds	r3, r0, #1
 8008e2a:	d102      	bne.n	8008e32 <_sbrk_r+0x1a>
 8008e2c:	6823      	ldr	r3, [r4, #0]
 8008e2e:	b103      	cbz	r3, 8008e32 <_sbrk_r+0x1a>
 8008e30:	602b      	str	r3, [r5, #0]
 8008e32:	bd38      	pop	{r3, r4, r5, pc}
 8008e34:	20000d70 	.word	0x20000d70

08008e38 <siprintf>:
 8008e38:	b40e      	push	{r1, r2, r3}
 8008e3a:	b500      	push	{lr}
 8008e3c:	b09c      	sub	sp, #112	; 0x70
 8008e3e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8008e42:	ab1d      	add	r3, sp, #116	; 0x74
 8008e44:	f8ad 1014 	strh.w	r1, [sp, #20]
 8008e48:	9002      	str	r0, [sp, #8]
 8008e4a:	9006      	str	r0, [sp, #24]
 8008e4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e50:	480a      	ldr	r0, [pc, #40]	; (8008e7c <siprintf+0x44>)
 8008e52:	9104      	str	r1, [sp, #16]
 8008e54:	9107      	str	r1, [sp, #28]
 8008e56:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008e5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e5e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8008e62:	6800      	ldr	r0, [r0, #0]
 8008e64:	9301      	str	r3, [sp, #4]
 8008e66:	a902      	add	r1, sp, #8
 8008e68:	f000 fb08 	bl	800947c <_svfiprintf_r>
 8008e6c:	9b02      	ldr	r3, [sp, #8]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	701a      	strb	r2, [r3, #0]
 8008e72:	b01c      	add	sp, #112	; 0x70
 8008e74:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e78:	b003      	add	sp, #12
 8008e7a:	4770      	bx	lr
 8008e7c:	20000140 	.word	0x20000140

08008e80 <__swbuf_r>:
 8008e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e82:	460e      	mov	r6, r1
 8008e84:	4614      	mov	r4, r2
 8008e86:	4605      	mov	r5, r0
 8008e88:	b118      	cbz	r0, 8008e92 <__swbuf_r+0x12>
 8008e8a:	6983      	ldr	r3, [r0, #24]
 8008e8c:	b90b      	cbnz	r3, 8008e92 <__swbuf_r+0x12>
 8008e8e:	f000 f9a9 	bl	80091e4 <__sinit>
 8008e92:	4b21      	ldr	r3, [pc, #132]	; (8008f18 <__swbuf_r+0x98>)
 8008e94:	429c      	cmp	r4, r3
 8008e96:	d12a      	bne.n	8008eee <__swbuf_r+0x6e>
 8008e98:	686c      	ldr	r4, [r5, #4]
 8008e9a:	69a3      	ldr	r3, [r4, #24]
 8008e9c:	60a3      	str	r3, [r4, #8]
 8008e9e:	89a3      	ldrh	r3, [r4, #12]
 8008ea0:	071a      	lsls	r2, r3, #28
 8008ea2:	d52e      	bpl.n	8008f02 <__swbuf_r+0x82>
 8008ea4:	6923      	ldr	r3, [r4, #16]
 8008ea6:	b363      	cbz	r3, 8008f02 <__swbuf_r+0x82>
 8008ea8:	6923      	ldr	r3, [r4, #16]
 8008eaa:	6820      	ldr	r0, [r4, #0]
 8008eac:	1ac0      	subs	r0, r0, r3
 8008eae:	6963      	ldr	r3, [r4, #20]
 8008eb0:	b2f6      	uxtb	r6, r6
 8008eb2:	4298      	cmp	r0, r3
 8008eb4:	4637      	mov	r7, r6
 8008eb6:	db04      	blt.n	8008ec2 <__swbuf_r+0x42>
 8008eb8:	4621      	mov	r1, r4
 8008eba:	4628      	mov	r0, r5
 8008ebc:	f000 f928 	bl	8009110 <_fflush_r>
 8008ec0:	bb28      	cbnz	r0, 8008f0e <__swbuf_r+0x8e>
 8008ec2:	68a3      	ldr	r3, [r4, #8]
 8008ec4:	3b01      	subs	r3, #1
 8008ec6:	60a3      	str	r3, [r4, #8]
 8008ec8:	6823      	ldr	r3, [r4, #0]
 8008eca:	1c5a      	adds	r2, r3, #1
 8008ecc:	6022      	str	r2, [r4, #0]
 8008ece:	701e      	strb	r6, [r3, #0]
 8008ed0:	6963      	ldr	r3, [r4, #20]
 8008ed2:	3001      	adds	r0, #1
 8008ed4:	4298      	cmp	r0, r3
 8008ed6:	d004      	beq.n	8008ee2 <__swbuf_r+0x62>
 8008ed8:	89a3      	ldrh	r3, [r4, #12]
 8008eda:	07db      	lsls	r3, r3, #31
 8008edc:	d519      	bpl.n	8008f12 <__swbuf_r+0x92>
 8008ede:	2e0a      	cmp	r6, #10
 8008ee0:	d117      	bne.n	8008f12 <__swbuf_r+0x92>
 8008ee2:	4621      	mov	r1, r4
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	f000 f913 	bl	8009110 <_fflush_r>
 8008eea:	b190      	cbz	r0, 8008f12 <__swbuf_r+0x92>
 8008eec:	e00f      	b.n	8008f0e <__swbuf_r+0x8e>
 8008eee:	4b0b      	ldr	r3, [pc, #44]	; (8008f1c <__swbuf_r+0x9c>)
 8008ef0:	429c      	cmp	r4, r3
 8008ef2:	d101      	bne.n	8008ef8 <__swbuf_r+0x78>
 8008ef4:	68ac      	ldr	r4, [r5, #8]
 8008ef6:	e7d0      	b.n	8008e9a <__swbuf_r+0x1a>
 8008ef8:	4b09      	ldr	r3, [pc, #36]	; (8008f20 <__swbuf_r+0xa0>)
 8008efa:	429c      	cmp	r4, r3
 8008efc:	bf08      	it	eq
 8008efe:	68ec      	ldreq	r4, [r5, #12]
 8008f00:	e7cb      	b.n	8008e9a <__swbuf_r+0x1a>
 8008f02:	4621      	mov	r1, r4
 8008f04:	4628      	mov	r0, r5
 8008f06:	f000 f80d 	bl	8008f24 <__swsetup_r>
 8008f0a:	2800      	cmp	r0, #0
 8008f0c:	d0cc      	beq.n	8008ea8 <__swbuf_r+0x28>
 8008f0e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008f12:	4638      	mov	r0, r7
 8008f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f16:	bf00      	nop
 8008f18:	0800bc28 	.word	0x0800bc28
 8008f1c:	0800bc48 	.word	0x0800bc48
 8008f20:	0800bc08 	.word	0x0800bc08

08008f24 <__swsetup_r>:
 8008f24:	4b32      	ldr	r3, [pc, #200]	; (8008ff0 <__swsetup_r+0xcc>)
 8008f26:	b570      	push	{r4, r5, r6, lr}
 8008f28:	681d      	ldr	r5, [r3, #0]
 8008f2a:	4606      	mov	r6, r0
 8008f2c:	460c      	mov	r4, r1
 8008f2e:	b125      	cbz	r5, 8008f3a <__swsetup_r+0x16>
 8008f30:	69ab      	ldr	r3, [r5, #24]
 8008f32:	b913      	cbnz	r3, 8008f3a <__swsetup_r+0x16>
 8008f34:	4628      	mov	r0, r5
 8008f36:	f000 f955 	bl	80091e4 <__sinit>
 8008f3a:	4b2e      	ldr	r3, [pc, #184]	; (8008ff4 <__swsetup_r+0xd0>)
 8008f3c:	429c      	cmp	r4, r3
 8008f3e:	d10f      	bne.n	8008f60 <__swsetup_r+0x3c>
 8008f40:	686c      	ldr	r4, [r5, #4]
 8008f42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f46:	b29a      	uxth	r2, r3
 8008f48:	0715      	lsls	r5, r2, #28
 8008f4a:	d42c      	bmi.n	8008fa6 <__swsetup_r+0x82>
 8008f4c:	06d0      	lsls	r0, r2, #27
 8008f4e:	d411      	bmi.n	8008f74 <__swsetup_r+0x50>
 8008f50:	2209      	movs	r2, #9
 8008f52:	6032      	str	r2, [r6, #0]
 8008f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f58:	81a3      	strh	r3, [r4, #12]
 8008f5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f5e:	bd70      	pop	{r4, r5, r6, pc}
 8008f60:	4b25      	ldr	r3, [pc, #148]	; (8008ff8 <__swsetup_r+0xd4>)
 8008f62:	429c      	cmp	r4, r3
 8008f64:	d101      	bne.n	8008f6a <__swsetup_r+0x46>
 8008f66:	68ac      	ldr	r4, [r5, #8]
 8008f68:	e7eb      	b.n	8008f42 <__swsetup_r+0x1e>
 8008f6a:	4b24      	ldr	r3, [pc, #144]	; (8008ffc <__swsetup_r+0xd8>)
 8008f6c:	429c      	cmp	r4, r3
 8008f6e:	bf08      	it	eq
 8008f70:	68ec      	ldreq	r4, [r5, #12]
 8008f72:	e7e6      	b.n	8008f42 <__swsetup_r+0x1e>
 8008f74:	0751      	lsls	r1, r2, #29
 8008f76:	d512      	bpl.n	8008f9e <__swsetup_r+0x7a>
 8008f78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f7a:	b141      	cbz	r1, 8008f8e <__swsetup_r+0x6a>
 8008f7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f80:	4299      	cmp	r1, r3
 8008f82:	d002      	beq.n	8008f8a <__swsetup_r+0x66>
 8008f84:	4630      	mov	r0, r6
 8008f86:	f7ff fe37 	bl	8008bf8 <_free_r>
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	6363      	str	r3, [r4, #52]	; 0x34
 8008f8e:	89a3      	ldrh	r3, [r4, #12]
 8008f90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f94:	81a3      	strh	r3, [r4, #12]
 8008f96:	2300      	movs	r3, #0
 8008f98:	6063      	str	r3, [r4, #4]
 8008f9a:	6923      	ldr	r3, [r4, #16]
 8008f9c:	6023      	str	r3, [r4, #0]
 8008f9e:	89a3      	ldrh	r3, [r4, #12]
 8008fa0:	f043 0308 	orr.w	r3, r3, #8
 8008fa4:	81a3      	strh	r3, [r4, #12]
 8008fa6:	6923      	ldr	r3, [r4, #16]
 8008fa8:	b94b      	cbnz	r3, 8008fbe <__swsetup_r+0x9a>
 8008faa:	89a3      	ldrh	r3, [r4, #12]
 8008fac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008fb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fb4:	d003      	beq.n	8008fbe <__swsetup_r+0x9a>
 8008fb6:	4621      	mov	r1, r4
 8008fb8:	4630      	mov	r0, r6
 8008fba:	f000 f9c1 	bl	8009340 <__smakebuf_r>
 8008fbe:	89a2      	ldrh	r2, [r4, #12]
 8008fc0:	f012 0301 	ands.w	r3, r2, #1
 8008fc4:	d00c      	beq.n	8008fe0 <__swsetup_r+0xbc>
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	60a3      	str	r3, [r4, #8]
 8008fca:	6963      	ldr	r3, [r4, #20]
 8008fcc:	425b      	negs	r3, r3
 8008fce:	61a3      	str	r3, [r4, #24]
 8008fd0:	6923      	ldr	r3, [r4, #16]
 8008fd2:	b953      	cbnz	r3, 8008fea <__swsetup_r+0xc6>
 8008fd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fd8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008fdc:	d1ba      	bne.n	8008f54 <__swsetup_r+0x30>
 8008fde:	bd70      	pop	{r4, r5, r6, pc}
 8008fe0:	0792      	lsls	r2, r2, #30
 8008fe2:	bf58      	it	pl
 8008fe4:	6963      	ldrpl	r3, [r4, #20]
 8008fe6:	60a3      	str	r3, [r4, #8]
 8008fe8:	e7f2      	b.n	8008fd0 <__swsetup_r+0xac>
 8008fea:	2000      	movs	r0, #0
 8008fec:	e7f7      	b.n	8008fde <__swsetup_r+0xba>
 8008fee:	bf00      	nop
 8008ff0:	20000140 	.word	0x20000140
 8008ff4:	0800bc28 	.word	0x0800bc28
 8008ff8:	0800bc48 	.word	0x0800bc48
 8008ffc:	0800bc08 	.word	0x0800bc08

08009000 <__sflush_r>:
 8009000:	898a      	ldrh	r2, [r1, #12]
 8009002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009006:	4605      	mov	r5, r0
 8009008:	0710      	lsls	r0, r2, #28
 800900a:	460c      	mov	r4, r1
 800900c:	d45a      	bmi.n	80090c4 <__sflush_r+0xc4>
 800900e:	684b      	ldr	r3, [r1, #4]
 8009010:	2b00      	cmp	r3, #0
 8009012:	dc05      	bgt.n	8009020 <__sflush_r+0x20>
 8009014:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009016:	2b00      	cmp	r3, #0
 8009018:	dc02      	bgt.n	8009020 <__sflush_r+0x20>
 800901a:	2000      	movs	r0, #0
 800901c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009020:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009022:	2e00      	cmp	r6, #0
 8009024:	d0f9      	beq.n	800901a <__sflush_r+0x1a>
 8009026:	2300      	movs	r3, #0
 8009028:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800902c:	682f      	ldr	r7, [r5, #0]
 800902e:	602b      	str	r3, [r5, #0]
 8009030:	d033      	beq.n	800909a <__sflush_r+0x9a>
 8009032:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009034:	89a3      	ldrh	r3, [r4, #12]
 8009036:	075a      	lsls	r2, r3, #29
 8009038:	d505      	bpl.n	8009046 <__sflush_r+0x46>
 800903a:	6863      	ldr	r3, [r4, #4]
 800903c:	1ac0      	subs	r0, r0, r3
 800903e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009040:	b10b      	cbz	r3, 8009046 <__sflush_r+0x46>
 8009042:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009044:	1ac0      	subs	r0, r0, r3
 8009046:	2300      	movs	r3, #0
 8009048:	4602      	mov	r2, r0
 800904a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800904c:	6a21      	ldr	r1, [r4, #32]
 800904e:	4628      	mov	r0, r5
 8009050:	47b0      	blx	r6
 8009052:	1c43      	adds	r3, r0, #1
 8009054:	89a3      	ldrh	r3, [r4, #12]
 8009056:	d106      	bne.n	8009066 <__sflush_r+0x66>
 8009058:	6829      	ldr	r1, [r5, #0]
 800905a:	291d      	cmp	r1, #29
 800905c:	d84b      	bhi.n	80090f6 <__sflush_r+0xf6>
 800905e:	4a2b      	ldr	r2, [pc, #172]	; (800910c <__sflush_r+0x10c>)
 8009060:	40ca      	lsrs	r2, r1
 8009062:	07d6      	lsls	r6, r2, #31
 8009064:	d547      	bpl.n	80090f6 <__sflush_r+0xf6>
 8009066:	2200      	movs	r2, #0
 8009068:	6062      	str	r2, [r4, #4]
 800906a:	04d9      	lsls	r1, r3, #19
 800906c:	6922      	ldr	r2, [r4, #16]
 800906e:	6022      	str	r2, [r4, #0]
 8009070:	d504      	bpl.n	800907c <__sflush_r+0x7c>
 8009072:	1c42      	adds	r2, r0, #1
 8009074:	d101      	bne.n	800907a <__sflush_r+0x7a>
 8009076:	682b      	ldr	r3, [r5, #0]
 8009078:	b903      	cbnz	r3, 800907c <__sflush_r+0x7c>
 800907a:	6560      	str	r0, [r4, #84]	; 0x54
 800907c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800907e:	602f      	str	r7, [r5, #0]
 8009080:	2900      	cmp	r1, #0
 8009082:	d0ca      	beq.n	800901a <__sflush_r+0x1a>
 8009084:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009088:	4299      	cmp	r1, r3
 800908a:	d002      	beq.n	8009092 <__sflush_r+0x92>
 800908c:	4628      	mov	r0, r5
 800908e:	f7ff fdb3 	bl	8008bf8 <_free_r>
 8009092:	2000      	movs	r0, #0
 8009094:	6360      	str	r0, [r4, #52]	; 0x34
 8009096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800909a:	6a21      	ldr	r1, [r4, #32]
 800909c:	2301      	movs	r3, #1
 800909e:	4628      	mov	r0, r5
 80090a0:	47b0      	blx	r6
 80090a2:	1c41      	adds	r1, r0, #1
 80090a4:	d1c6      	bne.n	8009034 <__sflush_r+0x34>
 80090a6:	682b      	ldr	r3, [r5, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d0c3      	beq.n	8009034 <__sflush_r+0x34>
 80090ac:	2b1d      	cmp	r3, #29
 80090ae:	d001      	beq.n	80090b4 <__sflush_r+0xb4>
 80090b0:	2b16      	cmp	r3, #22
 80090b2:	d101      	bne.n	80090b8 <__sflush_r+0xb8>
 80090b4:	602f      	str	r7, [r5, #0]
 80090b6:	e7b0      	b.n	800901a <__sflush_r+0x1a>
 80090b8:	89a3      	ldrh	r3, [r4, #12]
 80090ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090be:	81a3      	strh	r3, [r4, #12]
 80090c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090c4:	690f      	ldr	r7, [r1, #16]
 80090c6:	2f00      	cmp	r7, #0
 80090c8:	d0a7      	beq.n	800901a <__sflush_r+0x1a>
 80090ca:	0793      	lsls	r3, r2, #30
 80090cc:	680e      	ldr	r6, [r1, #0]
 80090ce:	bf08      	it	eq
 80090d0:	694b      	ldreq	r3, [r1, #20]
 80090d2:	600f      	str	r7, [r1, #0]
 80090d4:	bf18      	it	ne
 80090d6:	2300      	movne	r3, #0
 80090d8:	eba6 0807 	sub.w	r8, r6, r7
 80090dc:	608b      	str	r3, [r1, #8]
 80090de:	f1b8 0f00 	cmp.w	r8, #0
 80090e2:	dd9a      	ble.n	800901a <__sflush_r+0x1a>
 80090e4:	4643      	mov	r3, r8
 80090e6:	463a      	mov	r2, r7
 80090e8:	6a21      	ldr	r1, [r4, #32]
 80090ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80090ec:	4628      	mov	r0, r5
 80090ee:	47b0      	blx	r6
 80090f0:	2800      	cmp	r0, #0
 80090f2:	dc07      	bgt.n	8009104 <__sflush_r+0x104>
 80090f4:	89a3      	ldrh	r3, [r4, #12]
 80090f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090fa:	81a3      	strh	r3, [r4, #12]
 80090fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009104:	4407      	add	r7, r0
 8009106:	eba8 0800 	sub.w	r8, r8, r0
 800910a:	e7e8      	b.n	80090de <__sflush_r+0xde>
 800910c:	20400001 	.word	0x20400001

08009110 <_fflush_r>:
 8009110:	b538      	push	{r3, r4, r5, lr}
 8009112:	690b      	ldr	r3, [r1, #16]
 8009114:	4605      	mov	r5, r0
 8009116:	460c      	mov	r4, r1
 8009118:	b1db      	cbz	r3, 8009152 <_fflush_r+0x42>
 800911a:	b118      	cbz	r0, 8009124 <_fflush_r+0x14>
 800911c:	6983      	ldr	r3, [r0, #24]
 800911e:	b90b      	cbnz	r3, 8009124 <_fflush_r+0x14>
 8009120:	f000 f860 	bl	80091e4 <__sinit>
 8009124:	4b0c      	ldr	r3, [pc, #48]	; (8009158 <_fflush_r+0x48>)
 8009126:	429c      	cmp	r4, r3
 8009128:	d109      	bne.n	800913e <_fflush_r+0x2e>
 800912a:	686c      	ldr	r4, [r5, #4]
 800912c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009130:	b17b      	cbz	r3, 8009152 <_fflush_r+0x42>
 8009132:	4621      	mov	r1, r4
 8009134:	4628      	mov	r0, r5
 8009136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800913a:	f7ff bf61 	b.w	8009000 <__sflush_r>
 800913e:	4b07      	ldr	r3, [pc, #28]	; (800915c <_fflush_r+0x4c>)
 8009140:	429c      	cmp	r4, r3
 8009142:	d101      	bne.n	8009148 <_fflush_r+0x38>
 8009144:	68ac      	ldr	r4, [r5, #8]
 8009146:	e7f1      	b.n	800912c <_fflush_r+0x1c>
 8009148:	4b05      	ldr	r3, [pc, #20]	; (8009160 <_fflush_r+0x50>)
 800914a:	429c      	cmp	r4, r3
 800914c:	bf08      	it	eq
 800914e:	68ec      	ldreq	r4, [r5, #12]
 8009150:	e7ec      	b.n	800912c <_fflush_r+0x1c>
 8009152:	2000      	movs	r0, #0
 8009154:	bd38      	pop	{r3, r4, r5, pc}
 8009156:	bf00      	nop
 8009158:	0800bc28 	.word	0x0800bc28
 800915c:	0800bc48 	.word	0x0800bc48
 8009160:	0800bc08 	.word	0x0800bc08

08009164 <_cleanup_r>:
 8009164:	4901      	ldr	r1, [pc, #4]	; (800916c <_cleanup_r+0x8>)
 8009166:	f000 b8a9 	b.w	80092bc <_fwalk_reent>
 800916a:	bf00      	nop
 800916c:	08009111 	.word	0x08009111

08009170 <std.isra.0>:
 8009170:	2300      	movs	r3, #0
 8009172:	b510      	push	{r4, lr}
 8009174:	4604      	mov	r4, r0
 8009176:	6003      	str	r3, [r0, #0]
 8009178:	6043      	str	r3, [r0, #4]
 800917a:	6083      	str	r3, [r0, #8]
 800917c:	8181      	strh	r1, [r0, #12]
 800917e:	6643      	str	r3, [r0, #100]	; 0x64
 8009180:	81c2      	strh	r2, [r0, #14]
 8009182:	6103      	str	r3, [r0, #16]
 8009184:	6143      	str	r3, [r0, #20]
 8009186:	6183      	str	r3, [r0, #24]
 8009188:	4619      	mov	r1, r3
 800918a:	2208      	movs	r2, #8
 800918c:	305c      	adds	r0, #92	; 0x5c
 800918e:	f7ff fd2b 	bl	8008be8 <memset>
 8009192:	4b05      	ldr	r3, [pc, #20]	; (80091a8 <std.isra.0+0x38>)
 8009194:	6263      	str	r3, [r4, #36]	; 0x24
 8009196:	4b05      	ldr	r3, [pc, #20]	; (80091ac <std.isra.0+0x3c>)
 8009198:	62a3      	str	r3, [r4, #40]	; 0x28
 800919a:	4b05      	ldr	r3, [pc, #20]	; (80091b0 <std.isra.0+0x40>)
 800919c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800919e:	4b05      	ldr	r3, [pc, #20]	; (80091b4 <std.isra.0+0x44>)
 80091a0:	6224      	str	r4, [r4, #32]
 80091a2:	6323      	str	r3, [r4, #48]	; 0x30
 80091a4:	bd10      	pop	{r4, pc}
 80091a6:	bf00      	nop
 80091a8:	08009991 	.word	0x08009991
 80091ac:	080099b3 	.word	0x080099b3
 80091b0:	080099eb 	.word	0x080099eb
 80091b4:	08009a0f 	.word	0x08009a0f

080091b8 <__sfmoreglue>:
 80091b8:	b570      	push	{r4, r5, r6, lr}
 80091ba:	1e4a      	subs	r2, r1, #1
 80091bc:	2568      	movs	r5, #104	; 0x68
 80091be:	4355      	muls	r5, r2
 80091c0:	460e      	mov	r6, r1
 80091c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80091c6:	f7ff fd65 	bl	8008c94 <_malloc_r>
 80091ca:	4604      	mov	r4, r0
 80091cc:	b140      	cbz	r0, 80091e0 <__sfmoreglue+0x28>
 80091ce:	2100      	movs	r1, #0
 80091d0:	e880 0042 	stmia.w	r0, {r1, r6}
 80091d4:	300c      	adds	r0, #12
 80091d6:	60a0      	str	r0, [r4, #8]
 80091d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80091dc:	f7ff fd04 	bl	8008be8 <memset>
 80091e0:	4620      	mov	r0, r4
 80091e2:	bd70      	pop	{r4, r5, r6, pc}

080091e4 <__sinit>:
 80091e4:	6983      	ldr	r3, [r0, #24]
 80091e6:	b510      	push	{r4, lr}
 80091e8:	4604      	mov	r4, r0
 80091ea:	bb33      	cbnz	r3, 800923a <__sinit+0x56>
 80091ec:	6483      	str	r3, [r0, #72]	; 0x48
 80091ee:	64c3      	str	r3, [r0, #76]	; 0x4c
 80091f0:	6503      	str	r3, [r0, #80]	; 0x50
 80091f2:	4b12      	ldr	r3, [pc, #72]	; (800923c <__sinit+0x58>)
 80091f4:	4a12      	ldr	r2, [pc, #72]	; (8009240 <__sinit+0x5c>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	6282      	str	r2, [r0, #40]	; 0x28
 80091fa:	4298      	cmp	r0, r3
 80091fc:	bf04      	itt	eq
 80091fe:	2301      	moveq	r3, #1
 8009200:	6183      	streq	r3, [r0, #24]
 8009202:	f000 f81f 	bl	8009244 <__sfp>
 8009206:	6060      	str	r0, [r4, #4]
 8009208:	4620      	mov	r0, r4
 800920a:	f000 f81b 	bl	8009244 <__sfp>
 800920e:	60a0      	str	r0, [r4, #8]
 8009210:	4620      	mov	r0, r4
 8009212:	f000 f817 	bl	8009244 <__sfp>
 8009216:	2200      	movs	r2, #0
 8009218:	60e0      	str	r0, [r4, #12]
 800921a:	2104      	movs	r1, #4
 800921c:	6860      	ldr	r0, [r4, #4]
 800921e:	f7ff ffa7 	bl	8009170 <std.isra.0>
 8009222:	2201      	movs	r2, #1
 8009224:	2109      	movs	r1, #9
 8009226:	68a0      	ldr	r0, [r4, #8]
 8009228:	f7ff ffa2 	bl	8009170 <std.isra.0>
 800922c:	2202      	movs	r2, #2
 800922e:	2112      	movs	r1, #18
 8009230:	68e0      	ldr	r0, [r4, #12]
 8009232:	f7ff ff9d 	bl	8009170 <std.isra.0>
 8009236:	2301      	movs	r3, #1
 8009238:	61a3      	str	r3, [r4, #24]
 800923a:	bd10      	pop	{r4, pc}
 800923c:	0800bc68 	.word	0x0800bc68
 8009240:	08009165 	.word	0x08009165

08009244 <__sfp>:
 8009244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009246:	4b1c      	ldr	r3, [pc, #112]	; (80092b8 <__sfp+0x74>)
 8009248:	681e      	ldr	r6, [r3, #0]
 800924a:	69b3      	ldr	r3, [r6, #24]
 800924c:	4607      	mov	r7, r0
 800924e:	b913      	cbnz	r3, 8009256 <__sfp+0x12>
 8009250:	4630      	mov	r0, r6
 8009252:	f7ff ffc7 	bl	80091e4 <__sinit>
 8009256:	3648      	adds	r6, #72	; 0x48
 8009258:	68b4      	ldr	r4, [r6, #8]
 800925a:	6873      	ldr	r3, [r6, #4]
 800925c:	3b01      	subs	r3, #1
 800925e:	d503      	bpl.n	8009268 <__sfp+0x24>
 8009260:	6833      	ldr	r3, [r6, #0]
 8009262:	b133      	cbz	r3, 8009272 <__sfp+0x2e>
 8009264:	6836      	ldr	r6, [r6, #0]
 8009266:	e7f7      	b.n	8009258 <__sfp+0x14>
 8009268:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800926c:	b16d      	cbz	r5, 800928a <__sfp+0x46>
 800926e:	3468      	adds	r4, #104	; 0x68
 8009270:	e7f4      	b.n	800925c <__sfp+0x18>
 8009272:	2104      	movs	r1, #4
 8009274:	4638      	mov	r0, r7
 8009276:	f7ff ff9f 	bl	80091b8 <__sfmoreglue>
 800927a:	6030      	str	r0, [r6, #0]
 800927c:	2800      	cmp	r0, #0
 800927e:	d1f1      	bne.n	8009264 <__sfp+0x20>
 8009280:	230c      	movs	r3, #12
 8009282:	603b      	str	r3, [r7, #0]
 8009284:	4604      	mov	r4, r0
 8009286:	4620      	mov	r0, r4
 8009288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800928a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800928e:	81e3      	strh	r3, [r4, #14]
 8009290:	2301      	movs	r3, #1
 8009292:	81a3      	strh	r3, [r4, #12]
 8009294:	6665      	str	r5, [r4, #100]	; 0x64
 8009296:	6025      	str	r5, [r4, #0]
 8009298:	60a5      	str	r5, [r4, #8]
 800929a:	6065      	str	r5, [r4, #4]
 800929c:	6125      	str	r5, [r4, #16]
 800929e:	6165      	str	r5, [r4, #20]
 80092a0:	61a5      	str	r5, [r4, #24]
 80092a2:	2208      	movs	r2, #8
 80092a4:	4629      	mov	r1, r5
 80092a6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80092aa:	f7ff fc9d 	bl	8008be8 <memset>
 80092ae:	6365      	str	r5, [r4, #52]	; 0x34
 80092b0:	63a5      	str	r5, [r4, #56]	; 0x38
 80092b2:	64a5      	str	r5, [r4, #72]	; 0x48
 80092b4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80092b6:	e7e6      	b.n	8009286 <__sfp+0x42>
 80092b8:	0800bc68 	.word	0x0800bc68

080092bc <_fwalk_reent>:
 80092bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092c0:	4680      	mov	r8, r0
 80092c2:	4689      	mov	r9, r1
 80092c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80092c8:	2600      	movs	r6, #0
 80092ca:	b914      	cbnz	r4, 80092d2 <_fwalk_reent+0x16>
 80092cc:	4630      	mov	r0, r6
 80092ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092d2:	68a5      	ldr	r5, [r4, #8]
 80092d4:	6867      	ldr	r7, [r4, #4]
 80092d6:	3f01      	subs	r7, #1
 80092d8:	d501      	bpl.n	80092de <_fwalk_reent+0x22>
 80092da:	6824      	ldr	r4, [r4, #0]
 80092dc:	e7f5      	b.n	80092ca <_fwalk_reent+0xe>
 80092de:	89ab      	ldrh	r3, [r5, #12]
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d907      	bls.n	80092f4 <_fwalk_reent+0x38>
 80092e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092e8:	3301      	adds	r3, #1
 80092ea:	d003      	beq.n	80092f4 <_fwalk_reent+0x38>
 80092ec:	4629      	mov	r1, r5
 80092ee:	4640      	mov	r0, r8
 80092f0:	47c8      	blx	r9
 80092f2:	4306      	orrs	r6, r0
 80092f4:	3568      	adds	r5, #104	; 0x68
 80092f6:	e7ee      	b.n	80092d6 <_fwalk_reent+0x1a>

080092f8 <__swhatbuf_r>:
 80092f8:	b570      	push	{r4, r5, r6, lr}
 80092fa:	460e      	mov	r6, r1
 80092fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009300:	2900      	cmp	r1, #0
 8009302:	b090      	sub	sp, #64	; 0x40
 8009304:	4614      	mov	r4, r2
 8009306:	461d      	mov	r5, r3
 8009308:	da07      	bge.n	800931a <__swhatbuf_r+0x22>
 800930a:	2300      	movs	r3, #0
 800930c:	602b      	str	r3, [r5, #0]
 800930e:	89b3      	ldrh	r3, [r6, #12]
 8009310:	061a      	lsls	r2, r3, #24
 8009312:	d410      	bmi.n	8009336 <__swhatbuf_r+0x3e>
 8009314:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009318:	e00e      	b.n	8009338 <__swhatbuf_r+0x40>
 800931a:	aa01      	add	r2, sp, #4
 800931c:	f000 fb9e 	bl	8009a5c <_fstat_r>
 8009320:	2800      	cmp	r0, #0
 8009322:	dbf2      	blt.n	800930a <__swhatbuf_r+0x12>
 8009324:	9a02      	ldr	r2, [sp, #8]
 8009326:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800932a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800932e:	425a      	negs	r2, r3
 8009330:	415a      	adcs	r2, r3
 8009332:	602a      	str	r2, [r5, #0]
 8009334:	e7ee      	b.n	8009314 <__swhatbuf_r+0x1c>
 8009336:	2340      	movs	r3, #64	; 0x40
 8009338:	2000      	movs	r0, #0
 800933a:	6023      	str	r3, [r4, #0]
 800933c:	b010      	add	sp, #64	; 0x40
 800933e:	bd70      	pop	{r4, r5, r6, pc}

08009340 <__smakebuf_r>:
 8009340:	898b      	ldrh	r3, [r1, #12]
 8009342:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009344:	079d      	lsls	r5, r3, #30
 8009346:	4606      	mov	r6, r0
 8009348:	460c      	mov	r4, r1
 800934a:	d507      	bpl.n	800935c <__smakebuf_r+0x1c>
 800934c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009350:	6023      	str	r3, [r4, #0]
 8009352:	6123      	str	r3, [r4, #16]
 8009354:	2301      	movs	r3, #1
 8009356:	6163      	str	r3, [r4, #20]
 8009358:	b002      	add	sp, #8
 800935a:	bd70      	pop	{r4, r5, r6, pc}
 800935c:	ab01      	add	r3, sp, #4
 800935e:	466a      	mov	r2, sp
 8009360:	f7ff ffca 	bl	80092f8 <__swhatbuf_r>
 8009364:	9900      	ldr	r1, [sp, #0]
 8009366:	4605      	mov	r5, r0
 8009368:	4630      	mov	r0, r6
 800936a:	f7ff fc93 	bl	8008c94 <_malloc_r>
 800936e:	b948      	cbnz	r0, 8009384 <__smakebuf_r+0x44>
 8009370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009374:	059a      	lsls	r2, r3, #22
 8009376:	d4ef      	bmi.n	8009358 <__smakebuf_r+0x18>
 8009378:	f023 0303 	bic.w	r3, r3, #3
 800937c:	f043 0302 	orr.w	r3, r3, #2
 8009380:	81a3      	strh	r3, [r4, #12]
 8009382:	e7e3      	b.n	800934c <__smakebuf_r+0xc>
 8009384:	4b0d      	ldr	r3, [pc, #52]	; (80093bc <__smakebuf_r+0x7c>)
 8009386:	62b3      	str	r3, [r6, #40]	; 0x28
 8009388:	89a3      	ldrh	r3, [r4, #12]
 800938a:	6020      	str	r0, [r4, #0]
 800938c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009390:	81a3      	strh	r3, [r4, #12]
 8009392:	9b00      	ldr	r3, [sp, #0]
 8009394:	6163      	str	r3, [r4, #20]
 8009396:	9b01      	ldr	r3, [sp, #4]
 8009398:	6120      	str	r0, [r4, #16]
 800939a:	b15b      	cbz	r3, 80093b4 <__smakebuf_r+0x74>
 800939c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093a0:	4630      	mov	r0, r6
 80093a2:	f000 fb6d 	bl	8009a80 <_isatty_r>
 80093a6:	b128      	cbz	r0, 80093b4 <__smakebuf_r+0x74>
 80093a8:	89a3      	ldrh	r3, [r4, #12]
 80093aa:	f023 0303 	bic.w	r3, r3, #3
 80093ae:	f043 0301 	orr.w	r3, r3, #1
 80093b2:	81a3      	strh	r3, [r4, #12]
 80093b4:	89a3      	ldrh	r3, [r4, #12]
 80093b6:	431d      	orrs	r5, r3
 80093b8:	81a5      	strh	r5, [r4, #12]
 80093ba:	e7cd      	b.n	8009358 <__smakebuf_r+0x18>
 80093bc:	08009165 	.word	0x08009165

080093c0 <__malloc_lock>:
 80093c0:	4770      	bx	lr

080093c2 <__malloc_unlock>:
 80093c2:	4770      	bx	lr

080093c4 <__ssputs_r>:
 80093c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093c8:	688e      	ldr	r6, [r1, #8]
 80093ca:	429e      	cmp	r6, r3
 80093cc:	4682      	mov	sl, r0
 80093ce:	460c      	mov	r4, r1
 80093d0:	4691      	mov	r9, r2
 80093d2:	4698      	mov	r8, r3
 80093d4:	d835      	bhi.n	8009442 <__ssputs_r+0x7e>
 80093d6:	898a      	ldrh	r2, [r1, #12]
 80093d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80093dc:	d031      	beq.n	8009442 <__ssputs_r+0x7e>
 80093de:	6825      	ldr	r5, [r4, #0]
 80093e0:	6909      	ldr	r1, [r1, #16]
 80093e2:	1a6f      	subs	r7, r5, r1
 80093e4:	6965      	ldr	r5, [r4, #20]
 80093e6:	2302      	movs	r3, #2
 80093e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093ec:	fb95 f5f3 	sdiv	r5, r5, r3
 80093f0:	f108 0301 	add.w	r3, r8, #1
 80093f4:	443b      	add	r3, r7
 80093f6:	429d      	cmp	r5, r3
 80093f8:	bf38      	it	cc
 80093fa:	461d      	movcc	r5, r3
 80093fc:	0553      	lsls	r3, r2, #21
 80093fe:	d531      	bpl.n	8009464 <__ssputs_r+0xa0>
 8009400:	4629      	mov	r1, r5
 8009402:	f7ff fc47 	bl	8008c94 <_malloc_r>
 8009406:	4606      	mov	r6, r0
 8009408:	b950      	cbnz	r0, 8009420 <__ssputs_r+0x5c>
 800940a:	230c      	movs	r3, #12
 800940c:	f8ca 3000 	str.w	r3, [sl]
 8009410:	89a3      	ldrh	r3, [r4, #12]
 8009412:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009416:	81a3      	strh	r3, [r4, #12]
 8009418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800941c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009420:	463a      	mov	r2, r7
 8009422:	6921      	ldr	r1, [r4, #16]
 8009424:	f000 fb4e 	bl	8009ac4 <memcpy>
 8009428:	89a3      	ldrh	r3, [r4, #12]
 800942a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800942e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009432:	81a3      	strh	r3, [r4, #12]
 8009434:	6126      	str	r6, [r4, #16]
 8009436:	6165      	str	r5, [r4, #20]
 8009438:	443e      	add	r6, r7
 800943a:	1bed      	subs	r5, r5, r7
 800943c:	6026      	str	r6, [r4, #0]
 800943e:	60a5      	str	r5, [r4, #8]
 8009440:	4646      	mov	r6, r8
 8009442:	4546      	cmp	r6, r8
 8009444:	bf28      	it	cs
 8009446:	4646      	movcs	r6, r8
 8009448:	4632      	mov	r2, r6
 800944a:	4649      	mov	r1, r9
 800944c:	6820      	ldr	r0, [r4, #0]
 800944e:	f000 fb44 	bl	8009ada <memmove>
 8009452:	68a3      	ldr	r3, [r4, #8]
 8009454:	1b9b      	subs	r3, r3, r6
 8009456:	60a3      	str	r3, [r4, #8]
 8009458:	6823      	ldr	r3, [r4, #0]
 800945a:	441e      	add	r6, r3
 800945c:	6026      	str	r6, [r4, #0]
 800945e:	2000      	movs	r0, #0
 8009460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009464:	462a      	mov	r2, r5
 8009466:	f000 fb52 	bl	8009b0e <_realloc_r>
 800946a:	4606      	mov	r6, r0
 800946c:	2800      	cmp	r0, #0
 800946e:	d1e1      	bne.n	8009434 <__ssputs_r+0x70>
 8009470:	6921      	ldr	r1, [r4, #16]
 8009472:	4650      	mov	r0, sl
 8009474:	f7ff fbc0 	bl	8008bf8 <_free_r>
 8009478:	e7c7      	b.n	800940a <__ssputs_r+0x46>
	...

0800947c <_svfiprintf_r>:
 800947c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009480:	b09d      	sub	sp, #116	; 0x74
 8009482:	4680      	mov	r8, r0
 8009484:	9303      	str	r3, [sp, #12]
 8009486:	898b      	ldrh	r3, [r1, #12]
 8009488:	061c      	lsls	r4, r3, #24
 800948a:	460d      	mov	r5, r1
 800948c:	4616      	mov	r6, r2
 800948e:	d50f      	bpl.n	80094b0 <_svfiprintf_r+0x34>
 8009490:	690b      	ldr	r3, [r1, #16]
 8009492:	b96b      	cbnz	r3, 80094b0 <_svfiprintf_r+0x34>
 8009494:	2140      	movs	r1, #64	; 0x40
 8009496:	f7ff fbfd 	bl	8008c94 <_malloc_r>
 800949a:	6028      	str	r0, [r5, #0]
 800949c:	6128      	str	r0, [r5, #16]
 800949e:	b928      	cbnz	r0, 80094ac <_svfiprintf_r+0x30>
 80094a0:	230c      	movs	r3, #12
 80094a2:	f8c8 3000 	str.w	r3, [r8]
 80094a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094aa:	e0c5      	b.n	8009638 <_svfiprintf_r+0x1bc>
 80094ac:	2340      	movs	r3, #64	; 0x40
 80094ae:	616b      	str	r3, [r5, #20]
 80094b0:	2300      	movs	r3, #0
 80094b2:	9309      	str	r3, [sp, #36]	; 0x24
 80094b4:	2320      	movs	r3, #32
 80094b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094ba:	2330      	movs	r3, #48	; 0x30
 80094bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094c0:	f04f 0b01 	mov.w	fp, #1
 80094c4:	4637      	mov	r7, r6
 80094c6:	463c      	mov	r4, r7
 80094c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d13c      	bne.n	800954a <_svfiprintf_r+0xce>
 80094d0:	ebb7 0a06 	subs.w	sl, r7, r6
 80094d4:	d00b      	beq.n	80094ee <_svfiprintf_r+0x72>
 80094d6:	4653      	mov	r3, sl
 80094d8:	4632      	mov	r2, r6
 80094da:	4629      	mov	r1, r5
 80094dc:	4640      	mov	r0, r8
 80094de:	f7ff ff71 	bl	80093c4 <__ssputs_r>
 80094e2:	3001      	adds	r0, #1
 80094e4:	f000 80a3 	beq.w	800962e <_svfiprintf_r+0x1b2>
 80094e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094ea:	4453      	add	r3, sl
 80094ec:	9309      	str	r3, [sp, #36]	; 0x24
 80094ee:	783b      	ldrb	r3, [r7, #0]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f000 809c 	beq.w	800962e <_svfiprintf_r+0x1b2>
 80094f6:	2300      	movs	r3, #0
 80094f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80094fc:	9304      	str	r3, [sp, #16]
 80094fe:	9307      	str	r3, [sp, #28]
 8009500:	9205      	str	r2, [sp, #20]
 8009502:	9306      	str	r3, [sp, #24]
 8009504:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009508:	931a      	str	r3, [sp, #104]	; 0x68
 800950a:	2205      	movs	r2, #5
 800950c:	7821      	ldrb	r1, [r4, #0]
 800950e:	4850      	ldr	r0, [pc, #320]	; (8009650 <_svfiprintf_r+0x1d4>)
 8009510:	f7f6 fe86 	bl	8000220 <memchr>
 8009514:	1c67      	adds	r7, r4, #1
 8009516:	9b04      	ldr	r3, [sp, #16]
 8009518:	b9d8      	cbnz	r0, 8009552 <_svfiprintf_r+0xd6>
 800951a:	06d9      	lsls	r1, r3, #27
 800951c:	bf44      	itt	mi
 800951e:	2220      	movmi	r2, #32
 8009520:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009524:	071a      	lsls	r2, r3, #28
 8009526:	bf44      	itt	mi
 8009528:	222b      	movmi	r2, #43	; 0x2b
 800952a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800952e:	7822      	ldrb	r2, [r4, #0]
 8009530:	2a2a      	cmp	r2, #42	; 0x2a
 8009532:	d016      	beq.n	8009562 <_svfiprintf_r+0xe6>
 8009534:	9a07      	ldr	r2, [sp, #28]
 8009536:	2100      	movs	r1, #0
 8009538:	200a      	movs	r0, #10
 800953a:	4627      	mov	r7, r4
 800953c:	3401      	adds	r4, #1
 800953e:	783b      	ldrb	r3, [r7, #0]
 8009540:	3b30      	subs	r3, #48	; 0x30
 8009542:	2b09      	cmp	r3, #9
 8009544:	d951      	bls.n	80095ea <_svfiprintf_r+0x16e>
 8009546:	b1c9      	cbz	r1, 800957c <_svfiprintf_r+0x100>
 8009548:	e011      	b.n	800956e <_svfiprintf_r+0xf2>
 800954a:	2b25      	cmp	r3, #37	; 0x25
 800954c:	d0c0      	beq.n	80094d0 <_svfiprintf_r+0x54>
 800954e:	4627      	mov	r7, r4
 8009550:	e7b9      	b.n	80094c6 <_svfiprintf_r+0x4a>
 8009552:	4a3f      	ldr	r2, [pc, #252]	; (8009650 <_svfiprintf_r+0x1d4>)
 8009554:	1a80      	subs	r0, r0, r2
 8009556:	fa0b f000 	lsl.w	r0, fp, r0
 800955a:	4318      	orrs	r0, r3
 800955c:	9004      	str	r0, [sp, #16]
 800955e:	463c      	mov	r4, r7
 8009560:	e7d3      	b.n	800950a <_svfiprintf_r+0x8e>
 8009562:	9a03      	ldr	r2, [sp, #12]
 8009564:	1d11      	adds	r1, r2, #4
 8009566:	6812      	ldr	r2, [r2, #0]
 8009568:	9103      	str	r1, [sp, #12]
 800956a:	2a00      	cmp	r2, #0
 800956c:	db01      	blt.n	8009572 <_svfiprintf_r+0xf6>
 800956e:	9207      	str	r2, [sp, #28]
 8009570:	e004      	b.n	800957c <_svfiprintf_r+0x100>
 8009572:	4252      	negs	r2, r2
 8009574:	f043 0302 	orr.w	r3, r3, #2
 8009578:	9207      	str	r2, [sp, #28]
 800957a:	9304      	str	r3, [sp, #16]
 800957c:	783b      	ldrb	r3, [r7, #0]
 800957e:	2b2e      	cmp	r3, #46	; 0x2e
 8009580:	d10e      	bne.n	80095a0 <_svfiprintf_r+0x124>
 8009582:	787b      	ldrb	r3, [r7, #1]
 8009584:	2b2a      	cmp	r3, #42	; 0x2a
 8009586:	f107 0101 	add.w	r1, r7, #1
 800958a:	d132      	bne.n	80095f2 <_svfiprintf_r+0x176>
 800958c:	9b03      	ldr	r3, [sp, #12]
 800958e:	1d1a      	adds	r2, r3, #4
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	9203      	str	r2, [sp, #12]
 8009594:	2b00      	cmp	r3, #0
 8009596:	bfb8      	it	lt
 8009598:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800959c:	3702      	adds	r7, #2
 800959e:	9305      	str	r3, [sp, #20]
 80095a0:	4c2c      	ldr	r4, [pc, #176]	; (8009654 <_svfiprintf_r+0x1d8>)
 80095a2:	7839      	ldrb	r1, [r7, #0]
 80095a4:	2203      	movs	r2, #3
 80095a6:	4620      	mov	r0, r4
 80095a8:	f7f6 fe3a 	bl	8000220 <memchr>
 80095ac:	b138      	cbz	r0, 80095be <_svfiprintf_r+0x142>
 80095ae:	2340      	movs	r3, #64	; 0x40
 80095b0:	1b00      	subs	r0, r0, r4
 80095b2:	fa03 f000 	lsl.w	r0, r3, r0
 80095b6:	9b04      	ldr	r3, [sp, #16]
 80095b8:	4303      	orrs	r3, r0
 80095ba:	9304      	str	r3, [sp, #16]
 80095bc:	3701      	adds	r7, #1
 80095be:	7839      	ldrb	r1, [r7, #0]
 80095c0:	4825      	ldr	r0, [pc, #148]	; (8009658 <_svfiprintf_r+0x1dc>)
 80095c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095c6:	2206      	movs	r2, #6
 80095c8:	1c7e      	adds	r6, r7, #1
 80095ca:	f7f6 fe29 	bl	8000220 <memchr>
 80095ce:	2800      	cmp	r0, #0
 80095d0:	d035      	beq.n	800963e <_svfiprintf_r+0x1c2>
 80095d2:	4b22      	ldr	r3, [pc, #136]	; (800965c <_svfiprintf_r+0x1e0>)
 80095d4:	b9fb      	cbnz	r3, 8009616 <_svfiprintf_r+0x19a>
 80095d6:	9b03      	ldr	r3, [sp, #12]
 80095d8:	3307      	adds	r3, #7
 80095da:	f023 0307 	bic.w	r3, r3, #7
 80095de:	3308      	adds	r3, #8
 80095e0:	9303      	str	r3, [sp, #12]
 80095e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095e4:	444b      	add	r3, r9
 80095e6:	9309      	str	r3, [sp, #36]	; 0x24
 80095e8:	e76c      	b.n	80094c4 <_svfiprintf_r+0x48>
 80095ea:	fb00 3202 	mla	r2, r0, r2, r3
 80095ee:	2101      	movs	r1, #1
 80095f0:	e7a3      	b.n	800953a <_svfiprintf_r+0xbe>
 80095f2:	2300      	movs	r3, #0
 80095f4:	9305      	str	r3, [sp, #20]
 80095f6:	4618      	mov	r0, r3
 80095f8:	240a      	movs	r4, #10
 80095fa:	460f      	mov	r7, r1
 80095fc:	3101      	adds	r1, #1
 80095fe:	783a      	ldrb	r2, [r7, #0]
 8009600:	3a30      	subs	r2, #48	; 0x30
 8009602:	2a09      	cmp	r2, #9
 8009604:	d903      	bls.n	800960e <_svfiprintf_r+0x192>
 8009606:	2b00      	cmp	r3, #0
 8009608:	d0ca      	beq.n	80095a0 <_svfiprintf_r+0x124>
 800960a:	9005      	str	r0, [sp, #20]
 800960c:	e7c8      	b.n	80095a0 <_svfiprintf_r+0x124>
 800960e:	fb04 2000 	mla	r0, r4, r0, r2
 8009612:	2301      	movs	r3, #1
 8009614:	e7f1      	b.n	80095fa <_svfiprintf_r+0x17e>
 8009616:	ab03      	add	r3, sp, #12
 8009618:	9300      	str	r3, [sp, #0]
 800961a:	462a      	mov	r2, r5
 800961c:	4b10      	ldr	r3, [pc, #64]	; (8009660 <_svfiprintf_r+0x1e4>)
 800961e:	a904      	add	r1, sp, #16
 8009620:	4640      	mov	r0, r8
 8009622:	f3af 8000 	nop.w
 8009626:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800962a:	4681      	mov	r9, r0
 800962c:	d1d9      	bne.n	80095e2 <_svfiprintf_r+0x166>
 800962e:	89ab      	ldrh	r3, [r5, #12]
 8009630:	065b      	lsls	r3, r3, #25
 8009632:	f53f af38 	bmi.w	80094a6 <_svfiprintf_r+0x2a>
 8009636:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009638:	b01d      	add	sp, #116	; 0x74
 800963a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800963e:	ab03      	add	r3, sp, #12
 8009640:	9300      	str	r3, [sp, #0]
 8009642:	462a      	mov	r2, r5
 8009644:	4b06      	ldr	r3, [pc, #24]	; (8009660 <_svfiprintf_r+0x1e4>)
 8009646:	a904      	add	r1, sp, #16
 8009648:	4640      	mov	r0, r8
 800964a:	f000 f881 	bl	8009750 <_printf_i>
 800964e:	e7ea      	b.n	8009626 <_svfiprintf_r+0x1aa>
 8009650:	0800bc6c 	.word	0x0800bc6c
 8009654:	0800bc72 	.word	0x0800bc72
 8009658:	0800bc76 	.word	0x0800bc76
 800965c:	00000000 	.word	0x00000000
 8009660:	080093c5 	.word	0x080093c5

08009664 <_printf_common>:
 8009664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009668:	4691      	mov	r9, r2
 800966a:	461f      	mov	r7, r3
 800966c:	688a      	ldr	r2, [r1, #8]
 800966e:	690b      	ldr	r3, [r1, #16]
 8009670:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009674:	4293      	cmp	r3, r2
 8009676:	bfb8      	it	lt
 8009678:	4613      	movlt	r3, r2
 800967a:	f8c9 3000 	str.w	r3, [r9]
 800967e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009682:	4606      	mov	r6, r0
 8009684:	460c      	mov	r4, r1
 8009686:	b112      	cbz	r2, 800968e <_printf_common+0x2a>
 8009688:	3301      	adds	r3, #1
 800968a:	f8c9 3000 	str.w	r3, [r9]
 800968e:	6823      	ldr	r3, [r4, #0]
 8009690:	0699      	lsls	r1, r3, #26
 8009692:	bf42      	ittt	mi
 8009694:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009698:	3302      	addmi	r3, #2
 800969a:	f8c9 3000 	strmi.w	r3, [r9]
 800969e:	6825      	ldr	r5, [r4, #0]
 80096a0:	f015 0506 	ands.w	r5, r5, #6
 80096a4:	d107      	bne.n	80096b6 <_printf_common+0x52>
 80096a6:	f104 0a19 	add.w	sl, r4, #25
 80096aa:	68e3      	ldr	r3, [r4, #12]
 80096ac:	f8d9 2000 	ldr.w	r2, [r9]
 80096b0:	1a9b      	subs	r3, r3, r2
 80096b2:	429d      	cmp	r5, r3
 80096b4:	db29      	blt.n	800970a <_printf_common+0xa6>
 80096b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80096ba:	6822      	ldr	r2, [r4, #0]
 80096bc:	3300      	adds	r3, #0
 80096be:	bf18      	it	ne
 80096c0:	2301      	movne	r3, #1
 80096c2:	0692      	lsls	r2, r2, #26
 80096c4:	d42e      	bmi.n	8009724 <_printf_common+0xc0>
 80096c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096ca:	4639      	mov	r1, r7
 80096cc:	4630      	mov	r0, r6
 80096ce:	47c0      	blx	r8
 80096d0:	3001      	adds	r0, #1
 80096d2:	d021      	beq.n	8009718 <_printf_common+0xb4>
 80096d4:	6823      	ldr	r3, [r4, #0]
 80096d6:	68e5      	ldr	r5, [r4, #12]
 80096d8:	f8d9 2000 	ldr.w	r2, [r9]
 80096dc:	f003 0306 	and.w	r3, r3, #6
 80096e0:	2b04      	cmp	r3, #4
 80096e2:	bf08      	it	eq
 80096e4:	1aad      	subeq	r5, r5, r2
 80096e6:	68a3      	ldr	r3, [r4, #8]
 80096e8:	6922      	ldr	r2, [r4, #16]
 80096ea:	bf0c      	ite	eq
 80096ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096f0:	2500      	movne	r5, #0
 80096f2:	4293      	cmp	r3, r2
 80096f4:	bfc4      	itt	gt
 80096f6:	1a9b      	subgt	r3, r3, r2
 80096f8:	18ed      	addgt	r5, r5, r3
 80096fa:	f04f 0900 	mov.w	r9, #0
 80096fe:	341a      	adds	r4, #26
 8009700:	454d      	cmp	r5, r9
 8009702:	d11b      	bne.n	800973c <_printf_common+0xd8>
 8009704:	2000      	movs	r0, #0
 8009706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800970a:	2301      	movs	r3, #1
 800970c:	4652      	mov	r2, sl
 800970e:	4639      	mov	r1, r7
 8009710:	4630      	mov	r0, r6
 8009712:	47c0      	blx	r8
 8009714:	3001      	adds	r0, #1
 8009716:	d103      	bne.n	8009720 <_printf_common+0xbc>
 8009718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800971c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009720:	3501      	adds	r5, #1
 8009722:	e7c2      	b.n	80096aa <_printf_common+0x46>
 8009724:	18e1      	adds	r1, r4, r3
 8009726:	1c5a      	adds	r2, r3, #1
 8009728:	2030      	movs	r0, #48	; 0x30
 800972a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800972e:	4422      	add	r2, r4
 8009730:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009734:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009738:	3302      	adds	r3, #2
 800973a:	e7c4      	b.n	80096c6 <_printf_common+0x62>
 800973c:	2301      	movs	r3, #1
 800973e:	4622      	mov	r2, r4
 8009740:	4639      	mov	r1, r7
 8009742:	4630      	mov	r0, r6
 8009744:	47c0      	blx	r8
 8009746:	3001      	adds	r0, #1
 8009748:	d0e6      	beq.n	8009718 <_printf_common+0xb4>
 800974a:	f109 0901 	add.w	r9, r9, #1
 800974e:	e7d7      	b.n	8009700 <_printf_common+0x9c>

08009750 <_printf_i>:
 8009750:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009754:	4617      	mov	r7, r2
 8009756:	7e0a      	ldrb	r2, [r1, #24]
 8009758:	b085      	sub	sp, #20
 800975a:	2a6e      	cmp	r2, #110	; 0x6e
 800975c:	4698      	mov	r8, r3
 800975e:	4606      	mov	r6, r0
 8009760:	460c      	mov	r4, r1
 8009762:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009764:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8009768:	f000 80bc 	beq.w	80098e4 <_printf_i+0x194>
 800976c:	d81a      	bhi.n	80097a4 <_printf_i+0x54>
 800976e:	2a63      	cmp	r2, #99	; 0x63
 8009770:	d02e      	beq.n	80097d0 <_printf_i+0x80>
 8009772:	d80a      	bhi.n	800978a <_printf_i+0x3a>
 8009774:	2a00      	cmp	r2, #0
 8009776:	f000 80c8 	beq.w	800990a <_printf_i+0x1ba>
 800977a:	2a58      	cmp	r2, #88	; 0x58
 800977c:	f000 808a 	beq.w	8009894 <_printf_i+0x144>
 8009780:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009784:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8009788:	e02a      	b.n	80097e0 <_printf_i+0x90>
 800978a:	2a64      	cmp	r2, #100	; 0x64
 800978c:	d001      	beq.n	8009792 <_printf_i+0x42>
 800978e:	2a69      	cmp	r2, #105	; 0x69
 8009790:	d1f6      	bne.n	8009780 <_printf_i+0x30>
 8009792:	6821      	ldr	r1, [r4, #0]
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	f011 0f80 	tst.w	r1, #128	; 0x80
 800979a:	d023      	beq.n	80097e4 <_printf_i+0x94>
 800979c:	1d11      	adds	r1, r2, #4
 800979e:	6019      	str	r1, [r3, #0]
 80097a0:	6813      	ldr	r3, [r2, #0]
 80097a2:	e027      	b.n	80097f4 <_printf_i+0xa4>
 80097a4:	2a73      	cmp	r2, #115	; 0x73
 80097a6:	f000 80b4 	beq.w	8009912 <_printf_i+0x1c2>
 80097aa:	d808      	bhi.n	80097be <_printf_i+0x6e>
 80097ac:	2a6f      	cmp	r2, #111	; 0x6f
 80097ae:	d02a      	beq.n	8009806 <_printf_i+0xb6>
 80097b0:	2a70      	cmp	r2, #112	; 0x70
 80097b2:	d1e5      	bne.n	8009780 <_printf_i+0x30>
 80097b4:	680a      	ldr	r2, [r1, #0]
 80097b6:	f042 0220 	orr.w	r2, r2, #32
 80097ba:	600a      	str	r2, [r1, #0]
 80097bc:	e003      	b.n	80097c6 <_printf_i+0x76>
 80097be:	2a75      	cmp	r2, #117	; 0x75
 80097c0:	d021      	beq.n	8009806 <_printf_i+0xb6>
 80097c2:	2a78      	cmp	r2, #120	; 0x78
 80097c4:	d1dc      	bne.n	8009780 <_printf_i+0x30>
 80097c6:	2278      	movs	r2, #120	; 0x78
 80097c8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80097cc:	496e      	ldr	r1, [pc, #440]	; (8009988 <_printf_i+0x238>)
 80097ce:	e064      	b.n	800989a <_printf_i+0x14a>
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80097d6:	1d11      	adds	r1, r2, #4
 80097d8:	6019      	str	r1, [r3, #0]
 80097da:	6813      	ldr	r3, [r2, #0]
 80097dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097e0:	2301      	movs	r3, #1
 80097e2:	e0a3      	b.n	800992c <_printf_i+0x1dc>
 80097e4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80097e8:	f102 0104 	add.w	r1, r2, #4
 80097ec:	6019      	str	r1, [r3, #0]
 80097ee:	d0d7      	beq.n	80097a0 <_printf_i+0x50>
 80097f0:	f9b2 3000 	ldrsh.w	r3, [r2]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	da03      	bge.n	8009800 <_printf_i+0xb0>
 80097f8:	222d      	movs	r2, #45	; 0x2d
 80097fa:	425b      	negs	r3, r3
 80097fc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009800:	4962      	ldr	r1, [pc, #392]	; (800998c <_printf_i+0x23c>)
 8009802:	220a      	movs	r2, #10
 8009804:	e017      	b.n	8009836 <_printf_i+0xe6>
 8009806:	6820      	ldr	r0, [r4, #0]
 8009808:	6819      	ldr	r1, [r3, #0]
 800980a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800980e:	d003      	beq.n	8009818 <_printf_i+0xc8>
 8009810:	1d08      	adds	r0, r1, #4
 8009812:	6018      	str	r0, [r3, #0]
 8009814:	680b      	ldr	r3, [r1, #0]
 8009816:	e006      	b.n	8009826 <_printf_i+0xd6>
 8009818:	f010 0f40 	tst.w	r0, #64	; 0x40
 800981c:	f101 0004 	add.w	r0, r1, #4
 8009820:	6018      	str	r0, [r3, #0]
 8009822:	d0f7      	beq.n	8009814 <_printf_i+0xc4>
 8009824:	880b      	ldrh	r3, [r1, #0]
 8009826:	4959      	ldr	r1, [pc, #356]	; (800998c <_printf_i+0x23c>)
 8009828:	2a6f      	cmp	r2, #111	; 0x6f
 800982a:	bf14      	ite	ne
 800982c:	220a      	movne	r2, #10
 800982e:	2208      	moveq	r2, #8
 8009830:	2000      	movs	r0, #0
 8009832:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8009836:	6865      	ldr	r5, [r4, #4]
 8009838:	60a5      	str	r5, [r4, #8]
 800983a:	2d00      	cmp	r5, #0
 800983c:	f2c0 809c 	blt.w	8009978 <_printf_i+0x228>
 8009840:	6820      	ldr	r0, [r4, #0]
 8009842:	f020 0004 	bic.w	r0, r0, #4
 8009846:	6020      	str	r0, [r4, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d13f      	bne.n	80098cc <_printf_i+0x17c>
 800984c:	2d00      	cmp	r5, #0
 800984e:	f040 8095 	bne.w	800997c <_printf_i+0x22c>
 8009852:	4675      	mov	r5, lr
 8009854:	2a08      	cmp	r2, #8
 8009856:	d10b      	bne.n	8009870 <_printf_i+0x120>
 8009858:	6823      	ldr	r3, [r4, #0]
 800985a:	07da      	lsls	r2, r3, #31
 800985c:	d508      	bpl.n	8009870 <_printf_i+0x120>
 800985e:	6923      	ldr	r3, [r4, #16]
 8009860:	6862      	ldr	r2, [r4, #4]
 8009862:	429a      	cmp	r2, r3
 8009864:	bfde      	ittt	le
 8009866:	2330      	movle	r3, #48	; 0x30
 8009868:	f805 3c01 	strble.w	r3, [r5, #-1]
 800986c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009870:	ebae 0305 	sub.w	r3, lr, r5
 8009874:	6123      	str	r3, [r4, #16]
 8009876:	f8cd 8000 	str.w	r8, [sp]
 800987a:	463b      	mov	r3, r7
 800987c:	aa03      	add	r2, sp, #12
 800987e:	4621      	mov	r1, r4
 8009880:	4630      	mov	r0, r6
 8009882:	f7ff feef 	bl	8009664 <_printf_common>
 8009886:	3001      	adds	r0, #1
 8009888:	d155      	bne.n	8009936 <_printf_i+0x1e6>
 800988a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800988e:	b005      	add	sp, #20
 8009890:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009894:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8009898:	493c      	ldr	r1, [pc, #240]	; (800998c <_printf_i+0x23c>)
 800989a:	6822      	ldr	r2, [r4, #0]
 800989c:	6818      	ldr	r0, [r3, #0]
 800989e:	f012 0f80 	tst.w	r2, #128	; 0x80
 80098a2:	f100 0504 	add.w	r5, r0, #4
 80098a6:	601d      	str	r5, [r3, #0]
 80098a8:	d001      	beq.n	80098ae <_printf_i+0x15e>
 80098aa:	6803      	ldr	r3, [r0, #0]
 80098ac:	e002      	b.n	80098b4 <_printf_i+0x164>
 80098ae:	0655      	lsls	r5, r2, #25
 80098b0:	d5fb      	bpl.n	80098aa <_printf_i+0x15a>
 80098b2:	8803      	ldrh	r3, [r0, #0]
 80098b4:	07d0      	lsls	r0, r2, #31
 80098b6:	bf44      	itt	mi
 80098b8:	f042 0220 	orrmi.w	r2, r2, #32
 80098bc:	6022      	strmi	r2, [r4, #0]
 80098be:	b91b      	cbnz	r3, 80098c8 <_printf_i+0x178>
 80098c0:	6822      	ldr	r2, [r4, #0]
 80098c2:	f022 0220 	bic.w	r2, r2, #32
 80098c6:	6022      	str	r2, [r4, #0]
 80098c8:	2210      	movs	r2, #16
 80098ca:	e7b1      	b.n	8009830 <_printf_i+0xe0>
 80098cc:	4675      	mov	r5, lr
 80098ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80098d2:	fb02 3310 	mls	r3, r2, r0, r3
 80098d6:	5ccb      	ldrb	r3, [r1, r3]
 80098d8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80098dc:	4603      	mov	r3, r0
 80098de:	2800      	cmp	r0, #0
 80098e0:	d1f5      	bne.n	80098ce <_printf_i+0x17e>
 80098e2:	e7b7      	b.n	8009854 <_printf_i+0x104>
 80098e4:	6808      	ldr	r0, [r1, #0]
 80098e6:	681a      	ldr	r2, [r3, #0]
 80098e8:	6949      	ldr	r1, [r1, #20]
 80098ea:	f010 0f80 	tst.w	r0, #128	; 0x80
 80098ee:	d004      	beq.n	80098fa <_printf_i+0x1aa>
 80098f0:	1d10      	adds	r0, r2, #4
 80098f2:	6018      	str	r0, [r3, #0]
 80098f4:	6813      	ldr	r3, [r2, #0]
 80098f6:	6019      	str	r1, [r3, #0]
 80098f8:	e007      	b.n	800990a <_printf_i+0x1ba>
 80098fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80098fe:	f102 0004 	add.w	r0, r2, #4
 8009902:	6018      	str	r0, [r3, #0]
 8009904:	6813      	ldr	r3, [r2, #0]
 8009906:	d0f6      	beq.n	80098f6 <_printf_i+0x1a6>
 8009908:	8019      	strh	r1, [r3, #0]
 800990a:	2300      	movs	r3, #0
 800990c:	6123      	str	r3, [r4, #16]
 800990e:	4675      	mov	r5, lr
 8009910:	e7b1      	b.n	8009876 <_printf_i+0x126>
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	1d11      	adds	r1, r2, #4
 8009916:	6019      	str	r1, [r3, #0]
 8009918:	6815      	ldr	r5, [r2, #0]
 800991a:	6862      	ldr	r2, [r4, #4]
 800991c:	2100      	movs	r1, #0
 800991e:	4628      	mov	r0, r5
 8009920:	f7f6 fc7e 	bl	8000220 <memchr>
 8009924:	b108      	cbz	r0, 800992a <_printf_i+0x1da>
 8009926:	1b40      	subs	r0, r0, r5
 8009928:	6060      	str	r0, [r4, #4]
 800992a:	6863      	ldr	r3, [r4, #4]
 800992c:	6123      	str	r3, [r4, #16]
 800992e:	2300      	movs	r3, #0
 8009930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009934:	e79f      	b.n	8009876 <_printf_i+0x126>
 8009936:	6923      	ldr	r3, [r4, #16]
 8009938:	462a      	mov	r2, r5
 800993a:	4639      	mov	r1, r7
 800993c:	4630      	mov	r0, r6
 800993e:	47c0      	blx	r8
 8009940:	3001      	adds	r0, #1
 8009942:	d0a2      	beq.n	800988a <_printf_i+0x13a>
 8009944:	6823      	ldr	r3, [r4, #0]
 8009946:	079b      	lsls	r3, r3, #30
 8009948:	d507      	bpl.n	800995a <_printf_i+0x20a>
 800994a:	2500      	movs	r5, #0
 800994c:	f104 0919 	add.w	r9, r4, #25
 8009950:	68e3      	ldr	r3, [r4, #12]
 8009952:	9a03      	ldr	r2, [sp, #12]
 8009954:	1a9b      	subs	r3, r3, r2
 8009956:	429d      	cmp	r5, r3
 8009958:	db05      	blt.n	8009966 <_printf_i+0x216>
 800995a:	68e0      	ldr	r0, [r4, #12]
 800995c:	9b03      	ldr	r3, [sp, #12]
 800995e:	4298      	cmp	r0, r3
 8009960:	bfb8      	it	lt
 8009962:	4618      	movlt	r0, r3
 8009964:	e793      	b.n	800988e <_printf_i+0x13e>
 8009966:	2301      	movs	r3, #1
 8009968:	464a      	mov	r2, r9
 800996a:	4639      	mov	r1, r7
 800996c:	4630      	mov	r0, r6
 800996e:	47c0      	blx	r8
 8009970:	3001      	adds	r0, #1
 8009972:	d08a      	beq.n	800988a <_printf_i+0x13a>
 8009974:	3501      	adds	r5, #1
 8009976:	e7eb      	b.n	8009950 <_printf_i+0x200>
 8009978:	2b00      	cmp	r3, #0
 800997a:	d1a7      	bne.n	80098cc <_printf_i+0x17c>
 800997c:	780b      	ldrb	r3, [r1, #0]
 800997e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009982:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009986:	e765      	b.n	8009854 <_printf_i+0x104>
 8009988:	0800bc8e 	.word	0x0800bc8e
 800998c:	0800bc7d 	.word	0x0800bc7d

08009990 <__sread>:
 8009990:	b510      	push	{r4, lr}
 8009992:	460c      	mov	r4, r1
 8009994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009998:	f000 f8e0 	bl	8009b5c <_read_r>
 800999c:	2800      	cmp	r0, #0
 800999e:	bfab      	itete	ge
 80099a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80099a2:	89a3      	ldrhlt	r3, [r4, #12]
 80099a4:	181b      	addge	r3, r3, r0
 80099a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80099aa:	bfac      	ite	ge
 80099ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80099ae:	81a3      	strhlt	r3, [r4, #12]
 80099b0:	bd10      	pop	{r4, pc}

080099b2 <__swrite>:
 80099b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099b6:	461f      	mov	r7, r3
 80099b8:	898b      	ldrh	r3, [r1, #12]
 80099ba:	05db      	lsls	r3, r3, #23
 80099bc:	4605      	mov	r5, r0
 80099be:	460c      	mov	r4, r1
 80099c0:	4616      	mov	r6, r2
 80099c2:	d505      	bpl.n	80099d0 <__swrite+0x1e>
 80099c4:	2302      	movs	r3, #2
 80099c6:	2200      	movs	r2, #0
 80099c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099cc:	f000 f868 	bl	8009aa0 <_lseek_r>
 80099d0:	89a3      	ldrh	r3, [r4, #12]
 80099d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099da:	81a3      	strh	r3, [r4, #12]
 80099dc:	4632      	mov	r2, r6
 80099de:	463b      	mov	r3, r7
 80099e0:	4628      	mov	r0, r5
 80099e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099e6:	f000 b817 	b.w	8009a18 <_write_r>

080099ea <__sseek>:
 80099ea:	b510      	push	{r4, lr}
 80099ec:	460c      	mov	r4, r1
 80099ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099f2:	f000 f855 	bl	8009aa0 <_lseek_r>
 80099f6:	1c43      	adds	r3, r0, #1
 80099f8:	89a3      	ldrh	r3, [r4, #12]
 80099fa:	bf15      	itete	ne
 80099fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80099fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a06:	81a3      	strheq	r3, [r4, #12]
 8009a08:	bf18      	it	ne
 8009a0a:	81a3      	strhne	r3, [r4, #12]
 8009a0c:	bd10      	pop	{r4, pc}

08009a0e <__sclose>:
 8009a0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a12:	f000 b813 	b.w	8009a3c <_close_r>
	...

08009a18 <_write_r>:
 8009a18:	b538      	push	{r3, r4, r5, lr}
 8009a1a:	4c07      	ldr	r4, [pc, #28]	; (8009a38 <_write_r+0x20>)
 8009a1c:	4605      	mov	r5, r0
 8009a1e:	4608      	mov	r0, r1
 8009a20:	4611      	mov	r1, r2
 8009a22:	2200      	movs	r2, #0
 8009a24:	6022      	str	r2, [r4, #0]
 8009a26:	461a      	mov	r2, r3
 8009a28:	f000 f8ea 	bl	8009c00 <_write>
 8009a2c:	1c43      	adds	r3, r0, #1
 8009a2e:	d102      	bne.n	8009a36 <_write_r+0x1e>
 8009a30:	6823      	ldr	r3, [r4, #0]
 8009a32:	b103      	cbz	r3, 8009a36 <_write_r+0x1e>
 8009a34:	602b      	str	r3, [r5, #0]
 8009a36:	bd38      	pop	{r3, r4, r5, pc}
 8009a38:	20000d70 	.word	0x20000d70

08009a3c <_close_r>:
 8009a3c:	b538      	push	{r3, r4, r5, lr}
 8009a3e:	4c06      	ldr	r4, [pc, #24]	; (8009a58 <_close_r+0x1c>)
 8009a40:	2300      	movs	r3, #0
 8009a42:	4605      	mov	r5, r0
 8009a44:	4608      	mov	r0, r1
 8009a46:	6023      	str	r3, [r4, #0]
 8009a48:	f000 f8a4 	bl	8009b94 <_close>
 8009a4c:	1c43      	adds	r3, r0, #1
 8009a4e:	d102      	bne.n	8009a56 <_close_r+0x1a>
 8009a50:	6823      	ldr	r3, [r4, #0]
 8009a52:	b103      	cbz	r3, 8009a56 <_close_r+0x1a>
 8009a54:	602b      	str	r3, [r5, #0]
 8009a56:	bd38      	pop	{r3, r4, r5, pc}
 8009a58:	20000d70 	.word	0x20000d70

08009a5c <_fstat_r>:
 8009a5c:	b538      	push	{r3, r4, r5, lr}
 8009a5e:	4c07      	ldr	r4, [pc, #28]	; (8009a7c <_fstat_r+0x20>)
 8009a60:	2300      	movs	r3, #0
 8009a62:	4605      	mov	r5, r0
 8009a64:	4608      	mov	r0, r1
 8009a66:	4611      	mov	r1, r2
 8009a68:	6023      	str	r3, [r4, #0]
 8009a6a:	f000 f89b 	bl	8009ba4 <_fstat>
 8009a6e:	1c43      	adds	r3, r0, #1
 8009a70:	d102      	bne.n	8009a78 <_fstat_r+0x1c>
 8009a72:	6823      	ldr	r3, [r4, #0]
 8009a74:	b103      	cbz	r3, 8009a78 <_fstat_r+0x1c>
 8009a76:	602b      	str	r3, [r5, #0]
 8009a78:	bd38      	pop	{r3, r4, r5, pc}
 8009a7a:	bf00      	nop
 8009a7c:	20000d70 	.word	0x20000d70

08009a80 <_isatty_r>:
 8009a80:	b538      	push	{r3, r4, r5, lr}
 8009a82:	4c06      	ldr	r4, [pc, #24]	; (8009a9c <_isatty_r+0x1c>)
 8009a84:	2300      	movs	r3, #0
 8009a86:	4605      	mov	r5, r0
 8009a88:	4608      	mov	r0, r1
 8009a8a:	6023      	str	r3, [r4, #0]
 8009a8c:	f000 f892 	bl	8009bb4 <_isatty>
 8009a90:	1c43      	adds	r3, r0, #1
 8009a92:	d102      	bne.n	8009a9a <_isatty_r+0x1a>
 8009a94:	6823      	ldr	r3, [r4, #0]
 8009a96:	b103      	cbz	r3, 8009a9a <_isatty_r+0x1a>
 8009a98:	602b      	str	r3, [r5, #0]
 8009a9a:	bd38      	pop	{r3, r4, r5, pc}
 8009a9c:	20000d70 	.word	0x20000d70

08009aa0 <_lseek_r>:
 8009aa0:	b538      	push	{r3, r4, r5, lr}
 8009aa2:	4c07      	ldr	r4, [pc, #28]	; (8009ac0 <_lseek_r+0x20>)
 8009aa4:	4605      	mov	r5, r0
 8009aa6:	4608      	mov	r0, r1
 8009aa8:	4611      	mov	r1, r2
 8009aaa:	2200      	movs	r2, #0
 8009aac:	6022      	str	r2, [r4, #0]
 8009aae:	461a      	mov	r2, r3
 8009ab0:	f000 f888 	bl	8009bc4 <_lseek>
 8009ab4:	1c43      	adds	r3, r0, #1
 8009ab6:	d102      	bne.n	8009abe <_lseek_r+0x1e>
 8009ab8:	6823      	ldr	r3, [r4, #0]
 8009aba:	b103      	cbz	r3, 8009abe <_lseek_r+0x1e>
 8009abc:	602b      	str	r3, [r5, #0]
 8009abe:	bd38      	pop	{r3, r4, r5, pc}
 8009ac0:	20000d70 	.word	0x20000d70

08009ac4 <memcpy>:
 8009ac4:	b510      	push	{r4, lr}
 8009ac6:	1e43      	subs	r3, r0, #1
 8009ac8:	440a      	add	r2, r1
 8009aca:	4291      	cmp	r1, r2
 8009acc:	d100      	bne.n	8009ad0 <memcpy+0xc>
 8009ace:	bd10      	pop	{r4, pc}
 8009ad0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ad4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ad8:	e7f7      	b.n	8009aca <memcpy+0x6>

08009ada <memmove>:
 8009ada:	4288      	cmp	r0, r1
 8009adc:	b510      	push	{r4, lr}
 8009ade:	eb01 0302 	add.w	r3, r1, r2
 8009ae2:	d803      	bhi.n	8009aec <memmove+0x12>
 8009ae4:	1e42      	subs	r2, r0, #1
 8009ae6:	4299      	cmp	r1, r3
 8009ae8:	d10c      	bne.n	8009b04 <memmove+0x2a>
 8009aea:	bd10      	pop	{r4, pc}
 8009aec:	4298      	cmp	r0, r3
 8009aee:	d2f9      	bcs.n	8009ae4 <memmove+0xa>
 8009af0:	1881      	adds	r1, r0, r2
 8009af2:	1ad2      	subs	r2, r2, r3
 8009af4:	42d3      	cmn	r3, r2
 8009af6:	d100      	bne.n	8009afa <memmove+0x20>
 8009af8:	bd10      	pop	{r4, pc}
 8009afa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009afe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009b02:	e7f7      	b.n	8009af4 <memmove+0x1a>
 8009b04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b08:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009b0c:	e7eb      	b.n	8009ae6 <memmove+0xc>

08009b0e <_realloc_r>:
 8009b0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b10:	4607      	mov	r7, r0
 8009b12:	4614      	mov	r4, r2
 8009b14:	460e      	mov	r6, r1
 8009b16:	b921      	cbnz	r1, 8009b22 <_realloc_r+0x14>
 8009b18:	4611      	mov	r1, r2
 8009b1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009b1e:	f7ff b8b9 	b.w	8008c94 <_malloc_r>
 8009b22:	b922      	cbnz	r2, 8009b2e <_realloc_r+0x20>
 8009b24:	f7ff f868 	bl	8008bf8 <_free_r>
 8009b28:	4625      	mov	r5, r4
 8009b2a:	4628      	mov	r0, r5
 8009b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b2e:	f000 f827 	bl	8009b80 <_malloc_usable_size_r>
 8009b32:	4284      	cmp	r4, r0
 8009b34:	d90f      	bls.n	8009b56 <_realloc_r+0x48>
 8009b36:	4621      	mov	r1, r4
 8009b38:	4638      	mov	r0, r7
 8009b3a:	f7ff f8ab 	bl	8008c94 <_malloc_r>
 8009b3e:	4605      	mov	r5, r0
 8009b40:	2800      	cmp	r0, #0
 8009b42:	d0f2      	beq.n	8009b2a <_realloc_r+0x1c>
 8009b44:	4631      	mov	r1, r6
 8009b46:	4622      	mov	r2, r4
 8009b48:	f7ff ffbc 	bl	8009ac4 <memcpy>
 8009b4c:	4631      	mov	r1, r6
 8009b4e:	4638      	mov	r0, r7
 8009b50:	f7ff f852 	bl	8008bf8 <_free_r>
 8009b54:	e7e9      	b.n	8009b2a <_realloc_r+0x1c>
 8009b56:	4635      	mov	r5, r6
 8009b58:	e7e7      	b.n	8009b2a <_realloc_r+0x1c>
	...

08009b5c <_read_r>:
 8009b5c:	b538      	push	{r3, r4, r5, lr}
 8009b5e:	4c07      	ldr	r4, [pc, #28]	; (8009b7c <_read_r+0x20>)
 8009b60:	4605      	mov	r5, r0
 8009b62:	4608      	mov	r0, r1
 8009b64:	4611      	mov	r1, r2
 8009b66:	2200      	movs	r2, #0
 8009b68:	6022      	str	r2, [r4, #0]
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	f000 f832 	bl	8009bd4 <_read>
 8009b70:	1c43      	adds	r3, r0, #1
 8009b72:	d102      	bne.n	8009b7a <_read_r+0x1e>
 8009b74:	6823      	ldr	r3, [r4, #0]
 8009b76:	b103      	cbz	r3, 8009b7a <_read_r+0x1e>
 8009b78:	602b      	str	r3, [r5, #0]
 8009b7a:	bd38      	pop	{r3, r4, r5, pc}
 8009b7c:	20000d70 	.word	0x20000d70

08009b80 <_malloc_usable_size_r>:
 8009b80:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8009b84:	2800      	cmp	r0, #0
 8009b86:	f1a0 0004 	sub.w	r0, r0, #4
 8009b8a:	bfbc      	itt	lt
 8009b8c:	580b      	ldrlt	r3, [r1, r0]
 8009b8e:	18c0      	addlt	r0, r0, r3
 8009b90:	4770      	bx	lr
	...

08009b94 <_close>:
 8009b94:	4b02      	ldr	r3, [pc, #8]	; (8009ba0 <_close+0xc>)
 8009b96:	2258      	movs	r2, #88	; 0x58
 8009b98:	601a      	str	r2, [r3, #0]
 8009b9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b9e:	4770      	bx	lr
 8009ba0:	20000d70 	.word	0x20000d70

08009ba4 <_fstat>:
 8009ba4:	4b02      	ldr	r3, [pc, #8]	; (8009bb0 <_fstat+0xc>)
 8009ba6:	2258      	movs	r2, #88	; 0x58
 8009ba8:	601a      	str	r2, [r3, #0]
 8009baa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bae:	4770      	bx	lr
 8009bb0:	20000d70 	.word	0x20000d70

08009bb4 <_isatty>:
 8009bb4:	4b02      	ldr	r3, [pc, #8]	; (8009bc0 <_isatty+0xc>)
 8009bb6:	2258      	movs	r2, #88	; 0x58
 8009bb8:	601a      	str	r2, [r3, #0]
 8009bba:	2000      	movs	r0, #0
 8009bbc:	4770      	bx	lr
 8009bbe:	bf00      	nop
 8009bc0:	20000d70 	.word	0x20000d70

08009bc4 <_lseek>:
 8009bc4:	4b02      	ldr	r3, [pc, #8]	; (8009bd0 <_lseek+0xc>)
 8009bc6:	2258      	movs	r2, #88	; 0x58
 8009bc8:	601a      	str	r2, [r3, #0]
 8009bca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bce:	4770      	bx	lr
 8009bd0:	20000d70 	.word	0x20000d70

08009bd4 <_read>:
 8009bd4:	4b02      	ldr	r3, [pc, #8]	; (8009be0 <_read+0xc>)
 8009bd6:	2258      	movs	r2, #88	; 0x58
 8009bd8:	601a      	str	r2, [r3, #0]
 8009bda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bde:	4770      	bx	lr
 8009be0:	20000d70 	.word	0x20000d70

08009be4 <_sbrk>:
 8009be4:	4b04      	ldr	r3, [pc, #16]	; (8009bf8 <_sbrk+0x14>)
 8009be6:	6819      	ldr	r1, [r3, #0]
 8009be8:	4602      	mov	r2, r0
 8009bea:	b909      	cbnz	r1, 8009bf0 <_sbrk+0xc>
 8009bec:	4903      	ldr	r1, [pc, #12]	; (8009bfc <_sbrk+0x18>)
 8009bee:	6019      	str	r1, [r3, #0]
 8009bf0:	6818      	ldr	r0, [r3, #0]
 8009bf2:	4402      	add	r2, r0
 8009bf4:	601a      	str	r2, [r3, #0]
 8009bf6:	4770      	bx	lr
 8009bf8:	200002dc 	.word	0x200002dc
 8009bfc:	20000d74 	.word	0x20000d74

08009c00 <_write>:
 8009c00:	4b02      	ldr	r3, [pc, #8]	; (8009c0c <_write+0xc>)
 8009c02:	2258      	movs	r2, #88	; 0x58
 8009c04:	601a      	str	r2, [r3, #0]
 8009c06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c0a:	4770      	bx	lr
 8009c0c:	20000d70 	.word	0x20000d70

08009c10 <_init>:
 8009c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c12:	bf00      	nop
 8009c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c16:	bc08      	pop	{r3}
 8009c18:	469e      	mov	lr, r3
 8009c1a:	4770      	bx	lr

08009c1c <_fini>:
 8009c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c1e:	bf00      	nop
 8009c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c22:	bc08      	pop	{r3}
 8009c24:	469e      	mov	lr, r3
 8009c26:	4770      	bx	lr
